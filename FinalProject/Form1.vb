Imports System.ComponentModel

Public Class frmChess

    REM *********************************************************************
    REM Title of Program: Chess
    REM Purpose:  The game is designed to play chess(Person vs Person version),
    REM           and to delevop chess skills.
    REM Programmer: Eugene Fedoriv
    REM Last Edited: January 23, 2018
    REM *********************************************************************




    REM *********************************************************************
    REM Variable Dictionary:
    REM AttackedSquaresByBlack (Boolean, Array2D) = An array which determines the squares which are under attack
    REM                                             by the Black pieces (False = is not attacked, True = is under
    REM                                             attack)
    REM AttackedSquaresByWhite (Boolean, Array2D) = An array which determines the squares which are under attack
    REM                                             by the White pieces (False = is not attacked, True = is under
    REM                                             attack)
    REM B (Integer) = The B-value (from RGB) of the considered piece's backcolor
    REM BlacksMovement (Boolean, Array2D) = An array which contains all of the possible moves for Black's pieces
    REM                                     (does not involve capturing other pieces (Only contains possibele moves on 
    REM                                     the board by black pieces)) (True = the square can be settled by the Black piece,
    REM                                     False = the square can not be settled)
    REM Cheat (Integer) = Number that determines if "Eugene-Cheat" has been used( 0 = has not been used, 1= 
    REM                   has been used)
    REM CheckTick (Integer) = A counter of the remaining time for the inscription "Check" to be visible
    REM ColPick1 (Integer) = An e.Column value of the cell which has been clicked.
    REM Draw (Boolean) =  A statement which says if the game ended up being a draw
    REM DrawNumber (Integer) = Number which says whether or not all pieces exept for all bishops and knights
    REM                        have been captured before (0 = all of them have been captured, 1 = some of them
    REM                        are not captured)
    REM fullPath1 (String) = A string which contains the path to file "Previous Games"(File IO is used)
    REM fullPath2 (String) = A string which contains the path to file "Report"(File IO is used)
    REM G (integer) = The G-value (from RGB) of the considered piece's backcolor
    REM KingBChecked (Boolean) = A statement which says if the Black King is checked
    REM KingBMovesCount (Integer) = A counter for Black's King moves
    REM KingWChecked (Boolean) = A statement which says if the White King is checked
    REM KingWMovesCount (Integer) = A counter for White's King moves
    REM MateBlack (Boolean) =  A statement which says if the Black King is checkmated 
    REM MateWhite (Boolean) =  A statement which says if the White King is checkmated 
    REM Min1 (Integer) = Amount of the minutes remaining untill the end of the game (White's side)
    REM Min2 (Integer) = Amount of the minutes remaining untill the end of the game (Black's side)
    REM number (Integer) = A counter for the amount of the mouse clicks on the piece
    REM OriginalB (Integer) = The B-value (from RGB) of the considered piece's backcolor
    REM OriginalG (Integer) = The G-value (from RGB) of the considered piece's backcolor
    REM OriginalR (Integer) = The R-value (from RGB) of the considered piece's backcolor
    REM OriginalPosX (Integer) = The X-value on the Form of the considered piece
    REM OriginalPosY (Integer) = The Y-value on the Form of the considered piece
    REM path (String) = A string which gets the path to the file "Previous Games" or "Report"
    REM PawnReminder (Integer, Array1D) = An indicator which shows which pawn corresponds to
    REM                                   which one of the eight possible queens (when the pawn gets promoted to a queen) 
    REM PawnsFirstMove (Boolean, Aray1D) = An array which determines wheter or not the corresponding pawn has
    REM                                    made its first move in the game(False = has been made, True = hasn't been made)
    REM PawnsTwoSquaresAhead (Boolean, Aray1D) = Determines whether the corresponding pawn has made a two-
    REM                                   square first move (False = has been made, True = hasn't been made)
    REM Player1 (String) = The name of a person who is going to play with White pieces
    REM Player2 (String) = The name of a person who is going to play with Black pieces
    REM PointsWonBlack (Integer) = The amount points that the Black side is ahead of White 
    REM PointsWonWhite (Integer) = The amount points that the White side is ahead of Black 
    REM R (Integer) = The R-value (from RGB) of the considered piece's backcolor
    REM Reset (Boolean, Array2D) = An array which prevents summoning cheat-Queens on the same square(it sets 'True'
    REM                             for each cell that has been already settled)
    REM RockB1MovesCount (Integer) = A counter for Black's Rock #1 moves
    REM RockB2MovesCount (Integer) = A counter for Black's Rock #2 moves
    REM RockW1MovesCount (Integer) = A counter for White's Rock #1 moves
    REM RockW2MovesCount (Integer) = A counter for White's Rock #2 moves
    REM RowPick1 (Integer) = An e.Row value of the cell which has been clicked.
    REM Sec1 (Integer) = The amount of the second remaining untill the end of the game( White's side)
    REM Sec2 (Integer) = The amount of the second remaining untill the end of the game( Black's side)
    REM ShapeLocated (Boolean, Array2D) = An array which determines whether or not any piece(Either White
    REM                                    or Black) is settled on the corresponding array possitions
    REM                                    (False = piece is settled on the cell, True= piece is not
    REM                                    settled on the cell)
    REM ShapeLocatedB (Boolean, Array2D) = An array which determines whether or not the Black pieces are settled
    REM                                    on the corresponding array possitions ( False = Black piece is settled
    REM                                    on the cell, True= Black piece is not settled on the cell)
    REM ShapeLocatedW (Boolean, Array2D) = An array which determines whether or not the White pieces are settled
    REM                                    on the corresponding array possition( False = White piece is settled
    REM                                    on the cell, True= White piece is not settled on the cell)
    REM ShapeLocationCol (Integer) = The coefficient of Column value for a certain piece on the board
    REM ShapeLocationRow (Integer) = The coefficient of Row value for a certain piece on the board
    REM Shapes (Integer) = Represents all of the pieces( 1 = Black King, 2 = White King, 3 = Black Queen,
    REM                    4 = White Queen , etc.)
    REM StaleMate (Boolean) =  A statement which says if the game ended up being a draw
    REM Taken (Boolean) = Determines if the White piece has been captured by any of the Black pieces.
    REM                   (False= has not been captured, True = Has been captured)
    REM Taken2 (Boolean) = Determines if the Black piece has been captured by any of the White piece.
    REM                   (False= has not been captured, True = Has been captured)
    REM Turn (Boolean) = Determines whether it is White's turn(= False), or 
    REM                  Black's(= True)
    REM WhitesMovement (Boolean, Array2D) = An array which contains all of the possible moves for White's pieces
    REM                                     (does not involve capturing other pieces (Only contains possibele moves on 
    REM                                     the board by white pieces)) (True = the square can be settled by a White piece)
    REM XPos (Integer) = Converts a cell's e.Column value
    REM                  to its x-Value on the Form
    REM YPos (Integer) = Converts a cell's e.Row value
    REM                  to its y-Value on the Form
    REM *********************************************************************

    Dim path As String
    Dim fullPath1, fullPath2 As String
    Dim Reset(7, 7) As Boolean
    Dim Cheat As Integer
    Dim PawnReminder(15) As Integer
    Dim PointsWonWhite, PointsWonBlack As Integer
    Dim Player1, Player2 As String
    Dim Min1, Min2, Sec1, Sec2 As Integer
    Dim CheckTick As Integer
    Dim StaleMate As Boolean
    Dim DrawNumber As Integer = 0
    Dim Draw As Boolean = False
    Dim MateWhite, MateBlack As Boolean
    Dim OriginalPosX, OriginalPosY As Integer
    Dim OriginalR, OriginalB, OriginalG As Integer
    Dim KingWChecked As Boolean = False
    Dim KingBChecked As Boolean = False
    Dim AttackedSquaresByBlack(7, 7) As Boolean
    Dim AttackedSquaresByWhite(7, 7) As Boolean
    Dim ShapeLocated(7, 7) As Boolean
    Dim ShapeLocatedW(7, 7) As Boolean
    Dim ShapeLocatedB(7, 7) As Boolean
    Dim WhitesMovement(7, 7) As Boolean
    Dim BlacksMovement(7, 7) As Boolean
    Dim PawnsTwoSquaresAhead() As Boolean = {True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True}
    Dim Taken, Taken2 As Boolean
    Dim PawnsFirstMove() As Boolean = {True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True}
    Dim XPos, YPos As Single
    Dim R, B, G As Integer
    Dim Shapes As Integer
    Dim ShapeLocationCol, ShapeLocationRow As Integer
    Dim KingWMovesCount, KingBMovesCount, RockB1MovesCount, RockB2MovesCount, RockW1MovesCount, RockW2MovesCount As Integer
    Dim RowPick1, ColPick1, number As Integer
    Dim Turn As Boolean = False

    Sub CheckDraw()
        DrawNumber = 0

        REM *****************************************************************
        REM 	Determining whether all of the pieces(exept for bishops and knights) are captured (IF statement)
        REM *****************************************************************

        If picQueenB.Location.X > 647 Then
            If picQueenB1.Location.X > 647 Then
                If picQueenB2.Location.X > 647 Then
                    If picQueenB3.Location.X > 647 Then
                        If picQueenB4.Location.X > 647 Then
                            If picQueenB5.Location.X > 647 Then
                                If picQueenB6.Location.X > 647 Then
                                    If picQueenB7.Location.X > 647 Then
                                        If picQueenB8.Location.X > 647 Then
                                            If picRockB1.Location.X > 647 Then
                                                If picRockB2.Location.X > 647 Then
                                                    If picPawnB1.Location.X > 647 Then
                                                        If picPawnB2.Location.X > 647 Then
                                                            If picPawnB3.Location.X > 647 Then
                                                                If picPawnB4.Location.X > 647 Then
                                                                    If picPawnB5.Location.X > 647 Then
                                                                        If picPawnB6.Location.X > 647 Then
                                                                            If picPawnB7.Location.X > 647 Then
                                                                                If picPawnB8.Location.X > 647 Then
                                                                                    If picQueenW.Location.X > 647 Then
                                                                                        If picQueenW1.Location.X > 647 Then
                                                                                            If picQueenW2.Location.X > 647 Then
                                                                                                If picQueenW3.Location.X > 647 Then
                                                                                                    If picQueenW4.Location.X > 647 Then
                                                                                                        If picQueenW5.Location.X > 647 Then
                                                                                                            If picQueenW6.Location.X > 647 Then
                                                                                                                If picQueenW7.Location.X > 647 Then
                                                                                                                    If picQueenW8.Location.X > 647 Then
                                                                                                                        If picRockW1.Location.X > 647 Then
                                                                                                                            If picRockW2.Location.X > 647 Then
                                                                                                                                If picPawnW1.Location.X > 647 Then
                                                                                                                                    If picPawnW2.Location.X > 647 Then
                                                                                                                                        If picPawnW3.Location.X > 647 Then
                                                                                                                                            If picPawnW4.Location.X > 647 Then
                                                                                                                                                If picPawnW5.Location.X > 647 Then
                                                                                                                                                    If picPawnW6.Location.X > 647 Then
                                                                                                                                                        If picPawnW7.Location.X > 647 Then
                                                                                                                                                            If picPawnW8.Location.X > 647 Then

                                                                                                                                                                DrawNumber = 1

                                                                                                                                                            End If
                                                                                                                                                        End If
                                                                                                                                                    End If
                                                                                                                                                End If
                                                                                                                                            End If
                                                                                                                                        End If
                                                                                                                                    End If
                                                                                                                                End If
                                                                                                                            End If
                                                                                                                        End If
                                                                                                                    End If
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If


    End Sub

    Sub DrawChkB()

        REM *********************************************************************
        REM Variable Dictionary:
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Draw = False
        CheckDraw()

        REM *****************************************************************
        REM 	Determining whether it is a draw due to lack of pieces (IF statements)
        REM     i.e One of the chess rules is that one cannot checkmate another with only bishops or nights, 
        REM     thus, if both players are left with only nights or bishops it is an automatic draw. 
        REM *****************************************************************

        If DrawNumber = 1 Then

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW1.Location.X > 647 Then
                                        If picKnightW2.Location.X > 647 Then
                                            Draw = True REM Case when only two kings are left
                                            Exit Sub
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True  REM case when only a bishop and two kings are left (B1)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True  REM case when only a bishop and two kings are left (B2)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True  REM case when only a bishop and two kings are left (W1)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True  REM case when only a bishop and two kings are left (W2)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True  REM case when only a knight and two kings are left (B1)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True REM case when only a knight and two kings are left (B2)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True REM case when only a knight and two kings are left (W1)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW1.Location.X > 647 Then
                                        Draw = True REM case when only a knight and two kings are left (W2)
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If






            If picBishopB2.Location.X > 647 Then
                If picBishopW2.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white and a black bishop and two kings are left (B1 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white and a black bishop and two kings are left (B1 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black bishop and two kings are left (B1 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black bishop and two kings are left (B1 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW2.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white and a black bishop and two kings are left (B2 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white bishop and a black bishop and two kings are left (B2 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black bishop and two kings are left (B2 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black bishop and two kings are left (B2 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white bishop and a black knight and two kings are left (B1 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white bishop and a black knight and two kings are left (B1 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black knight and two kings are left (B1 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True  REM case when only a white knight and a black knight and two kings are left (B1 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True  REM case when only a white bishop and a black knight and two kings are left (B2 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True  REM case when only a white bishop and a black knight and two kings are left (B2 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True  REM case when only a white knight and a black knight and two kings are left (B2 and W1)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True REM case when only a white knight and a black knight and two kings are left (B2 and W2)
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        End If



        StaleMate = False

        CheckForMateB()
        CheckForCheckB()

        If KingBChecked = True Then
            Exit Sub
        End If


        If MateBlack = False Then
            MovementB()

            REM *****************************************************************
            REM 	Determining whether any of Black pieces can be moved (For_Next statements)
            REM *****************************************************************

            For i = 0 To 7
                For j = 0 To 7
                    If BlacksMovement(i, j) = True Then
                        StaleMate = False
                        CheckForCheckB()
                        Exit Sub

                    End If
                Next
            Next

            ShapeLocationCol = (picKingB.Location.X + 1.4) / 80
            ShapeLocationRow = (picKingB.Location.Y + 1.4) / 80

            REM *****************************************************************
            REM 	Determining whether Black King is able to be settled on the one of
            REM     surrounded him squares (For_Next statements)
            REM *****************************************************************

            For i = -1 To 1

                For j = -1 To 1
                    If ShapeLocationCol > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j < 0 Then
                        GoTo Proceed0
                    End If

                    If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        CheckForCheckB()
                        If AttackedSquaresByWhite(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            StaleMate = False
                            CheckForCheckB()
                            Exit Sub
                        End If
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                        If ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False Then

                            If Int(picQueenW.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW.Hide()
                                    picQueenW.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picBishopW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopW1.Hide()
                                    picBishopW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picBishopW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picBishopW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picBishopW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopW2.Hide()
                                    picBishopW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picBishopW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picBishopW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picKnightW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightW1.Hide()
                                    picKnightW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picKnightW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picKnightW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picKnightW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightW2.Hide()
                                    picKnightW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picKnightW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picKnightW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picRockW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockW1.Hide()
                                    picRockW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picRockW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picRockW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picRockW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockW2.Hide()
                                    picRockW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picRockW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picRockW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picPawnW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW1.Hide()
                                    picPawnW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW2.Hide()
                                    picPawnW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW3.Hide()
                                    picPawnW3.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW3.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW3.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW4.Hide()
                                    picPawnW4.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW4.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW4.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW5.Hide()
                                    picPawnW5.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW5.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW5.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW6.Hide()
                                    picPawnW6.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW6.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW6.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW7.Hide()
                                    picPawnW7.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW7.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW7.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW8.Hide()
                                    picPawnW8.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW8.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW8.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW1.Hide()
                                    picQueenW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW2.Hide()
                                    picQueenW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW3.Hide()
                                    picQueenW3.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW3.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW3.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW4.Hide()
                                    picQueenW4.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW4.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW4.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW5.Hide()
                                    picQueenW5.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW5.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW5.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW6.Hide()
                                    picQueenW6.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW6.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW6.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW7.Hide()
                                    picQueenW7.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW7.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW7.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW8.Hide()
                                    picQueenW8.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW8.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW8.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                        End If
                        GoTo Proceed0
                    End If
Proceed0:       Next
                CheckForCheckB()
            Next

            StaleMate = True
            Exit Sub

        End If



    End Sub

    Sub DrawChkW()

        REM *********************************************************************
        REM Variable Dictionary:
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Draw = False
        CheckDraw()

        REM *****************************************************************
        REM 	Determining whether it is a draw due to lack of pieces (IF statements)
        REM     i.e One of the chess rules is that one cannot checkmate another with only bishops or nights, 
        REM     thus, if both players are left with only nights or bishops it is an automatic draw. 
        REM *****************************************************************

        If DrawNumber = 1 Then
            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW1.Location.X > 647 Then
                                        If picKnightW2.Location.X > 647 Then
                                            Draw = True
                                            Exit Sub
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightB2.Location.X > 647 Then
                                    If picKnightW1.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    If picKnightW2.Location.X > 647 Then
                                        Draw = True
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            REM**************************

            If picBishopB2.Location.X > 647 Then
                If picBishopW2.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB2.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW2.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picKnightB1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopW1.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB2.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB2.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW2.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picKnightB1.Location.X > 647 Then
                            If picKnightW1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW2.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            If picBishopB1.Location.X > 647 Then
                If picBishopB2.Location.X > 647 Then
                    If picBishopW1.Location.X > 647 Then
                        If picBishopW2.Location.X > 647 Then
                            If picKnightB1.Location.X > 647 Then
                                If picKnightW1.Location.X > 647 Then
                                    Draw = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        End If



        StaleMate = False

        CheckForMateW()
        CheckForCheckW()


        If KingWChecked = True Then
            Exit Sub
        End If

        If MateWhite = False Then
            MovementW()

            REM *****************************************************************
            REM 	Determining whether any of White pieces can be moved (For_Next statements)
            REM *****************************************************************

            For i = 0 To 7
                For j = 0 To 7
                    If WhitesMovement(i, j) = True Then
                        StaleMate = False
                        CheckForCheckW()
                        Exit Sub

                    End If
                Next
            Next

            ShapeLocationCol = (picKingW.Location.X + 1.4) / 80
            ShapeLocationRow = (picKingW.Location.Y + 1.4) / 80

            REM *****************************************************************
            REM 	Determining whether White King is able to be settled on the one of
            REM     surrounded him squares (For_Next statements)
            REM *****************************************************************

            For i = -1 To 1

                For j = -1 To 1
                    If ShapeLocationCol > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        CheckForCheckW()
                        If AttackedSquaresByBlack(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            StaleMate = False
                            CheckForCheckW()
                            Exit Sub

                        End If
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                        If ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False Then

                            If Int(picQueenB.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB.Hide()
                                    picQueenB.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picBishopB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopB1.Hide()
                                    picBishopB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picBishopB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picBishopB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picBishopB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopB2.Hide()
                                    picBishopB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picBishopB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picBishopB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picKnightB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightB1.Hide()
                                    picKnightB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picKnightB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picKnightB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picKnightB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightB2.Hide()
                                    picKnightB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picKnightB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picKnightB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picRockB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockB1.Hide()
                                    picRockB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picRockB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picRockB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picRockB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockB2.Hide()
                                    picRockB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picRockB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picRockB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picPawnB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB1.Hide()
                                    picPawnB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB2.Hide()
                                    picPawnB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB3.Hide()
                                    picPawnB3.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB3.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB3.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB4.Hide()
                                    picPawnB4.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB4.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB4.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB5.Hide()
                                    picPawnB5.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB5.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB5.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB6.Hide()
                                    picPawnB6.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB6.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB6.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB7.Hide()
                                    picPawnB7.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB7.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB7.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB8.Hide()
                                    picPawnB8.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB8.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB8.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB1.Hide()
                                    picQueenB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB2.Hide()
                                    picQueenB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB3.Hide()
                                    picQueenB3.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB3.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB3.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB4.Hide()
                                    picQueenB4.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB4.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB4.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB5.Hide()
                                    picQueenB5.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB5.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB5.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB6.Hide()
                                    picQueenB6.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB6.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB6.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB7.Hide()
                                    picQueenB7.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB7.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB7.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB8.Hide()
                                    picQueenB8.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB8.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        StaleMate = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB8.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If



                        End If
                        GoTo Proceed0
                    End If
Proceed0:       Next
                CheckForCheckW()
            Next

            StaleMate = True
            Exit Sub

        End If

    End Sub

    Sub CheckForMateB()

        REM *********************************************************************
        REM Variable Dictionary:
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        If KingBChecked = True Then

            MateBlack = True

            'KingB



            ShapeLocationCol = (picKingB.Location.X + 1.4) / 80
            ShapeLocationRow = (picKingB.Location.Y + 1.4) / 80

            REM *****************************************************************
            REM 	Determining whether the Black King can be moved to one of the surrounding him
            REM     squares without being checked (For_Next statements)
            REM *****************************************************************


            For i = -1 To 1

                For j = -1 To 1

                    REM Edge cases:
                    If ShapeLocationCol > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j < 0 Then
                        GoTo Proceed0
                    End If


                    If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        CheckForCheckB()
                        If AttackedSquaresByWhite(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                        If ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False Then

                            If Int(picQueenW.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW.Hide()
                                    picQueenW.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picBishopW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopW1.Hide()
                                    picBishopW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picBishopW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picBishopW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picBishopW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopW2.Hide()
                                    picBishopW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picBishopW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picBishopW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picKnightW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightW1.Hide()
                                    picKnightW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picKnightW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picKnightW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picKnightW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightW2.Hide()
                                    picKnightW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picKnightW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picKnightW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picRockW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockW1.Hide()
                                    picRockW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picRockW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picRockW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picRockW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockW2.Hide()
                                    picRockW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picRockW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picRockW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picPawnW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW1.Hide()
                                    picPawnW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW2.Hide()
                                    picPawnW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW3.Hide()
                                    picPawnW3.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW3.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW3.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW4.Hide()
                                    picPawnW4.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW4.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW4.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW5.Hide()
                                    picPawnW5.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW5.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW5.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW6.Hide()
                                    picPawnW6.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW6.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW6.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW7.Hide()
                                    picPawnW7.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW7.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW7.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnW8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnW8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnW8.Hide()
                                    picPawnW8.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picPawnW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnW8.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picPawnW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnW8.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW1.Hide()
                                    picQueenW1.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW1.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW1.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW2.Hide()
                                    picQueenW2.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW2.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW2.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW3.Hide()
                                    picQueenW3.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW3.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW3.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW4.Hide()
                                    picQueenW4.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW4.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW4.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW5.Hide()
                                    picQueenW5.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW5.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW5.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW6.Hide()
                                    picQueenW6.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW6.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW6.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW7.Hide()
                                    picQueenW7.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW7.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW7.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenW8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenW8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenW8.Hide()
                                    picQueenW8.Location = New Point(757, 0)
                                    picKingB.Hide()
                                    picKingB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckB()
                                    If KingBChecked = False Then
                                        picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingB.Show()
                                        picQueenW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenW8.Show()
                                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateBlack = False
                                        CheckForCheckB()
                                        Exit Sub
                                    End If
                                    picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingB.Show()
                                    picQueenW8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenW8.Show()
                                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                        End If
                        GoTo Proceed0
                    End If
Proceed0:       Next

            Next

            MovementB()

            REM *****************************************************************
            REM 	Determining whether any of Black pieces can prevent the check by
            REM     being settled on any of available square (For_Next statements)
            REM *****************************************************************


            For i = 0 To 7
                For j = 0 To 7
                    If BlacksMovement(i, j) = True Then
                        ShapeLocatedB(i, j) = False
                        ShapeLocated(i, j) = False
                        CheckForCheckB()
                        If KingBChecked = False Then
                            ShapeLocatedB(i, j) = True
                            ShapeLocated(i, j) = True
                            MateBlack = False
                            CheckForCheckB()
                            Exit Sub

                        End If
                        ShapeLocatedB(i, j) = True
                        ShapeLocated(i, j) = True
                    End If
                Next
            Next

            REM *****************************************************************
            REM 	Determining whether any of Black pieces can prevent the check by
            REM     capturing any of available White pieces (For_Next statements)
            REM *****************************************************************

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picBishopW1)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picBishopW2)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picKnightW1)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picKnightW2)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picRockW1)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picRockW2)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW1)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW2)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW3)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW4)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW5)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW6)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW7)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picPawnW8)

                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW1)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW2)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW3)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next


            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW4)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next


            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW5)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next


            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW6)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW7)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateW1(picQueenW8)
                If MateBlack = False Then
                    CheckForCheckB()
                    Exit Sub
                End If
            Next

        End If
    End Sub

    Sub CheckForMateW()

        REM *********************************************************************
        REM Variable Dictionary:
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        If KingWChecked = True Then

            MateWhite = True

            'KingW
            ShapeLocationCol = (picKingW.Location.X + 1.4) / 80
            ShapeLocationRow = (picKingW.Location.Y + 1.4) / 80

            REM *****************************************************************
            REM 	Determining whether the White King can be moved to one of the surrounding him
            REM     squares without being checked (For_Next statements)
            REM *****************************************************************


            For i = -1 To 1

                For j = -1 To 1
                    If ShapeLocationCol > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationRow + i < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j > 7 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocationCol + j < 0 Then
                        GoTo Proceed0
                    End If
                    If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        CheckForCheckW()
                        If AttackedSquaresByBlack(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub

                        End If
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol + j) = False Then
                        If ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False Then

                            If Int(picQueenB.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB.Hide()
                                    picQueenB.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picBishopB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopB1.Hide()
                                    picBishopB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picBishopB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picBishopB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picBishopB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picBishopB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picBishopB2.Hide()
                                    picBishopB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picBishopB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picBishopB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picBishopB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picBishopB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picKnightB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightB1.Hide()
                                    picKnightB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picKnightB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picKnightB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picKnightB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picKnightB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picKnightB2.Hide()
                                    picKnightB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picKnightB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picKnightB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picKnightB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picKnightB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picRockB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockB1.Hide()
                                    picRockB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picRockB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picRockB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picRockB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picRockB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picRockB2.Hide()
                                    picRockB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picRockB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picRockB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picRockB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picRockB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picPawnB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB1.Hide()
                                    picPawnB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB2.Hide()
                                    picPawnB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB3.Hide()
                                    picPawnB3.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB3.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB3.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB4.Hide()
                                    picPawnB4.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB4.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB4.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB5.Hide()
                                    picPawnB5.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB5.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB5.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB6.Hide()
                                    picPawnB6.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB6.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB6.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB7.Hide()
                                    picPawnB7.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB7.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB7.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If
                            If Int(picPawnB8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picPawnB8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picPawnB8.Hide()
                                    picPawnB8.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picPawnB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picPawnB8.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picPawnB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picPawnB8.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB1.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB1.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB1.Hide()
                                    picQueenB1.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB1.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB1.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB1.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB2.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB2.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB2.Hide()
                                    picQueenB2.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB2.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB2.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB2.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB3.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB3.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB3.Hide()
                                    picQueenB3.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB3.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB3.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB3.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB4.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB4.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB4.Hide()
                                    picQueenB4.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB4.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB4.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB4.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB5.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB5.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB5.Hide()
                                    picQueenB5.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB5.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB5.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB5.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB6.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB6.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB6.Hide()
                                    picQueenB6.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB6.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB6.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB6.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB7.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB7.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB7.Hide()
                                    picQueenB7.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB7.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB7.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB7.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If

                            If Int(picQueenB8.Location.X / 80) = ShapeLocationCol + j Then
                                If Int(picQueenB8.Location.Y / 80) = ShapeLocationRow + i Then
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                                    picQueenB8.Hide()
                                    picQueenB8.Location = New Point(757, 0)
                                    picKingW.Hide()
                                    picKingW.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    CheckForCheckW()
                                    If KingWChecked = False Then
                                        picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                        picKingW.Show()
                                        picQueenB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                        picQueenB8.Show()
                                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                        ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                        MateWhite = False
                                        CheckForCheckW()
                                        Exit Sub
                                    End If
                                    picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                    picKingW.Show()
                                    picQueenB8.Location = New Point(((ShapeLocationCol + j) * 80) + 1.4, ((ShapeLocationRow + i) * 80) + 1.4)
                                    picQueenB8.Show()
                                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                    ShapeLocatedW(ShapeLocationRow + i, ShapeLocationCol + j) = True
                                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol + j) = False
                                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                End If
                            End If



                        End If
                        GoTo Proceed0
                    End If
Proceed0:       Next

            Next

            MovementW()

            REM *****************************************************************
            REM 	Determining whether any of White pieces can prevent the check by
            REM     being settled on any of available square (For_Next statements)
            REM *****************************************************************

            For i = 0 To 7
                For j = 0 To 7
                    If WhitesMovement(i, j) = True Then
                        ShapeLocatedW(i, j) = False
                        ShapeLocated(i, j) = False
                        CheckForCheckW()
                        If KingWChecked = False Then
                            ShapeLocatedW(i, j) = True
                            ShapeLocated(i, j) = True
                            MateWhite = False
                            CheckForCheckW()
                            Exit Sub

                        End If
                        ShapeLocatedW(i, j) = True
                        ShapeLocated(i, j) = True
                    End If
                Next
            Next


            REM *****************************************************************
            REM 	Determining whether any of White pieces can prevent the check by
            REM     capturing any of available Black pieces (For_Next statements)
            REM *****************************************************************

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picBishopB1)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picBishopB2)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picKnightB1)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picKnightB2)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picRockB1)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picRockB2)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB1)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB2)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB3)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB4)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB5)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB6)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB7)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picPawnB8)

                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB1)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB2)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB3)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB4)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB5)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB6)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB7)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

            For i = 1 To 48
                Shapes = i
                MateB1(picQueenB8)
                If MateWhite = False Then
                    CheckForCheckW()
                    Exit Sub
                End If
            Next

        End If
    End Sub

    Sub MateW1(ByRef picShape As PictureBox)

        REM *********************************************************************
        REM Variable Dictionary:
        REM ColPick1 (Integer) = The coefficient of Column value of a certain piece on the board(another one)
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM RowPick1 (Integer) = The coefficient of Row value of a certain piece on the board(another one)
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Dim o As Integer
        Dim ColPick1, RowPick1 As Integer
        ColPick1 = (picShape.Location.X + 1.4) / 80
        RowPick1 = (picShape.Location.Y + 1.4) / 80

        If ColPick1 > 7 Then
            Exit Sub
        End If


        REM *****************************************************************
        REM 	Determining whether a certain Black piece can prevent the check by
        REM     capturing any of available White pieces (If statement)
        REM *****************************************************************

        If Shapes = 1 Then
            ShapeLocationCol = ((picKingB.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKingB.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1
                For j = -1 To 1
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picKingB.Hide()
                            picKingB.Location = New Point(((ColPick1) * 80) + 1.4, ((RowPick1) * 80) + 1.4)
                            CheckForCheckB()
                            If KingBChecked = False Then
                                picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                picKingB.Show()
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedB(RowPick1, ColPick1) = True
                                ShapeLocatedW(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateBlack = False
                                Exit Sub
                            End If
                            picKingB.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                            picKingB.Show()
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

        ElseIf Shapes = 2 Then
            Exit Sub
        ElseIf Shapes = 3 Then

            ShapeLocationCol = ((picQueenB.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 4 Then
            Exit Sub
        ElseIf Shapes = 5 Then

            ShapeLocationCol = ((picBishopB1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picBishopB1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 6 Then
            ShapeLocationCol = ((picBishopB2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picBishopB2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 7 Then
            Exit Sub
        ElseIf Shapes = 8 Then
            Exit Sub
        ElseIf Shapes = 9 Then

            ShapeLocationCol = ((picKnightB1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKnightB1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -2 To 2 Step 4
                For i = -1 To 2 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckB()
                            If KingBChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedB(RowPick1, ColPick1) = True
                                ShapeLocatedW(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateBlack = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

            For j = -1 To 1 Step 2
                For i = -2 To 2 Step 4

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckB()
                            If KingBChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedB(RowPick1, ColPick1) = True
                                ShapeLocatedW(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateBlack = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

        ElseIf Shapes = 10 Then

            ShapeLocationCol = ((picKnightB2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKnightB2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -2 To 2 Step 4
                For i = -1 To 2 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckB()
                            If KingBChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedB(RowPick1, ColPick1) = True
                                ShapeLocatedW(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateBlack = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

            For j = -1 To 1 Step 2
                For i = -2 To 2 Step 4

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckB()
                            If KingBChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedB(RowPick1, ColPick1) = True
                                ShapeLocatedW(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateBlack = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next
        ElseIf Shapes = 11 Then
            Exit Sub
        ElseIf Shapes = 12 Then
            Exit Sub
        ElseIf Shapes = 13 Then

            ShapeLocationCol = ((picRockB1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picRockB1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next


        ElseIf Shapes = 14 Then

            ShapeLocationCol = ((picRockB2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picRockB2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 15 Then
            Exit Sub
        ElseIf Shapes = 16 Then
            Exit Sub
        ElseIf Shapes = 17 Then
            ShapeLocationCol = ((picPawnB1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 18 Then
            ShapeLocationCol = ((picPawnB2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next
        ElseIf Shapes = 19 Then
            ShapeLocationCol = ((picPawnB3.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB3.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next
        ElseIf Shapes = 20 Then
            ShapeLocationCol = ((picPawnB4.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB4.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 21 Then
            ShapeLocationCol = ((picPawnB5.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB5.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 22 Then
            ShapeLocationCol = ((picPawnB6.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB6.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 23 Then
            ShapeLocationCol = ((picPawnB7.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB7.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 24 Then
            ShapeLocationCol = ((picPawnB8.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnB8.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 25 Then
            Exit Sub
        ElseIf Shapes = 26 Then
            Exit Sub
        ElseIf Shapes = 27 Then
            Exit Sub
        ElseIf Shapes = 28 Then
            Exit Sub
        ElseIf Shapes = 29 Then
            Exit Sub
        ElseIf Shapes = 30 Then
            Exit Sub
        ElseIf Shapes = 31 Then
            Exit Sub
        ElseIf Shapes = 32 Then
            Exit Sub
        ElseIf Shapes = 33 Then

            ShapeLocationCol = ((picQueenB1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 34 Then

            ShapeLocationCol = ((picQueenB2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 35 Then

            ShapeLocationCol = ((picQueenB3.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB3.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 36 Then

            ShapeLocationCol = ((picQueenB4.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB4.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 37 Then

            ShapeLocationCol = ((picQueenB5.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB5.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 38 Then

            ShapeLocationCol = ((picQueenB6.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB6.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 39 Then

            ShapeLocationCol = ((picQueenB7.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB7.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 40 Then

            ShapeLocationCol = ((picQueenB8.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenB8.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckB()
                        If KingBChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateBlack = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next




        ElseIf Shapes = 41 Then
            Exit Sub
        ElseIf Shapes = 42 Then
            Exit Sub
        ElseIf Shapes = 43 Then
            Exit Sub
        ElseIf Shapes = 44 Then
            Exit Sub
        ElseIf Shapes = 45 Then
            Exit Sub
        ElseIf Shapes = 46 Then
            Exit Sub
        ElseIf Shapes = 47 Then
            Exit Sub
        ElseIf Shapes = 48 Then
            Exit Sub
        End If



    End Sub

    Sub MateB1(ByRef picShape As PictureBox)


        REM *********************************************************************
        REM Variable Dictionary:
        REM ColPick1 (Integer) = The coefficient of Column value of a certain piece on the board(another one)
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM RowPick1 (Integer) = The coefficient of Row value of a certain piece on the board(another one)
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Dim o As Integer
        Dim ColPick1, RowPick1 As Integer

        ColPick1 = (picShape.Location.X + 1.4) / 80
        RowPick1 = (picShape.Location.Y + 1.4) / 80

        If ColPick1 > 7 Then
            Exit Sub
        End If

        REM *****************************************************************
        REM 	Determining whether a certain White piece can prevent the check by
        REM     capturing any of available Black pieces (If statement)
        REM *****************************************************************

        If Shapes = 1 Then
            Exit Sub

        ElseIf Shapes = 2 Then
            ShapeLocationCol = ((picKingW.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKingW.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1
                For j = -1 To 1
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picKingW.Hide()
                            picKingW.Location = New Point(((ColPick1) * 80) + 1.4, ((RowPick1) * 80) + 1.4)
                            CheckForCheckW()
                            If KingWChecked = False Then
                                picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                                picKingW.Show()
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedW(RowPick1, ColPick1) = True
                                ShapeLocatedB(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateWhite = False
                                Exit Sub
                            End If
                            picKingW.Location = New Point(((ShapeLocationCol) * 80) + 1.4, ((ShapeLocationRow) * 80) + 1.4)
                            picKingW.Show()
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next
        ElseIf Shapes = 3 Then
            Exit Sub


        ElseIf Shapes = 4 Then

            ShapeLocationCol = ((picQueenW.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 5 Then

            Exit Sub

        ElseIf Shapes = 6 Then
            Exit Sub

        ElseIf Shapes = 7 Then
            ShapeLocationCol = ((picBishopW1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picBishopW1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

        ElseIf Shapes = 8 Then
            ShapeLocationCol = ((picBishopW2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picBishopW2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

        ElseIf Shapes = 9 Then
            Exit Sub
        ElseIf Shapes = 10 Then
            Exit Sub
        ElseIf Shapes = 11 Then

            ShapeLocationCol = ((picKnightW1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKnightW1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -2 To 2 Step 4
                For i = -1 To 2 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckW()
                            If KingWChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedW(RowPick1, ColPick1) = True
                                ShapeLocatedB(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateWhite = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

            For j = -1 To 1 Step 2
                For i = -2 To 2 Step 4

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckW()
                            If KingWChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedW(RowPick1, ColPick1) = True
                                ShapeLocatedB(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateWhite = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

        ElseIf Shapes = 12 Then

            ShapeLocationCol = ((picKnightW2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picKnightW2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -2 To 2 Step 4
                For i = -1 To 2 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckW()
                            If KingWChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedW(RowPick1, ColPick1) = True
                                ShapeLocatedB(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateWhite = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next

            For j = -1 To 1 Step 2
                For i = -2 To 2 Step 4

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + j Then
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                            ShapeLocatedW(RowPick1, ColPick1) = False
                            ShapeLocatedB(RowPick1, ColPick1) = True
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            CheckForCheckW()
                            If KingWChecked = False Then
                                picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                                picShape.Show()
                                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                                ShapeLocatedW(RowPick1, ColPick1) = True
                                ShapeLocatedB(RowPick1, ColPick1) = False
                                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                                MateWhite = False
                                Exit Sub
                            End If
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        End If
                    End If
                Next
            Next
        ElseIf Shapes = 13 Then
            Exit Sub
        ElseIf Shapes = 14 Then

            Exit Sub

        ElseIf Shapes = 15 Then

            ShapeLocationCol = ((picRockW1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picRockW1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next


        ElseIf Shapes = 16 Then
            ShapeLocationCol = ((picRockW2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picRockW2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next
        ElseIf Shapes = 17 Then
            Exit Sub
        ElseIf Shapes = 18 Then
            Exit Sub
        ElseIf Shapes = 19 Then
            Exit Sub
        ElseIf Shapes = 20 Then
            Exit Sub
        ElseIf Shapes = 21 Then
            Exit Sub
        ElseIf Shapes = 22 Then
            Exit Sub
        ElseIf Shapes = 23 Then
            Exit Sub
        ElseIf Shapes = 24 Then
            Exit Sub
        ElseIf Shapes = 25 Then
            ShapeLocationCol = ((picPawnW1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 26 Then
            ShapeLocationCol = ((picPawnW2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next
        ElseIf Shapes = 27 Then
            ShapeLocationCol = ((picPawnW3.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW3.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next
        ElseIf Shapes = 28 Then
            ShapeLocationCol = ((picPawnW4.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW4.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 29 Then
            ShapeLocationCol = ((picPawnW5.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW5.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 30 Then
            ShapeLocationCol = ((picPawnW6.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW6.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 31 Then
            ShapeLocationCol = ((picPawnW7.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW7.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 32 Then
            ShapeLocationCol = ((picPawnW8.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picPawnW8.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For i = -1 To 1 Step 2
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

        ElseIf Shapes = 33 Then
            Exit Sub
        ElseIf Shapes = 34 Then
            Exit Sub
        ElseIf Shapes = 35 Then
            Exit Sub
        ElseIf Shapes = 36 Then
            Exit Sub
        ElseIf Shapes = 37 Then
            Exit Sub
        ElseIf Shapes = 38 Then
            Exit Sub
        ElseIf Shapes = 39 Then
            Exit Sub
        ElseIf Shapes = 40 Then
            Exit Sub
        ElseIf Shapes = 41 Then
            ShapeLocationCol = ((picQueenW1.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW1.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 42 Then
            ShapeLocationCol = ((picQueenW2.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW2.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 43 Then
            ShapeLocationCol = ((picQueenW3.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW3.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 44 Then
            ShapeLocationCol = ((picQueenW4.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW4.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 45 Then
            ShapeLocationCol = ((picQueenW5.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW5.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 46 Then
            ShapeLocationCol = ((picQueenW6.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW6.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 47 Then
            ShapeLocationCol = ((picQueenW7.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW7.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        ElseIf Shapes = 48 Then

            ShapeLocationCol = ((picQueenW8.Location.X + 1.4) / 80)
            ShapeLocationRow = ((picQueenW8.Location.Y + 1.4) / 80)
            If ShapeLocationCol > 7 Then
                Exit Sub
            End If
            For j = -7 To 7
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + j Then
                        For i = ShapeLocationRow + 1 To RowPick1 - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If

                        Next
                        For i = RowPick1 + 1 To ShapeLocationRow - 1
                            If ShapeLocated(i, ShapeLocationCol) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next

            For i = -7 To 7
                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow Then
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If

                        Next
                        For j = ColPick1 + 1 To ShapeLocationCol - 1
                            If ShapeLocated(ShapeLocationRow, j) = False Then
                                Exit Sub
                            End If
                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If
                End If
            Next

            For i = -7 To 7

                If ColPick1 = ShapeLocationCol + i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow + 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o + 1

                        Next
                        o = RowPick1 + 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o + 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

                If ColPick1 = ShapeLocationCol - i Then
                    If RowPick1 = ShapeLocationRow + i Then
                        o = ShapeLocationRow - 1
                        For j = ShapeLocationCol + 1 To ColPick1 - 1
                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub

                            End If
                            o = o - 1

                        Next
                        o = RowPick1 - 1
                        For j = ColPick1 + 1 To ShapeLocationCol - 1

                            If ShapeLocated(o, j) = False Then
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                Exit Sub
                            End If
                            o = o - 1

                        Next
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                        ShapeLocatedW(RowPick1, ColPick1) = False
                        ShapeLocatedB(RowPick1, ColPick1) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                        picShape.Hide()
                        picShape.Location = New Point(757, 0)
                        CheckForCheckW()
                        If KingWChecked = False Then
                            picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                            picShape.Show()
                            ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                            ShapeLocatedW(RowPick1, ColPick1) = True
                            ShapeLocatedB(RowPick1, ColPick1) = False
                            ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                            MateWhite = False
                            Exit Sub
                        End If
                        picShape.Location = New Point(ColPick1 * 80 + 1.4, RowPick1 * 80 + 1.4)
                        picShape.Show()
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(RowPick1, ColPick1) = True
                        ShapeLocatedB(RowPick1, ColPick1) = False
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    End If

                End If

            Next


        End If


    End Sub

    Sub CheckForCheckB()

        REM *********************************************************************
        REM Variable Dictionary:
        REM Counter (Integer) = A counter(used to prevent pieces from 'jumping' over each other)
        REM KingBCol (Integer) = The coefficient of Column value of the Black King on the board.
        REM KingBRow (Integer) = The coefficient of Row value of the Black King on the board.
        REM reverseInt (Integer) = A number which represents the coefficient of either Row or Column value
        REM                        of a certain piece
        REM reverseInt2 (Integer) = A number which represents the coefficient of either Row or Column value
        REM                         of a certain piece
        REM *********************************************************************

        Dim KingBCol, KingBRow As Integer
        Dim reverseInt, reverseInt2 As Integer
        Dim Counter As Integer


        For i = 0 To 7
            For j = 0 To 7
                AttackedSquaresByWhite(i, j) = False
            Next
        Next

        KingBCol = ((picKingB.Location.X + 1.4) / 80)
        KingBRow = ((picKingB.Location.Y + 1.4) / 80)

        REM *****************************************************************
        REM 	Getting info from each of the White pieces in order to find out whether
        REM     they have checked the Black King (If statement)
        REM     + making an array which determines wheter any of the White pieces 
        REM     can be settled on a certain cell on the board 
        REM *****************************************************************

        'KingW
        ShapesXY(picKingW)
        For i = -1 To 1
            For j = -1 To 1
                If ShapeLocationCol > 7 Then
                    GoTo Proceed0
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed0
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed0
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed0
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed0
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If
                End If

Proceed0:   Next
        Next

        'QueenW
        ShapesXY(picQueenW)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopW1
        ShapesXY(picBishopW1)
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopW2
        ShapesXY(picBishopW2)
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'KnightW1
        ShapesXY(picKnightW1)


        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed1
                End If

                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed1:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed2
                End If

                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed2:   Next
        Next

        'KnightW2
        ShapesXY(picKnightW2)


        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed3
                End If

                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed3:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed4
                End If

                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed4:   Next
        Next

        'RockW1
        ShapesXY(picRockW1)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If


            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next

        'RockW2
        ShapesXY(picRockW2)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If


            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next

        'PawnW1
        ShapesXY(picPawnW1)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed5
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed5
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed5: Next


        'PawnW2
        ShapesXY(picPawnW2)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed6
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed6
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed6: Next

        'PawnW3
        ShapesXY(picPawnW3)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed7
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed7
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed7: Next

        'PawnW4
        ShapesXY(picPawnW4)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed8
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed8
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed8: Next

        'PawnW5
        ShapesXY(picPawnW5)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed9
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed9
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed9: Next

        'PawnW6
        ShapesXY(picPawnW6)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed10
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed10
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed10: Next

        'PawnW7
        ShapesXY(picPawnW7)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed11
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed11
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed11: Next

        'PawnW8
        ShapesXY(picPawnW8)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow - 1 < 0 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed12
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed12
            End If
            If ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow - 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedW(ShapeLocationRow - 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByWhite(ShapeLocationRow - 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed12: Next

        'QueenW1
        ShapesXY(picQueenW1)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW2
        ShapesXY(picQueenW2)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW3
        ShapesXY(picQueenW3)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW4
        ShapesXY(picQueenW4)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW5
        ShapesXY(picQueenW5)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW6
        ShapesXY(picQueenW6)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenW7
        ShapesXY(picQueenW7)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW8
        ShapesXY(picQueenW8)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByWhite(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByWhite(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByWhite(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedW(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByWhite(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        If AttackedSquaresByWhite(KingBRow, KingBCol) = True Then
            KingBChecked = True
        ElseIf AttackedSquaresByWhite(KingBRow, KingBCol) = False Then
            KingBChecked = False
        End If


    End Sub

    Sub CheckForCheckW()

        REM *********************************************************************
        REM Variable Dictionary:
        REM Counter (Integer) = A counter(used to prevent pieces from 'jumping' over each other)
        REM KingWCol (Integer) = The coefficient of Column value of the White King on the board.
        REM KingWRow (Integer) = The coefficient of Row value of the White King on the board.
        REM reverseInt (Integer) = A number which represents the coefficient of either Row or Column value
        REM                        of a certain piece
        REM reverseInt2 (Integer) = A number which represents the coefficient of either Row or Column value
        REM                         of a certain piece
        REM *********************************************************************

        Dim KingWCol, KingWRow As Integer
        Dim reverseInt, reverseInt2 As Integer
        Dim Counter As Integer


        For i = 0 To 7
            For j = 0 To 7
                AttackedSquaresByBlack(i, j) = False
            Next
        Next

        KingWCol = ((picKingW.Location.X + 1.4) / 80)
        KingWRow = ((picKingW.Location.Y + 1.4) / 80)

        REM *****************************************************************
        REM 	Getting info from each of the Black pieces in order to find out whether
        REM     they have checked the White King (If statement)
        REM     + making an array which determines wheter any of the Black pieces 
        REM     can be settled on a certain cell on the board 
        REM *****************************************************************


        'KingB
        ShapesXY(picKingB)
        For i = -1 To 1
            For j = -1 To 1

                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed0
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed0
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed0
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed0
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If
                End If

Proceed0:   Next
        Next

        'QueenB
        ShapesXY(picQueenB)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopB1
        ShapesXY(picBishopB1)
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopB2
        ShapesXY(picBishopB2)
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'KnightB1
        ShapesXY(picKnightB1)


        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed1:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed2:   Next
        Next

        'KnightB2
        ShapesXY(picKnightB2)


        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed3:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then

                    AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then

                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    End If

                End If
Proceed4:   Next
        Next

        'RockB1
        ShapesXY(picRockB1)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next

        'RockB2
        ShapesXY(picRockB2)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next

        'PawnB1
        ShapesXY(picPawnB1)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed5
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed5
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed5: Next


        'PawnB2
        ShapesXY(picPawnB2)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed6
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed6
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed6: Next

        'PawnB3
        ShapesXY(picPawnB3)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed7
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed7
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed7: Next

        'PawnB4
        ShapesXY(picPawnB4)
        For i = -1 To 1 Step 2

            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed8
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed8
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed8: Next

        'PawnB5
        ShapesXY(picPawnB5)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed9
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed9
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed9: Next

        'PawnB6
        ShapesXY(picPawnB6)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed10
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed10
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed10: Next

        'PawnB7
        ShapesXY(picPawnB7)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed11
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed11
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed11: Next

        'PawnB8
        ShapesXY(picPawnB8)
        For i = -1 To 1 Step 2
            If ShapeLocationCol > 7 Then
                Exit For
            End If
            If ShapeLocationRow + 1 > 7 Then
                Exit For
            End If
            If ShapeLocationCol + i > 7 Then
                GoTo Proceed12
            End If
            If ShapeLocationCol + i < 0 Then
                GoTo Proceed12
            End If
            If ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
            ElseIf ShapeLocated(ShapeLocationRow + 1, ShapeLocationCol + i) = False Then
                If ShapeLocatedB(ShapeLocationRow + 1, ShapeLocationCol + i) = True Then
                    AttackedSquaresByBlack(ShapeLocationRow + 1, ShapeLocationCol + i) = True
                End If
            End If

Proceed12: Next

        'QueenB1
        ShapesXY(picQueenB1)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB2
        ShapesXY(picQueenB2)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenB3
        ShapesXY(picQueenB3)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB4
        ShapesXY(picQueenB4)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB5
        ShapesXY(picQueenB5)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB6
        ShapesXY(picQueenB6)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB7
        ShapesXY(picQueenB7)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB8
        ShapesXY(picQueenB8)



        reverseInt = ShapeLocationRow + 1
        Counter = 0

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next

        Counter = 0

        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt + 1
        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If

        Next
        Counter = 0

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True Then
                        AttackedSquaresByBlack(ShapeLocationRow + j, reverseInt) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True Then
                        AttackedSquaresByBlack(reverseInt, ShapeLocationCol + j) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If

            End If
            reverseInt = reverseInt - 1

        Next
        Counter = 0

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                If Counter = 1 Then
                    Exit For
                End If
                AttackedSquaresByBlack(reverseInt, reverseInt2) = True
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Counter = Counter + 1
                If Counter = 1 Then
                    If ShapeLocatedB(reverseInt, reverseInt2) = True Then
                        AttackedSquaresByBlack(reverseInt, reverseInt2) = True
                    End If
                ElseIf Counter = 2 Then
                    Exit For

                End If
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next



        If AttackedSquaresByBlack(KingWRow, KingWCol) = True Then
            KingWChecked = True
        ElseIf AttackedSquaresByBlack(KingWRow, KingWCol) = False Then
            KingWChecked = False
        End If


    End Sub

    Sub UnselectAllShapes()

        REM *****************************************************************
        REM 	Unselect all of the pieces
        REM *****************************************************************

        picKingB.BorderStyle = BorderStyle.None
        picKingW.BorderStyle = BorderStyle.None
        picQueenB.BorderStyle = BorderStyle.None
        picQueenW.BorderStyle = BorderStyle.None
        picBishopB1.BorderStyle = BorderStyle.None
        picBishopB2.BorderStyle = BorderStyle.None
        picBishopW1.BorderStyle = BorderStyle.None
        picBishopW2.BorderStyle = BorderStyle.None
        picKnightB1.BorderStyle = BorderStyle.None
        picKnightB2.BorderStyle = BorderStyle.None
        picKnightW1.BorderStyle = BorderStyle.None
        picKnightW2.BorderStyle = BorderStyle.None
        picRockB1.BorderStyle = BorderStyle.None
        picRockB2.BorderStyle = BorderStyle.None
        picRockW1.BorderStyle = BorderStyle.None
        picRockW2.BorderStyle = BorderStyle.None
        picPawnB1.BorderStyle = BorderStyle.None
        picPawnB2.BorderStyle = BorderStyle.None
        picPawnB3.BorderStyle = BorderStyle.None
        picPawnB4.BorderStyle = BorderStyle.None
        picPawnB5.BorderStyle = BorderStyle.None
        picPawnB6.BorderStyle = BorderStyle.None
        picPawnB7.BorderStyle = BorderStyle.None
        picPawnB8.BorderStyle = BorderStyle.None
        picPawnW1.BorderStyle = BorderStyle.None
        picPawnW2.BorderStyle = BorderStyle.None
        picPawnW3.BorderStyle = BorderStyle.None
        picPawnW4.BorderStyle = BorderStyle.None
        picPawnW5.BorderStyle = BorderStyle.None
        picPawnW6.BorderStyle = BorderStyle.None
        picPawnW7.BorderStyle = BorderStyle.None
        picPawnW8.BorderStyle = BorderStyle.None
        picQueenB1.BorderStyle = BorderStyle.None
        picQueenB2.BorderStyle = BorderStyle.None
        picQueenB3.BorderStyle = BorderStyle.None
        picQueenB4.BorderStyle = BorderStyle.None
        picQueenB5.BorderStyle = BorderStyle.None
        picQueenB6.BorderStyle = BorderStyle.None
        picQueenB7.BorderStyle = BorderStyle.None
        picQueenB8.BorderStyle = BorderStyle.None
        picQueenW1.BorderStyle = BorderStyle.None
        picQueenW2.BorderStyle = BorderStyle.None
        picQueenW3.BorderStyle = BorderStyle.None
        picQueenW4.BorderStyle = BorderStyle.None
        picQueenW5.BorderStyle = BorderStyle.None
        picQueenW6.BorderStyle = BorderStyle.None
        picQueenW7.BorderStyle = BorderStyle.None
        picQueenW8.BorderStyle = BorderStyle.None
    End Sub

    Sub ShapesXY(ByRef theShape As PictureBox)

        ShapeLocationCol = ((theShape.Location.X + 1.4) / 80)
        ShapeLocationRow = ((theShape.Location.Y + 1.4) / 80)

    End Sub

    Sub SelectedShape(ByRef theShape As PictureBox)

        REM *****************************************************************
        REM 	Unselect all of the pieces except for the one passed to this method
        REM *****************************************************************

        picKingB.BorderStyle = BorderStyle.None
        picKingW.BorderStyle = BorderStyle.None
        picQueenB.BorderStyle = BorderStyle.None
        picQueenW.BorderStyle = BorderStyle.None
        picBishopB1.BorderStyle = BorderStyle.None
        picBishopB2.BorderStyle = BorderStyle.None
        picBishopW1.BorderStyle = BorderStyle.None
        picBishopW2.BorderStyle = BorderStyle.None
        picKnightB1.BorderStyle = BorderStyle.None
        picKnightB2.BorderStyle = BorderStyle.None
        picKnightW1.BorderStyle = BorderStyle.None
        picKnightW2.BorderStyle = BorderStyle.None
        picRockB1.BorderStyle = BorderStyle.None
        picRockB2.BorderStyle = BorderStyle.None
        picRockW1.BorderStyle = BorderStyle.None
        picRockW2.BorderStyle = BorderStyle.None
        picPawnB1.BorderStyle = BorderStyle.None
        picPawnB2.BorderStyle = BorderStyle.None
        picPawnB3.BorderStyle = BorderStyle.None
        picPawnB4.BorderStyle = BorderStyle.None
        picPawnB5.BorderStyle = BorderStyle.None
        picPawnB6.BorderStyle = BorderStyle.None
        picPawnB7.BorderStyle = BorderStyle.None
        picPawnB8.BorderStyle = BorderStyle.None
        picPawnW1.BorderStyle = BorderStyle.None
        picPawnW2.BorderStyle = BorderStyle.None
        picPawnW3.BorderStyle = BorderStyle.None
        picPawnW4.BorderStyle = BorderStyle.None
        picPawnW5.BorderStyle = BorderStyle.None
        picPawnW6.BorderStyle = BorderStyle.None
        picPawnW7.BorderStyle = BorderStyle.None
        picPawnW8.BorderStyle = BorderStyle.None
        picQueenB1.BorderStyle = BorderStyle.None
        picQueenB2.BorderStyle = BorderStyle.None
        picQueenB3.BorderStyle = BorderStyle.None
        picQueenB4.BorderStyle = BorderStyle.None
        picQueenB5.BorderStyle = BorderStyle.None
        picQueenB6.BorderStyle = BorderStyle.None
        picQueenB7.BorderStyle = BorderStyle.None
        picQueenB8.BorderStyle = BorderStyle.None
        picQueenW1.BorderStyle = BorderStyle.None
        picQueenW2.BorderStyle = BorderStyle.None
        picQueenW3.BorderStyle = BorderStyle.None
        picQueenW4.BorderStyle = BorderStyle.None
        picQueenW5.BorderStyle = BorderStyle.None
        picQueenW6.BorderStyle = BorderStyle.None
        picQueenW7.BorderStyle = BorderStyle.None
        picQueenW8.BorderStyle = BorderStyle.None
        theShape.BorderStyle = BorderStyle.Fixed3D


    End Sub

    Sub MovementB()

        REM *********************************************************************
        REM Variable Dictionary:
        REM reverseInt (integer) = A number which represents the coefficient of either Row or Column 
        REM                        value of a certain piece
        REM reverseInt2 (integer) = A number which represents the coefficient of either Row or Column 
        REM                         value of a certain piece (another one)
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Dim reverseInt, reverseInt2 As Integer


        For i = 0 To 7
            For j = 0 To 7
                BlacksMovement(i, j) = False
            Next
        Next

        REM *****************************************************************
        REM     Making an array which determines wheter any of the Black pieces 
        REM     can be settled on a certain cell of the board without putting
        REM     their king at check
        REM *****************************************************************

        'QueenB
        ShapeLocationCol = (picQueenB.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False



                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopB1
        ShapeLocationCol = (picBishopB1.Location.X + 1.4) / 80
        ShapeLocationRow = (picBishopB1.Location.Y + 1.4) / 80
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopB2
        ShapeLocationCol = (picBishopB2.Location.X + 1.4) / 80
        ShapeLocationRow = (picBishopB2.Location.Y + 1.4) / 80
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'KnightB1
        ShapeLocationCol = (picKnightB1.Location.X + 1.4) / 80
        ShapeLocationRow = (picKnightB1.Location.Y + 1.4) / 80

        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed1
                End If
Proceed1:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed2
                End If
Proceed2:   Next
        Next

        'KnightB2
        ShapeLocationCol = (picKnightB2.Location.X + 1.4) / 80
        ShapeLocationRow = (picKnightB2.Location.Y + 1.4) / 80

        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed3
                End If
Proceed3:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed4
                End If
Proceed4:   Next
        Next

        'RockB1
        ShapeLocationCol = (picRockB1.Location.X + 1.4) / 80
        ShapeLocationRow = (picRockB1.Location.Y + 1.4) / 80

        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        'RockB2
        ShapeLocationCol = (picRockB2.Location.X + 1.4) / 80
        ShapeLocationRow = (picRockB2.Location.Y + 1.4) / 80

        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        'PawnB1
        ShapeLocationCol = (picPawnB1.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB1.Location.Y + 1.4) / 80
        If PawnsFirstMove(0) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(0) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnB2
        ShapeLocationCol = (picPawnB2.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB2.Location.Y + 1.4) / 80
        If PawnsFirstMove(1) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(1) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnB3
        ShapeLocationCol = (picPawnB3.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB3.Location.Y + 1.4) / 80
        If PawnsFirstMove(2) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(2) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnB4
        ShapeLocationCol = (picPawnB4.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB4.Location.Y + 1.4) / 80
        If PawnsFirstMove(3) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(3) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If

        'PawnB5
        ShapeLocationCol = (picPawnB5.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB5.Location.Y + 1.4) / 80
        If PawnsFirstMove(4) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(4) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnB6
        ShapeLocationCol = (picPawnB6.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB6.Location.Y + 1.4) / 80
        If PawnsFirstMove(5) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(5) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnB7
        ShapeLocationCol = (picPawnB7.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB7.Location.Y + 1.4) / 80
        If PawnsFirstMove(6) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(6) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnB8
        ShapeLocationCol = (picPawnB8.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnB8.Location.Y + 1.4) / 80
        If PawnsFirstMove(7) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(7) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow + i > 7 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckB()
                    If KingBChecked = False Then
                        ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        BlacksMovement(ShapeLocationRow + i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'QueenB1
        ShapeLocationCol = (picQueenB1.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB1.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB2
        ShapeLocationCol = (picQueenB2.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB2.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB3
        ShapeLocationCol = (picQueenB3.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB3.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenB4
        ShapeLocationCol = (picQueenB4.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB4.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenB5
        ShapeLocationCol = (picQueenB5.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB5.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenB6
        ShapeLocationCol = (picQueenB6.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB6.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB7
        ShapeLocationCol = (picQueenB7.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB7.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenB8
        ShapeLocationCol = (picQueenB8.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenB8.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedB(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckB()
                If KingBChecked = False Then
                    ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedB(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    BlacksMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedB(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedB(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


    End Sub

    Sub MovementW()

        REM *********************************************************************
        REM Variable Dictionary:
        REM reverseInt (integer) = A number which represents the coefficient of either Row or Column 
        REM                        value of a certain piece
        REM reverseInt2 (integer) = A number which represents the coefficient of either Row or Column 
        REM                         value of a certain piece (another one)
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Dim reverseInt, reverseInt2 As Integer


        For i = 0 To 7
            For j = 0 To 7
                WhitesMovement(i, j) = False
            Next
        Next

        REM *****************************************************************
        REM     Making an array which determines wheter any of the White pieces 
        REM     can be settled on a certain cell of the board without putting
        REM     their king in check
        REM *****************************************************************

        'QueenW
        ShapeLocationCol = (picQueenW.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'BishopW1
        ShapeLocationCol = (picBishopW1.Location.X + 1.4) / 80
        ShapeLocationRow = (picBishopW1.Location.Y + 1.4) / 80
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next
        'BishopW2
        ShapeLocationCol = (picBishopW2.Location.X + 1.4) / 80
        ShapeLocationRow = (picBishopW2.Location.Y + 1.4) / 80
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next
        'KnightW1
        ShapeLocationCol = (picKnightW1.Location.X + 1.4) / 80
        ShapeLocationRow = (picKnightW1.Location.Y + 1.4) / 80

        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed1
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed1
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed1
                End If
Proceed1:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed2
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed2
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed2
                End If
Proceed2:   Next
        Next

        'KnightW2
        ShapeLocationCol = (picKnightW2.Location.X + 1.4) / 80
        ShapeLocationRow = (picKnightW2.Location.Y + 1.4) / 80

        For j = -2 To 2 Step 4
            For i = -1 To 2 Step 2
                If ShapeLocationCol > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed3
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed3
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed3
                End If
Proceed3:   Next
        Next




        For j = -1 To 1 Step 2
            For i = -2 To 2 Step 4
                If ShapeLocationCol > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationRow + j < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i > 7 Then
                    GoTo Proceed4
                End If
                If ShapeLocationCol + i < 0 Then
                    GoTo Proceed4
                End If
                If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + i) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + i) = False Then
                    GoTo Proceed4
                End If
Proceed4:   Next
        Next

        'RockW1
        ShapeLocationCol = (picRockW1.Location.X + 1.4) / 80
        ShapeLocationRow = (picRockW1.Location.Y + 1.4) / 80

        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        'RockW2
        ShapeLocationCol = (picRockW2.Location.X + 1.4) / 80
        ShapeLocationRow = (picRockW2.Location.Y + 1.4) / 80

        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        'PawnW1
        ShapeLocationCol = (picPawnW1.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW1.Location.Y + 1.4) / 80
        If PawnsFirstMove(8) = True Then


            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(8) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnW2
        ShapeLocationCol = (picPawnW2.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW2.Location.Y + 1.4) / 80
        If PawnsFirstMove(9) = True Then

            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(9) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnW3
        ShapeLocationCol = (picPawnW3.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW3.Location.Y + 1.4) / 80
        If PawnsFirstMove(10) = True Then

            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(10) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnW4
        ShapeLocationCol = (picPawnW4.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW4.Location.Y + 1.4) / 80
        If PawnsFirstMove(11) = True Then
            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(11) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If

        'PawnW5
        ShapeLocationCol = (picPawnW5.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW5.Location.Y + 1.4) / 80
        If PawnsFirstMove(12) = True Then

            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(12) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If


        'PawnW6
        ShapeLocationCol = (picPawnW6.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW6.Location.Y + 1.4) / 80
        If PawnsFirstMove(13) = True Then

            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(13) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnW7
        ShapeLocationCol = (picPawnW7.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW7.Location.Y + 1.4) / 80
        If PawnsFirstMove(14) = True Then
            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(14) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If
        'PawnW8
        ShapeLocationCol = (picPawnW8.Location.X + 1.4) / 80
        ShapeLocationRow = (picPawnW8.Location.Y + 1.4) / 80
        If PawnsFirstMove(15) = True Then
            For i = 1 To 2
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        ElseIf PawnsFirstMove(15) = False Then
            For i = 1 To 1
                If ShapeLocationCol > 7 Then
                    Exit For
                End If
                If ShapeLocationRow - i < 0 Then
                    Exit For
                End If

                If ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                    CheckForCheckW()
                    If KingWChecked = False Then
                        ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                        ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                        ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                        WhitesMovement(ShapeLocationRow - i, ShapeLocationCol) = True

                    End If
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                ElseIf ShapeLocated(ShapeLocationRow - i, ShapeLocationCol) = False Then
                    Exit For
                End If
            Next
        End If

        'QueenW1
        ShapeLocationCol = (picQueenW1.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW1.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenW2
        ShapeLocationCol = (picQueenW2.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW2.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next


        'QueenW3
        ShapeLocationCol = (picQueenW3.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW3.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW4
        ShapeLocationCol = (picQueenW4.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW4.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next




        'QueenW5
        ShapeLocationCol = (picQueenW5.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW5.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next




        'QueenW6
        ShapeLocationCol = (picQueenW6.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW6.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next

        'QueenW7
        ShapeLocationCol = (picQueenW7.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW7.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next



        'QueenW8
        ShapeLocationCol = (picQueenW8.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueenW8.Location.Y + 1.4) / 80


        reverseInt = ShapeLocationRow + 1

        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationRow + i > 7 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1

        Next

        reverseInt = ShapeLocationRow - 1

        For i = 0 To ShapeLocationRow - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(reverseInt, ShapeLocationCol) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol) = False
                ShapeLocated(reverseInt, ShapeLocationCol) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(reverseInt, ShapeLocationCol) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol) = True
                ShapeLocated(reverseInt, ShapeLocationCol) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        reverseInt = ShapeLocationCol + 1
        For i = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + i > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt + 1
        Next

        reverseInt = ShapeLocationCol - 1

        For i = 0 To ShapeLocationCol - 1
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow, reverseInt) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next


        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If

            If ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, ShapeLocationCol + j) = False Then
                Exit For
            End If

        Next

        reverseInt = ShapeLocationCol - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow + j > 7 Then
                Exit For
            End If
            If ShapeLocated(ShapeLocationRow + j, reverseInt) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow + j, reverseInt) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(ShapeLocationRow + j, reverseInt) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow + j, reverseInt) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(ShapeLocationRow + j, reverseInt) = False Then
                Exit For

            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1

        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol + j > 7 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, ShapeLocationCol + j) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(reverseInt, ShapeLocationCol + j) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, ShapeLocationCol + j) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(reverseInt, ShapeLocationCol + j) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, ShapeLocationCol + j) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1

        Next

        reverseInt = ShapeLocationRow - 1
        reverseInt2 = ShapeLocationCol - 1
        For j = 1 To 7
            If ShapeLocationCol > 7 Then
                Exit For
            End If

            If ShapeLocationCol - j < 0 Then
                Exit For
            End If
            If ShapeLocationRow - j < 0 Then
                Exit For
            End If
            If ShapeLocated(reverseInt, reverseInt2) = True Then
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = True
                ShapeLocatedW(reverseInt, reverseInt2) = False
                ShapeLocated(reverseInt, reverseInt2) = False
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = True
                CheckForCheckW()
                If KingWChecked = False Then
                    ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                    ShapeLocatedW(reverseInt, reverseInt2) = True
                    ShapeLocated(reverseInt, reverseInt2) = True
                    ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
                    WhitesMovement(reverseInt, reverseInt2) = True

                End If
                ShapeLocatedW(ShapeLocationRow, ShapeLocationCol) = False
                ShapeLocatedW(reverseInt, reverseInt2) = True
                ShapeLocated(reverseInt, reverseInt2) = True
                ShapeLocated(ShapeLocationRow, ShapeLocationCol) = False
            ElseIf ShapeLocated(reverseInt, reverseInt2) = False Then
                Exit For
            End If
            reverseInt = reverseInt - 1
            reverseInt2 = reverseInt2 - 1

        Next
    End Sub

    Sub WhiteShapesLocation()

        REM *********************************************************************
        REM Variable Dictionary:
        REM Num (Integer) = A number which deterimnes whether or not a White piece is located
        REM                 on a certain position of the "ShapeLocatedW" array ( 1 = the cell is taken by
        REM                 one of the White pieces, 0 = the cell is free)
        REM *********************************************************************

        Dim Num As Integer = 0


        REM *****************************************************************
        REM     Making an array which determines the position of all White pieces on the board
        REM *****************************************************************


        For i = 0 To 7
            For j = 0 To 7
                Num = 0

                If Int(picKingW.Location.X / 80) = j Then
                    If Int(picKingW.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picQueenW.Location.X / 80) = j Then
                    If Int(picQueenW.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picBishopW1.Location.X / 80) = j Then
                    If Int(picBishopW1.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopW2.Location.X / 80) = j Then
                    If Int(picBishopW2.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picKnightW1.Location.X / 80) = j Then
                    If Int(picKnightW1.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightW2.Location.X / 80) = j Then
                    If Int(picKnightW2.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picRockW1.Location.X / 80) = j Then
                    If Int(picRockW1.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockW2.Location.X / 80) = j Then
                    If Int(picRockW2.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picPawnW1.Location.X / 80) = j Then
                    If Int(picPawnW1.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW2.Location.X / 80) = j Then
                    If Int(picPawnW2.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW3.Location.X / 80) = j Then
                    If Int(picPawnW3.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW4.Location.X / 80) = j Then
                    If Int(picPawnW4.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW5.Location.X / 80) = j Then
                    If Int(picPawnW5.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW6.Location.X / 80) = j Then
                    If Int(picPawnW6.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW7.Location.X / 80) = j Then
                    If Int(picPawnW7.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW8.Location.X / 80) = j Then
                    If Int(picPawnW8.Location.Y / 80) = i Then
                        ShapeLocatedW(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW1.Location.X / 80) = j Then
                    If Int(picQueenW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW2.Location.X / 80) = j Then
                    If Int(picQueenW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW3.Location.X / 80) = j Then
                    If Int(picQueenW3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW4.Location.X / 80) = j Then
                    If Int(picQueenW4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW5.Location.X / 80) = j Then
                    If Int(picQueenW5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW6.Location.X / 80) = j Then
                    If Int(picQueenW6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW7.Location.X / 80) = j Then
                    If Int(picQueenW7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW8.Location.X / 80) = j Then
                    If Int(picQueenW8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Num = 0 Then
                    ShapeLocatedW(i, j) = True
                End If
Proceed:    Next j

        Next

    End Sub

    Sub BlackShapesLocation()

        REM *********************************************************************
        REM Variable Dictionary:
        REM Num (Integer) = Number which deterimnes whether or not a Black piece is located
        REM                 on a certain position of the "ShapeLocatedB" array ( 1 = cell is taken by
        REM                 one of the Black pieces, 0 = the cell is free)
        REM *********************************************************************

        Dim Num As Integer = 0

        REM *****************************************************************
        REM     Making an array which determines the position of all Black pieces on the board
        REM *****************************************************************

        For i = 0 To 7
            For j = 0 To 7
                Num = 0
                If Int(picKingB.Location.X / 80) = j Then
                    If Int(picKingB.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picQueenB.Location.X / 80) = j Then
                    If Int(picQueenB.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picBishopB1.Location.X / 80) = j Then
                    If Int(picBishopB1.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopB2.Location.X / 80) = j Then
                    If Int(picBishopB2.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picKnightB1.Location.X / 80) = j Then
                    If Int(picKnightB1.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightB2.Location.X / 80) = j Then
                    If Int(picKnightB2.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picRockB1.Location.X / 80) = j Then
                    If Int(picRockB1.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockB2.Location.X / 80) = j Then
                    If Int(picRockB2.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If

                If Int(picPawnB1.Location.X / 80) = j Then
                    If Int(picPawnB1.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB2.Location.X / 80) = j Then
                    If Int(picPawnB2.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB3.Location.X / 80) = j Then
                    If Int(picPawnB3.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB4.Location.X / 80) = j Then
                    If Int(picPawnB4.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB5.Location.X / 80) = j Then
                    If Int(picPawnB5.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB6.Location.X / 80) = j Then
                    If Int(picPawnB6.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB7.Location.X / 80) = j Then
                    If Int(picPawnB7.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB8.Location.X / 80) = j Then
                    If Int(picPawnB8.Location.Y / 80) = i Then
                        ShapeLocatedB(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB1.Location.X / 80) = j Then
                    If Int(picQueenB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB2.Location.X / 80) = j Then
                    If Int(picQueenB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB3.Location.X / 80) = j Then
                    If Int(picQueenB3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB4.Location.X / 80) = j Then
                    If Int(picQueenB4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB5.Location.X / 80) = j Then
                    If Int(picQueenB5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB6.Location.X / 80) = j Then
                    If Int(picQueenB6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB7.Location.X / 80) = j Then
                    If Int(picQueenB7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB8.Location.X / 80) = j Then
                    If Int(picQueenB8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Num = 0 Then
                    ShapeLocatedB(i, j) = True
                End If
Proceed:    Next j

        Next
    End Sub

    Sub OriginalShapesPos(ByRef theShape As PictureBox)

        OriginalPosX = theShape.Location.X
        OriginalPosY = theShape.Location.Y
        OriginalR = theShape.BackColor.R
        OriginalB = theShape.BackColor.B
        OriginalG = theShape.BackColor.G

    End Sub

    Sub ShapesLocation()

        REM *********************************************************************
        REM Variable Dictionary:
        REM Num (Integer) = Number which deterimnes whether or not any piece (white or black) is located
        REM                 on a certain position of the "ShapeLocated" array ( 1 = cell is taken by
        REM                 one of the pieces, 0 = the cell is free)
        REM *********************************************************************

        Dim Num As Integer = 0

        REM *****************************************************************
        REM     Making an array which determines the position of all pieces on the board (ShapeLocated)
        REM *****************************************************************

        For i = 0 To 7
            For j = 0 To 7
                Num = 0
                If Int(picKingB.Location.X / 80) = j Then
                    If Int(picKingB.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKingW.Location.X / 80) = j Then
                    If Int(picKingW.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB.Location.X / 80) = j Then
                    If Int(picQueenB.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW.Location.X / 80) = j Then
                    If Int(picQueenW.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopB1.Location.X / 80) = j Then
                    If Int(picBishopB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopB2.Location.X / 80) = j Then
                    If Int(picBishopB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopW1.Location.X / 80) = j Then
                    If Int(picBishopW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picBishopW2.Location.X / 80) = j Then
                    If Int(picBishopW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightB1.Location.X / 80) = j Then
                    If Int(picKnightB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightB2.Location.X / 80) = j Then
                    If Int(picKnightB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightW1.Location.X / 80) = j Then
                    If Int(picKnightW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picKnightW2.Location.X / 80) = j Then
                    If Int(picKnightW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockB1.Location.X / 80) = j Then
                    If Int(picRockB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockB2.Location.X / 80) = j Then
                    If Int(picRockB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockW1.Location.X / 80) = j Then
                    If Int(picRockW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picRockW2.Location.X / 80) = j Then
                    If Int(picRockW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB1.Location.X / 80) = j Then
                    If Int(picPawnB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB2.Location.X / 80) = j Then
                    If Int(picPawnB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB3.Location.X / 80) = j Then
                    If Int(picPawnB3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB4.Location.X / 80) = j Then
                    If Int(picPawnB4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB5.Location.X / 80) = j Then
                    If Int(picPawnB5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB6.Location.X / 80) = j Then
                    If Int(picPawnB6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB7.Location.X / 80) = j Then
                    If Int(picPawnB7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnB8.Location.X / 80) = j Then
                    If Int(picPawnB8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW1.Location.X / 80) = j Then
                    If Int(picPawnW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW2.Location.X / 80) = j Then
                    If Int(picPawnW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW3.Location.X / 80) = j Then
                    If Int(picPawnW3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW4.Location.X / 80) = j Then
                    If Int(picPawnW4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW5.Location.X / 80) = j Then
                    If Int(picPawnW5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW6.Location.X / 80) = j Then
                    If Int(picPawnW6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW7.Location.X / 80) = j Then
                    If Int(picPawnW7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picPawnW8.Location.X / 80) = j Then
                    If Int(picPawnW8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB1.Location.X / 80) = j Then
                    If Int(picQueenB1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB2.Location.X / 80) = j Then
                    If Int(picQueenB2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB3.Location.X / 80) = j Then
                    If Int(picQueenB3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB4.Location.X / 80) = j Then
                    If Int(picQueenB4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB5.Location.X / 80) = j Then
                    If Int(picQueenB5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB6.Location.X / 80) = j Then
                    If Int(picQueenB6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB7.Location.X / 80) = j Then
                    If Int(picQueenB7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenB8.Location.X / 80) = j Then
                    If Int(picQueenB8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW1.Location.X / 80) = j Then
                    If Int(picQueenW1.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW2.Location.X / 80) = j Then
                    If Int(picQueenW2.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW3.Location.X / 80) = j Then
                    If Int(picQueenW3.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW4.Location.X / 80) = j Then
                    If Int(picQueenW4.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW5.Location.X / 80) = j Then
                    If Int(picQueenW5.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW6.Location.X / 80) = j Then
                    If Int(picQueenW6.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW7.Location.X / 80) = j Then
                    If Int(picQueenW7.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Int(picQueenW8.Location.X / 80) = j Then
                    If Int(picQueenW8.Location.Y / 80) = i Then
                        ShapeLocated(i, j) = False
                        GoTo Proceed
                        Num = 1
                    End If
                End If
                If Num = 0 Then
                    ShapeLocated(i, j) = True
                End If
Proceed:    Next j

        Next

    End Sub

    Sub WhiteTakenShape(ByRef picShape As PictureBox)

        REM *********************************************************************
        REM Variable Dictionary:
        REM ColPick1 (Integer) = The coefficient of Column value of a certain piece on the board
        REM LocShapeX (Integer) = The X-value on the Form of a piece that is being considered
        REM LocShapeY (Integer) = The Y-value on the Form of a piece that is being considered
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM RowPick1 (Integer) = The coefficient of Row value of a certain piece on the board
        REM ShapeB (Integer) = The B-value (from RGB) of the considered piece's backcolor
        REM ShapeG (Integer) = The G-value (from RGB) of the considered piece's backcolor
        REM ShapeR (Integer) = The R-value (from RGB) of the considered piece's backcolor
        REM *********************************************************************

        Dim o As Integer
        Dim ColPick1, RowPick1 As Integer
        Dim ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY As Integer

        ColPick1 = (picShape.Location.X + 1.4) / 80
        RowPick1 = (picShape.Location.Y + 1.4) / 80
        Taken = False

        REM *****************************************************************
        REM     Prohibiting Black pieces from capturing any of the White pieces while it is
        REM     not their turn (If statement)
        REM *****************************************************************

        If Turn = False Then
            Exit Sub
        End If

        ShapeR = picShape.BackColor.R
        ShapeG = picShape.BackColor.G
        ShapeB = picShape.BackColor.B
        LocShapeX = picShape.Location.X
        LocShapeY = picShape.Location.Y

        REM *****************************************************************
        REM     The Process of capturing a White piece by a certain Black piece
        REM *****************************************************************

        If number = 1 Then
            If Shapes = 1 Then
                ShapesXY(picKingB)
                OriginalShapesPos(picKingB)
                For i = -1 To 1
                    For j = -1 To 1
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKingB.Hide()
                                picKingB.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKingB.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKingB.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKingB.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKingB.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken = True
                                Turn = False
                                ShapesLocation()
                                picKingB.BorderStyle = BorderStyle.None
                                picKingB.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                KingBMovesCount = KingBMovesCount + 1
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 2 Then
                dgvChess.ClearSelection()
                number = 0

                Exit Sub
            ElseIf Shapes = 3 Then

                ShapesXY(picQueenB)
                OriginalShapesPos(picQueenB)
                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenB.Hide()
                            picQueenB.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenB.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenB.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            picQueenB.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenB.Hide()
                            picQueenB.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenB.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenB.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            picQueenB.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenB.Hide()
                            picQueenB.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenB.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenB.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            picQueenB.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenB.Hide()
                            picQueenB.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenB.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenB.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            picQueenB.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next




            ElseIf Shapes = 4 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 5 Then

                ShapesXY(picBishopB1)
                OriginalShapesPos(picBishopB1)

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopB1.Hide()
                            picBishopB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopB1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB1.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picBishopB1.BorderStyle = BorderStyle.None
                            picBishopB1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopB1.Hide()
                            picBishopB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopB1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB1.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picBishopB1.BorderStyle = BorderStyle.None
                            picBishopB1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next


            ElseIf Shapes = 6 Then
                ShapesXY(picBishopB2)
                OriginalShapesPos(picBishopB2)

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopB2.Hide()
                            picBishopB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopB2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB2.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picBishopB2.BorderStyle = BorderStyle.None
                            picBishopB2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopB2.Hide()
                            picBishopB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopB2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB2.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picBishopB2.BorderStyle = BorderStyle.None
                            picBishopB2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next


            ElseIf Shapes = 7 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 8 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 9 Then

                ShapesXY(picKnightB1)
                OriginalShapesPos(picKnightB1)
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightB1.Hide()
                                picKnightB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightB1.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB1.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightB1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken = True
                                Turn = False
                                ShapesLocation()
                                picKnightB1.BorderStyle = BorderStyle.None
                                picKnightB1.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightB1.Hide()
                                picKnightB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightB1.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB1.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightB1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken = True
                                Turn = False
                                ShapesLocation()
                                picKnightB1.BorderStyle = BorderStyle.None
                                picKnightB1.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 10 Then

                ShapesXY(picKnightB2)
                OriginalShapesPos(picKnightB2)
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightB2.Hide()
                                picKnightB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightB2.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB2.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightB2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken = True
                                Turn = False
                                ShapesLocation()
                                picKnightB2.BorderStyle = BorderStyle.None
                                picKnightB2.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightB2.Hide()
                                picKnightB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightB2.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB2.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightB2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken = True
                                Turn = False
                                ShapesLocation()
                                picKnightB2.BorderStyle = BorderStyle.None
                                picKnightB2.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next
            ElseIf Shapes = 11 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 12 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 13 Then
                ShapesXY(picRockB1)
                OriginalShapesPos(picRockB1)
                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockB1.Hide()
                            picRockB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockB1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB1.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picRockB1.BorderStyle = BorderStyle.None
                            picRockB1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB1MovesCount = RockB1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockB1.Hide()
                            picRockB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockB1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB1.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picRockB1.BorderStyle = BorderStyle.None
                            picRockB1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB1MovesCount = RockB1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next


            ElseIf Shapes = 14 Then
                ShapesXY(picRockB2)
                OriginalShapesPos(picRockB2)

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockB2.Hide()
                            picRockB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockB2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB2.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picRockB2.BorderStyle = BorderStyle.None
                            picRockB2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB2MovesCount = RockB2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockB2.Hide()
                            picRockB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockB2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB2.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picRockB2.BorderStyle = BorderStyle.None
                            picRockB2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB2MovesCount = RockB2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 15 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 16 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 17 Then
                ShapesXY(picPawnB1)
                OriginalShapesPos(picPawnB1)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB1.Hide()
                            picPawnB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB1.BorderStyle = BorderStyle.None
                            picPawnB1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB1.Location = New Point(757, 0)
                                picPawnB1.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 1
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 1
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 1
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 1
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 1
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 1
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 1
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 1
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(0) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 18 Then
                ShapesXY(picPawnB2)
                OriginalShapesPos(picPawnB2)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB2.Hide()
                            picPawnB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB2.BorderStyle = BorderStyle.None
                            picPawnB2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB2.Location = New Point(757, 0)
                                picPawnB2.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 2
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 2
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 2
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 2
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 2
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 2
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 2
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 2
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(1) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next
            ElseIf Shapes = 19 Then
                ShapesXY(picPawnB3)
                OriginalShapesPos(picPawnB3)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB3.Hide()
                            picPawnB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB3.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB3.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB3.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB3.BorderStyle = BorderStyle.None
                            picPawnB3.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB3.Location = New Point(757, 0)
                                picPawnB3.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 3
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 3
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 3
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 3
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 3
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 3
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 3
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 3
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(2) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next
            ElseIf Shapes = 20 Then
                ShapesXY(picPawnB4)
                OriginalShapesPos(picPawnB4)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB4.Hide()
                            picPawnB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB4.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB4.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB4.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB4.BorderStyle = BorderStyle.None
                            picPawnB4.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB4.Location = New Point(757, 0)
                                picPawnB4.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 4
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 4
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 4
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 4
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 4
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 4
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 4
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 4
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(3) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 21 Then
                ShapesXY(picPawnB5)
                OriginalShapesPos(picPawnB5)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB5.Hide()
                            picPawnB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB5.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB5.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB5.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB5.BorderStyle = BorderStyle.None
                            picPawnB5.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB5.Location = New Point(757, 0)
                                picPawnB5.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 5
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 5
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 5
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 5
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 5
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 5
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 5
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 5
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(4) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 22 Then
                ShapesXY(picPawnB6)
                OriginalShapesPos(picPawnB6)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB6.Hide()
                            picPawnB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB6.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB6.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB6.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB6.BorderStyle = BorderStyle.None
                            picPawnB6.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB6.Location = New Point(757, 0)
                                picPawnB6.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 6
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 6
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 6
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 6
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 6
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 6
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 6
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 6
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(5) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 23 Then
                ShapesXY(picPawnB7)
                OriginalShapesPos(picPawnB7)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB7.Hide()
                            picPawnB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB7.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB7.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB7.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB7.BorderStyle = BorderStyle.None
                            picPawnB7.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB7.Location = New Point(757, 0)
                                picPawnB7.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 7
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 7
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 7
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 7
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 7
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 7
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 7
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 7
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(6) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 24 Then
                ShapesXY(picPawnB8)
                OriginalShapesPos(picPawnB8)
                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnB8.Hide()
                            picPawnB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnB8.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnB8.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnB8.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken = True
                            Turn = False
                            ShapesLocation()
                            picPawnB8.BorderStyle = BorderStyle.None
                            picPawnB8.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 7 Then
                                PointsWonBlack = PointsWonBlack + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 7 Then 'Process of promoting a Black Queen
                                picPawnB8.Location = New Point(757, 0)
                                picPawnB8.Hide()
                                If picQueenB1.Location.X = 757 Then
                                    picQueenB1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB1.Show()
                                    PawnReminder(0) = 8
                                ElseIf picQueenB2.Location.X = 757 Then
                                    picQueenB2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB2.Show()
                                    PawnReminder(1) = 8
                                ElseIf picQueenB3.Location.X = 757 Then
                                    picQueenB3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB3.Show()
                                    PawnReminder(2) = 8
                                ElseIf picQueenB4.Location.X = 757 Then
                                    picQueenB4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB4.Show()
                                    PawnReminder(3) = 8
                                ElseIf picQueenB5.Location.X = 757 Then
                                    picQueenB5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB5.Show()
                                    PawnReminder(4) = 8
                                ElseIf picQueenB6.Location.X = 757 Then
                                    picQueenB6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB6.Show()
                                    PawnReminder(5) = 8
                                ElseIf picQueenB7.Location.X = 757 Then
                                    picQueenB7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB7.Show()
                                    PawnReminder(6) = 8
                                ElseIf picQueenB8.Location.X = 757 Then
                                    picQueenB8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenB8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenB8.Show()
                                    PawnReminder(7) = 8
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(7) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 25 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 26 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 27 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 28 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 29 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 30 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 31 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 32 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 33 Then
                QueensBBTS(picShape, picQueenB1, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 34 Then
                QueensBBTS(picShape, picQueenB2, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 35 Then
                QueensBBTS(picShape, picQueenB3, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 36 Then
                QueensBBTS(picShape, picQueenB4, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 37 Then
                QueensBBTS(picShape, picQueenB5, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 38 Then
                QueensBBTS(picShape, picQueenB6, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 39 Then
                QueensBBTS(picShape, picQueenB7, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 40 Then
                QueensBBTS(picShape, picQueenB8, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 41 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 42 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 43 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 44 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 45 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 46 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 47 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 48 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub


            End If


            dgvChess.ClearSelection()
            number = 0
            UnselectAllShapes()
            Exit Sub
        End If

    End Sub

    Sub BlackTakenShape(ByRef picShape As PictureBox)

        REM *********************************************************************
        REM Variable Dictionary:
        REM ColPick1 (Integer) = The coefficient of Column value of a certain piece on the board
        REM LocShapeX (Integer) = The X-value on the Form of a piece that is being considered
        REM LocShapeY (Integer) = The Y-value on the Form of a piece that is being considered
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM RowPick1 (Integer) = The coefficient of Row value of a certain piece on the board
        REM ShapeB (Integer) = The B-value (from RGB) of the considered piece's backcolor
        REM ShapeG (Integer) = The G-value (from RGB) of the considered piece's backcolor
        REM ShapeR (Integer) = The R-value (from RGB) of the considered piece's backcolor
        REM *********************************************************************


        Dim o As Integer
        Dim ColPick1, RowPick1 As Integer
        Dim ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY As Integer


        ColPick1 = (picShape.Location.X + 1.4) / 80
        RowPick1 = (picShape.Location.Y + 1.4) / 80
        Taken2 = False

        REM *****************************************************************
        REM     Prohibiting White pieces  capturing any of the Black pieces while it is
        REM     not their turn (If statement)
        REM *****************************************************************

        If Turn = True Then
            Exit Sub
        End If

        ShapeR = picShape.BackColor.R
        ShapeG = picShape.BackColor.G
        ShapeB = picShape.BackColor.B
        LocShapeX = picShape.Location.X
        LocShapeY = picShape.Location.Y

        REM *****************************************************************
        REM     The Process of capturing a Black piece by a certain White piece
        REM *****************************************************************

        If number = 1 Then
            If Shapes = 1 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 2 Then

                ShapesXY(picKingW)
                OriginalShapesPos(picKingW)
                For i = -1 To 1
                    For j = -1 To 1
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKingW.Hide()
                                picKingW.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKingW.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKingW.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKingW.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKingW.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken2 = True
                                Turn = True
                                ShapesLocation()
                                picKingW.BorderStyle = BorderStyle.None
                                picKingW.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                KingWMovesCount = KingWMovesCount + 1
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 3 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 4 Then

                ShapesXY(picQueenW)
                OriginalShapesPos(picQueenW)
                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenW.Hide()
                            picQueenW.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenW.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenW.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            picQueenW.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenW.Hide()
                            picQueenW.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenW.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenW.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            picQueenW.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenW.Hide()
                            picQueenW.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenW.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenW.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            picQueenW.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picQueenW.Hide()
                            picQueenW.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picQueenW.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(OriginalPosX, OriginalPosY)
                                picQueenW.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            picQueenW.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next







            ElseIf Shapes = 5 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 6 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 7 Then
                ShapesXY(picBishopW1)
                OriginalShapesPos(picBishopW1)

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopW1.Hide()
                            picBishopW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopW1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW1.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picBishopW1.BorderStyle = BorderStyle.None
                            picBishopW1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopW1.Hide()
                            picBishopW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopW1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW1.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picBishopW1.BorderStyle = BorderStyle.None
                            picBishopW1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next


            ElseIf Shapes = 8 Then
                ShapesXY(picBishopW2)
                OriginalShapesPos(picBishopW2)

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1 + 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopW2.Hide()
                            picBishopW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopW2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW2.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picBishopW2.BorderStyle = BorderStyle.None
                            picBishopW2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1 - 1
                            For j = ColPick1 + 1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picBishopW2.Hide()
                            picBishopW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picBishopW2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW2.Location = New Point(OriginalPosX, OriginalPosY)
                                picBishopW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picBishopW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picBishopW2.BorderStyle = BorderStyle.None
                            picBishopW2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

            ElseIf Shapes = 9 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 10 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 11 Then

                ShapesXY(picKnightW1)
                OriginalShapesPos(picKnightW1)

                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightW1.Hide()
                                picKnightW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightW1.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW1.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightW1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken2 = True
                                Turn = True
                                ShapesLocation()
                                picKnightW1.BorderStyle = BorderStyle.None
                                picKnightW1.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightW1.Hide()
                                picKnightW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightW1.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW1.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightW1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken2 = True
                                Turn = True
                                ShapesLocation()
                                picKnightW1.BorderStyle = BorderStyle.None
                                picKnightW1.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 12 Then

                ShapesXY(picKnightW2)
                OriginalShapesPos(picKnightW2)

                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightW2.Hide()
                                picKnightW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightW2.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW2.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightW2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken2 = True
                                Turn = True
                                ShapesLocation()
                                picKnightW2.BorderStyle = BorderStyle.None
                                picKnightW2.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picShape.Hide()
                                picShape.Location = New Point(757, 0)
                                picKnightW2.Hide()
                                picKnightW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                picKnightW2.Location = New Point(LocShapeX, LocShapeY)
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW2.Location = New Point(OriginalPosX, OriginalPosY)
                                    picKnightW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                    picShape.Location = New Point(LocShapeX, LocShapeY)
                                    picShape.Show()
                                    picKnightW2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    WhiteShapesLocation()
                                    BlackShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                Taken2 = True
                                Turn = True
                                ShapesLocation()
                                picKnightW2.BorderStyle = BorderStyle.None
                                picKnightW2.Show()
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 13 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 14 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 15 Then
                ShapesXY(picRockW1)
                OriginalShapesPos(picRockW1)

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockW1.Hide()
                            picRockW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockW1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW1.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picRockW1.BorderStyle = BorderStyle.None
                            picRockW1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW1MovesCount = RockW1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockW1.Hide()
                            picRockW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockW1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW1.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picRockW1.BorderStyle = BorderStyle.None
                            picRockW1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW1MovesCount = RockW1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub

                        End If
                    End If
                Next


            ElseIf Shapes = 16 Then
                ShapesXY(picRockW2)
                OriginalShapesPos(picRockW2)

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1 - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 + 1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockW2.Hide()
                            picRockW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockW2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW2.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picRockW2.BorderStyle = BorderStyle.None
                            picRockW2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW2MovesCount = RockW2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub

                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1 - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 + 1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picRockW2.Hide()
                            picRockW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picRockW2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW2.Location = New Point(OriginalPosX, OriginalPosY)
                                picRockW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picRockW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picRockW2.BorderStyle = BorderStyle.None
                            picRockW2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW2MovesCount = RockW2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next


            ElseIf Shapes = 17 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 18 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 19 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 20 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 21 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 22 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 23 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 24 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 25 Then
                ShapesXY(picPawnW1)
                OriginalShapesPos(picPawnW1)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW1.Hide()
                            picPawnW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW1.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW1.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW1.BorderStyle = BorderStyle.None
                            picPawnW1.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW1.Location = New Point(757, 0)
                                picPawnW1.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 1
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 1
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 1
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 1
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 1
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 1
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 1
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 1
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(8) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 26 Then
                ShapesXY(picPawnW2)
                OriginalShapesPos(picPawnW2)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW2.Hide()
                            picPawnW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW2.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW2.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW2.BorderStyle = BorderStyle.None
                            picPawnW2.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW2.Location = New Point(757, 0)
                                picPawnW2.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 2
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 2
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 2
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 2
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 2
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 2
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 2
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 2
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(9) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 27 Then
                ShapesXY(picPawnW3)
                OriginalShapesPos(picPawnW3)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW3.Hide()
                            picPawnW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW3.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW3.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW3.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW3.BorderStyle = BorderStyle.None
                            picPawnW3.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW3.Location = New Point(757, 0)
                                picPawnW3.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 3
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 3
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 3
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 3
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 3
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 3
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 3
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 3
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(10) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 28 Then
                ShapesXY(picPawnW4)
                OriginalShapesPos(picPawnW4)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW4.Hide()
                            picPawnW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW4.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW4.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW4.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW4.BorderStyle = BorderStyle.None
                            picPawnW4.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW4.Location = New Point(757, 0)
                                picPawnW4.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 4
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 4
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 4
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 4
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 4
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 4
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 4
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 4
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(11) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 29 Then
                ShapesXY(picPawnW5)
                OriginalShapesPos(picPawnW5)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW5.Hide()
                            picPawnW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW5.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW5.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW5.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW5.BorderStyle = BorderStyle.None
                            picPawnW5.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW5.Location = New Point(757, 0)
                                picPawnW5.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 5
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 5
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 5
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 5
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 5
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 5
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 5
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 5
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(12) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 30 Then
                ShapesXY(picPawnW6)
                OriginalShapesPos(picPawnW6)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW6.Hide()
                            picPawnW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW6.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW6.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW6.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW6.BorderStyle = BorderStyle.None
                            picPawnW6.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW6.Location = New Point(757, 0)
                                picPawnW6.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 6
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 6
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 6
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 6
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 6
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 6
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 6
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 6
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(13) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 31 Then
                ShapesXY(picPawnW7)
                OriginalShapesPos(picPawnW7)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW7.Hide()
                            picPawnW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW7.Location = New Point(LocShapeX, LocShapeY)
                            WhiteShapesLocation()
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW7.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW7.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW7.BorderStyle = BorderStyle.None
                            picPawnW7.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW7.Location = New Point(757, 0)
                                picPawnW7.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 7
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 7
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 7
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 7
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 7
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 7
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 7
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 7
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(14) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 32 Then
                ShapesXY(picPawnW8)
                OriginalShapesPos(picPawnW8)

                For i = -1 To 1 Step 2
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow - 1 Then
                            picShape.Hide()
                            picShape.Location = New Point(757, 0)
                            picPawnW8.Hide()
                            picPawnW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                            picPawnW8.Location = New Point(LocShapeX, LocShapeY)
                            ShapesLocation()
                            WhiteShapesLocation()
                            BlackShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                picPawnW8.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                                picShape.Location = New Point(LocShapeX, LocShapeY)
                                picShape.Show()
                                picPawnW8.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                WhiteShapesLocation()
                                BlackShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            Taken2 = True
                            Turn = True
                            ShapesLocation()
                            picPawnW8.BorderStyle = BorderStyle.None
                            picPawnW8.Show()
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            If RowPick1 = 0 Then
                                PointsWonWhite = PointsWonWhite + 8
                                If PointsWonWhite > PointsWonBlack Then
                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                    PointsWonBlack = 0
                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                    PointsWonWhite = 0

                                End If
                            End If
                            If RowPick1 = 0 Then 'Process of promoting a White Queen
                                picPawnW8.Location = New Point(757, 0)
                                picPawnW8.Hide()
                                If picQueenW1.Location.X = 757 Then
                                    picQueenW1.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW1.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW1.Show()
                                    PawnReminder(8) = 8
                                ElseIf picQueenW2.Location.X = 757 Then
                                    picQueenW2.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW2.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW2.Show()
                                    PawnReminder(9) = 8
                                ElseIf picQueenW3.Location.X = 757 Then
                                    picQueenW3.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW3.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW3.Show()
                                    PawnReminder(10) = 8
                                ElseIf picQueenW4.Location.X = 757 Then
                                    picQueenW4.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW4.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW4.Show()
                                    PawnReminder(11) = 8
                                ElseIf picQueenW5.Location.X = 757 Then
                                    picQueenW5.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW5.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW5.Show()
                                    PawnReminder(12) = 8
                                ElseIf picQueenW6.Location.X = 757 Then
                                    picQueenW6.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW6.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW6.Show()
                                    PawnReminder(13) = 8
                                ElseIf picQueenW7.Location.X = 757 Then
                                    picQueenW7.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW7.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW7.Show()
                                    PawnReminder(14) = 8
                                ElseIf picQueenW8.Location.X = 757 Then
                                    picQueenW8.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                                    picQueenW8.Location = New Point(LocShapeX, LocShapeY)
                                    picQueenW8.Show()
                                    PawnReminder(15) = 8
                                End If
                            End If
                            ShapesLocation()
                            PawnsFirstMove(15) = False
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next
            ElseIf Shapes = 33 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 34 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 35 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 36 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 37 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 38 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 39 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub
            ElseIf Shapes = 40 Then
                dgvChess.ClearSelection()
                number = 0
                Exit Sub

            ElseIf Shapes = 41 Then
                QueensWBTS(picShape, picQueenW1, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 42 Then
                QueensWBTS(picShape, picQueenW2, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 43 Then
                QueensWBTS(picShape, picQueenW3, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 44 Then
                QueensWBTS(picShape, picQueenW4, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 45 Then
                QueensWBTS(picShape, picQueenW5, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 46 Then
                QueensWBTS(picShape, picQueenW6, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 47 Then
                QueensWBTS(picShape, picQueenW7, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            ElseIf Shapes = 48 Then
                QueensWBTS(picShape, picQueenW8, ShapeR, ShapeG, ShapeB, LocShapeX, LocShapeY, RowPick1, ColPick1)
            End If

            dgvChess.ClearSelection()
            number = 0
            UnselectAllShapes()
            Exit Sub
        End If

    End Sub

    Sub QueensBMoves(ByRef picQueen As PictureBox, ByRef RowPick1 As Integer, ByRef ColPick1 As Integer, ByRef R As Integer, ByRef G As Integer, ByRef B As Integer, ByRef XPos As Integer, ByRef YPos As Integer)

        REM *********************************************************************
        REM Variable Dictionary:
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim o As Integer
        Dim ShapeLocationCol, ShapeLocationRow As Integer

        ShapeLocationCol = (picQueen.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueen.Location.Y + 1.4) / 80

        REM *****************************************************************
        REM 	Moving a promoted black queen on the clicked cell
        REM *****************************************************************

        For j = -7 To 7
            If ColPick1 = ShapeLocationCol Then
                If RowPick1 = ShapeLocationRow + j Then
                    For i = ShapeLocationRow + 1 To RowPick1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For i = RowPick1 To ShapeLocationRow - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = False
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

        Next

        For i = -7 To 7
            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow Then
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For j = ColPick1 To ShapeLocationCol - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = False
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If
            End If
        Next

        For i = -7 To 7

            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow + 1
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o + 1

                    Next
                    o = RowPick1
                    For j = ColPick1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o + 1

                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = False
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

            If ColPick1 = ShapeLocationCol - i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow - 1
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o - 1

                    Next
                    o = RowPick1
                    For j = ColPick1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o - 1

                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = False
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

        Next
    End Sub

    Sub QueensWMoves(ByRef picQueen As PictureBox, ByRef RowPick1 As Integer, ByRef ColPick1 As Integer, ByRef R As Integer, ByRef G As Integer, ByRef B As Integer, ByRef XPos As Integer, ByRef YPos As Integer)

        REM *********************************************************************
        REM Variable Dictionary:
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim o As Integer
        Dim ShapeLocationCol, ShapeLocationRow As Integer

        ShapeLocationCol = (picQueen.Location.X + 1.4) / 80
        ShapeLocationRow = (picQueen.Location.Y + 1.4) / 80

        REM *****************************************************************
        REM 	Moving a promoted white queen on the clicked cell
        REM *****************************************************************

        For j = -7 To 7
            If ColPick1 = ShapeLocationCol Then
                If RowPick1 = ShapeLocationRow + j Then
                    For i = ShapeLocationRow + 1 To RowPick1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For i = RowPick1 To ShapeLocationRow - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = True
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

        Next

        For i = -7 To 7
            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow Then
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For j = ColPick1 To ShapeLocationCol - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = True
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If
            End If
        Next

        For i = -7 To 7

            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow + 1
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o + 1

                    Next
                    o = RowPick1
                    For j = ColPick1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o + 1

                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = True
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

            If ColPick1 = ShapeLocationCol - i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow - 1
                    For j = ShapeLocationCol + 1 To ColPick1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o - 1

                    Next
                    o = RowPick1
                    For j = ColPick1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o - 1

                    Next
                    picQueen.Hide()
                    picQueen.Location = New Point(XPos, YPos)
                    ShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        picQueen.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                        picQueen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    picQueen.BackColor = Color.FromArgb(R, G, B)
                    picQueen.Show()
                    Turn = True
                    ShapesLocation()
                    picQueen.BorderStyle = BorderStyle.None
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

        Next
    End Sub

    Sub QueensBBTS(ByRef picShape As PictureBox, ByRef Queen As PictureBox, ByRef ShapeR As Integer, ByRef ShapeG As Integer, ByRef ShapeB As Integer, ByRef LocShapeX As Integer, ByRef LocShapeY As Integer, ByRef RowPick1 As Integer, ByRef ColPick1 As Integer)

        REM *********************************************************************
        REM Variable Dictionary:
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM *********************************************************************

        Dim o As Integer

        ShapesXY(Queen)
        OriginalShapesPos(Queen)

        REM *****************************************************************
        REM 	Moving a promoted black queen on a certain cell by capturing a white piece
        REM *****************************************************************

        For j = -7 To 7
            If ColPick1 = ShapeLocationCol Then
                If RowPick1 = ShapeLocationRow + j Then
                    For i = ShapeLocationRow + 1 To RowPick1 - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For i = RowPick1 + 1 To ShapeLocationRow - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken = True
                    Turn = False
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

        Next

        For i = -7 To 7
            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow Then
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For j = ColPick1 + 1 To ShapeLocationCol - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken = True
                    Turn = False
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If
            End If
        Next

        For i = -7 To 7

            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow + 1
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o + 1

                    Next
                    o = RowPick1 + 1
                    For j = ColPick1 + 1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o + 1

                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken = True
                    Turn = False
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

            If ColPick1 = ShapeLocationCol - i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow - 1
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o - 1

                    Next
                    o = RowPick1 - 1
                    For j = ColPick1 + 1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o - 1

                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckB()
                    If KingBChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken = True
                    Turn = False
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckW()
                    CheckForMateW()
                    tmrTime2.Enabled = False
                    tmrTime1.Enabled = True
                    DrawChkW()
                    If MateWhite = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingWChecked = True Then
                        If MateBlack = False Then


                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True

                        End If
                    End If
                    Exit Sub
                End If

            End If

        Next

    End Sub

    Sub QueensWBTS(ByRef picShape As PictureBox, ByRef Queen As PictureBox, ByRef ShapeR As Integer, ByRef ShapeG As Integer, ByRef ShapeB As Integer, ByRef LocShapeX As Integer, ByRef LocShapeY As Integer, ByRef RowPick1 As Integer, ByRef ColPick1 As Integer)

        REM *********************************************************************
        REM Variable Dictionary:
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM *********************************************************************

        Dim o As Integer

        ShapesXY(Queen)
        OriginalShapesPos(Queen)

        REM *****************************************************************
        REM 	Moving a promoted white queen on a certain cell by capturing a black piece
        REM *****************************************************************

        For j = -7 To 7
            If ColPick1 = ShapeLocationCol Then
                If RowPick1 = ShapeLocationRow + j Then
                    For i = ShapeLocationRow + 1 To RowPick1 - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For i = RowPick1 + 1 To ShapeLocationRow - 1
                        If ShapeLocated(i, ShapeLocationCol) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken2 = True
                    Turn = True
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

        Next

        For i = -7 To 7
            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow Then
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If

                    Next
                    For j = ColPick1 + 1 To ShapeLocationCol - 1
                        If ShapeLocated(ShapeLocationRow, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken2 = True
                    Turn = True
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If
            End If
        Next

        For i = -7 To 7

            If ColPick1 = ShapeLocationCol + i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow + 1
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o + 1

                    Next
                    o = RowPick1 + 1
                    For j = ColPick1 + 1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o + 1

                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken2 = True
                    Turn = True
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

            If ColPick1 = ShapeLocationCol - i Then
                If RowPick1 = ShapeLocationRow + i Then
                    o = ShapeLocationRow - 1
                    For j = ShapeLocationCol + 1 To ColPick1 - 1
                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub

                        End If
                        o = o - 1

                    Next
                    o = RowPick1 - 1
                    For j = ColPick1 + 1 To ShapeLocationCol - 1

                        If ShapeLocated(o, j) = False Then
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            Exit Sub
                        End If
                        o = o - 1

                    Next
                    picShape.Hide()
                    picShape.Location = New Point(757, 0)
                    Queen.Hide()
                    Queen.BackColor = Color.FromArgb(ShapeR, ShapeG, ShapeB)
                    Queen.Location = New Point(LocShapeX, LocShapeY)
                    ShapesLocation()
                    WhiteShapesLocation()
                    BlackShapesLocation()
                    CheckForCheckW()
                    If KingWChecked = True Then
                        Queen.Location = New Point(OriginalPosX, OriginalPosY)
                        Queen.BackColor = Color.FromArgb(OriginalR, OriginalG, OriginalB)
                        picShape.Location = New Point(LocShapeX, LocShapeY)
                        picShape.Show()
                        Queen.Show()
                        number = 0
                        UnselectAllShapes()
                        ShapesLocation()
                        WhiteShapesLocation()
                        BlackShapesLocation()
                        Beep()
                        Exit Sub
                    End If
                    Taken2 = True
                    Turn = True
                    ShapesLocation()
                    Queen.BorderStyle = BorderStyle.None
                    Queen.Show()
                    For s = 0 To 15
                        If PawnsTwoSquaresAhead(s) = False Then
                            PawnsTwoSquaresAhead(s) = True
                        End If
                    Next
                    BlackShapesLocation()
                    WhiteShapesLocation()
                    dgvChess.ClearSelection()
                    number = 0
                    UnselectAllShapes()
                    CheckForCheckB()
                    CheckForMateB()
                    tmrTime1.Enabled = False
                    tmrTime2.Enabled = True
                    DrawChkB()
                    If MateBlack = True Then
                        lblMate.Show()
                        Exit Sub
                    End If
                    If KingBChecked = True Then



                        lblCheck.Show()
                        CheckTick = 0
                        tmrCheck.Enabled = True


                    End If
                    Exit Sub
                End If

            End If

        Next

    End Sub

    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        REM *****************************************************************
        REM 	Settling the pieces on their positions, preparing the board and all of the values to get the game
        REM     started
        REM *****************************************************************

        picKingW.Enabled = False
        picQueenW.Enabled = False
        picBishopW1.Enabled = False
        picBishopW2.Enabled = False
        picKnightW1.Enabled = False
        picKnightW2.Enabled = False
        picRockW1.Enabled = False
        picRockW2.Enabled = False
        picPawnW1.Enabled = False
        picPawnW2.Enabled = False
        picPawnW3.Enabled = False
        picPawnW4.Enabled = False
        picPawnW5.Enabled = False
        picPawnW6.Enabled = False
        picPawnW7.Enabled = False
        picPawnW8.Enabled = False

        For i = 0 To 15
            PawnReminder(i) = 0
        Next
        PointsWonWhite = 0
        PointsWonBlack = 0
        Cheat = 0

        For i = 0 To 7
            For j = 0 To 7
                Reset(i, j) = False
            Next
        Next


        lblMate.Hide()
        lblCheck.Hide()
        butBack.Hide()
        shpBorder5.Hide()

        chkReport.Checked = True
        lblScoreBlack.Hide()
        lblScoreWhite.Hide()


        Min1 = 5
        Sec1 = 0
        Min2 = 5
        Sec2 = 0

        dgvChess.RowHeadersVisible = False
        dgvChess.ColumnHeadersVisible = False

        dgvChess.Width = 643
        dgvChess.Height = 643
        dgvChess.ColumnCount = 8
        dgvChess.RowCount = 8
        For i = 0 To 7
            For j = 0 To 7
                dgvChess.Rows(i).Height = 80
                dgvChess.Columns(i).Width = 80

            Next
        Next

        For i = 0 To 7 Step 2
            For j = 0 To 7
                If j Mod 2 = 1 Then
                    dgvChess.Rows(i).Cells(j).Style.BackColor = Color.FromArgb(255, 128, 0)
                ElseIf j Mod 2 = 0 Then

                    dgvChess.Rows(i).Cells(j).Style.BackColor = Color.FromArgb(192, 64, 0)
                End If
            Next
        Next
        For i = 1 To 7 Step 2
            For j = 0 To 7
                If j Mod 2 = 0 Then
                    dgvChess.Rows(i).Cells(j).Style.BackColor = Color.FromArgb(255, 128, 0)
                ElseIf j Mod 2 = 1 Then

                    dgvChess.Rows(i).Cells(j).Style.BackColor = Color.FromArgb(192, 64, 0)
                End If
            Next
        Next

        For i = 0 To 7
            For j = 0 To 7
                ShapeLocated(i, j) = True
                ShapeLocatedW(i, j) = True
                ShapeLocatedB(i, j) = True
                WhitesMovement(i, j) = False
                BlacksMovement(i, j) = False
            Next
        Next


        dgvChess.EditMode = DataGridViewEditMode.EditProgrammatically
        dgvChess.AllowUserToResizeColumns = False
        dgvChess.AllowUserToResizeRows = False
        dgvChess.MultiSelect = False


        picPawnW1.Location = New Point(1.4, 6 * 80 + 1.4)
        picPawnW2.Location = New Point(1 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW3.Location = New Point(2 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW4.Location = New Point(3 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW5.Location = New Point(4 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW6.Location = New Point(5 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW7.Location = New Point(6 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW8.Location = New Point(7 * 80 + 1.4, 6 * 80 + 1.4)

        picPawnB1.Location = New Point(1.4, 1 * 80 + 1.4)
        picPawnB2.Location = New Point(1 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB3.Location = New Point(2 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB4.Location = New Point(3 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB5.Location = New Point(4 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB6.Location = New Point(5 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB7.Location = New Point(6 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB8.Location = New Point(7 * 80 + 1.4, 1 * 80 + 1.4)

        picRockW1.Location = New Point(1.4, 7 * 80 + 1.4)
        picRockW2.Location = New Point(7 * 80 + 1.4, 7 * 80 + 1.4)

        picRockB1.Location = New Point(1.4, 1.4)
        picRockB2.Location = New Point(7 * 80 + 1.4, 1.4)

        picKnightW1.Location = New Point(1 * 80 + 1.4, 7 * 80 + 1.4)
        picKnightW2.Location = New Point(6 * 80 + 1.4, 7 * 80 + 1.4)

        picKnightB1.Location = New Point(1 * 80 + 1.4, 1.4)
        picKnightB2.Location = New Point(6 * 80 + 1.4, 1.4)

        picBishopW1.Location = New Point(2 * 80 + 1.4, 7 * 80 + 1.4)
        picBishopW2.Location = New Point(5 * 80 + 1.4, 7 * 80 + 1.4)

        picBishopB1.Location = New Point(2 * 80 + 1.4, 1.4)
        picBishopB2.Location = New Point(5 * 80 + 1.4, 1.4)

        picQueenW.Location = New Point(3 * 80 + 1.4, 7 * 80 + 1.4)
        picQueenB.Location = New Point(3 * 80 + 1.4, 1.4)

        picKingW.Location = New Point(4 * 80 + 1.4, 7 * 80 + 1.4)
        picKingB.Location = New Point(4 * 80 + 1.4, 1.4)

        picQueenB1.Location = New Point(757, 0)
        picQueenB2.Location = New Point(757, 0)
        picQueenB3.Location = New Point(757, 0)
        picQueenB4.Location = New Point(757, 0)
        picQueenB5.Location = New Point(757, 0)
        picQueenB6.Location = New Point(757, 0)
        picQueenB7.Location = New Point(757, 0)
        picQueenB8.Location = New Point(757, 0)

        picQueenW1.Location = New Point(757, 0)
        picQueenW2.Location = New Point(757, 0)
        picQueenW3.Location = New Point(757, 0)
        picQueenW4.Location = New Point(757, 0)
        picQueenW5.Location = New Point(757, 0)
        picQueenW6.Location = New Point(757, 0)
        picQueenW7.Location = New Point(757, 0)
        picQueenW8.Location = New Point(757, 0)

        picQueenB1.Hide()
        picQueenB2.Hide()
        picQueenB3.Hide()
        picQueenB4.Hide()
        picQueenB5.Hide()
        picQueenB6.Hide()
        picQueenB7.Hide()
        picQueenB8.Hide()

        picQueenW1.Hide()
        picQueenW2.Hide()
        picQueenW3.Hide()
        picQueenW4.Hide()
        picQueenW5.Hide()
        picQueenW6.Hide()
        picQueenW7.Hide()
        picQueenW8.Hide()


        picPawnW1.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW2.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW3.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW4.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW5.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW6.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW7.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW8.BackColor = Color.FromArgb(255, 128, 0)

        picPawnB8.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB7.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB6.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB5.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB4.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB3.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB2.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB1.BackColor = Color.FromArgb(255, 128, 0)

        picRockW1.BackColor = Color.FromArgb(255, 128, 0)
        picRockW2.BackColor = Color.FromArgb(192, 64, 0)

        picRockB1.BackColor = Color.FromArgb(192, 64, 0)
        picRockB2.BackColor = Color.FromArgb(255, 128, 0)

        picKnightW1.BackColor = Color.FromArgb(192, 64, 0)
        picKnightW2.BackColor = Color.FromArgb(255, 128, 0)

        picKnightB1.BackColor = Color.FromArgb(255, 128, 0)
        picKnightB2.BackColor = Color.FromArgb(192, 64, 0)

        picBishopW1.BackColor = Color.FromArgb(255, 128, 0)
        picBishopW2.BackColor = Color.FromArgb(192, 64, 0)

        picBishopB1.BackColor = Color.FromArgb(192, 64, 0)
        picBishopB2.BackColor = Color.FromArgb(255, 128, 0)

        picQueenW.BackColor = Color.FromArgb(192, 64, 0)
        picQueenB.BackColor = Color.FromArgb(255, 128, 0)

        picKingW.BackColor = Color.FromArgb(255, 128, 0)
        picKingB.BackColor = Color.FromArgb(192, 64, 0)


        KingBMovesCount = 0
        KingWMovesCount = 0
        RockB1MovesCount = 0
        RockB2MovesCount = 0
        RockW1MovesCount = 0
        RockW2MovesCount = 0

        ShapesLocation()
        BlackShapesLocation()
        WhiteShapesLocation()


        path = "Previous Games.txt"
        fullPath1 = IO.Path.GetFullPath(path)
        Console.WriteLine("GetFullPath('{0}') returns '{1}'", path, fullPath1) ' fullPath1 = Privious Games


        path = "Report.txt"
        fullPath2 = IO.Path.GetFullPath(path)
        Console.WriteLine("GetFullPath('{0}') returns '{1}'", path, fullPath2)  ' fullPath2 = Report


    End Sub

    Private Sub dgvChess_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgvChess.KeyPress

        REM *********************************************************************
        REM Variable Dictionary:
        REM Color (Color) = The value of a color of the considered cell on the board
        REM RndNumber1 (Integer) = An integer which takes on value of a random number from 0
        REM                        to 7
        REM RndNumber2 (Integer) = An integer which takes on value of a random number from 0
        REM                        to 7
        REM *********************************************************************

        Dim RndNumber1, RndNumber2 As Integer
        Dim Color As Color

        Randomize()

        REM *****************************************************************
        REM 	Using the "Eugene-Cheat" by clicking on the "g" button (Summoning 8 queens
        REM     randomly on the board
        REM *****************************************************************

        If e.KeyChar = "g" Then
            If tmrResult.Enabled = True Then
                If Cheat = 0 Then
                    If Player1 = "Eugene" Then
                        If Turn = False Then
Again1:                     For v = 0 To 7
                                Do

                                    RndNumber1 = Int(Rnd() * 8)
                                    RndNumber2 = Int(Rnd() * 8)

                                    If ShapeLocated(RndNumber1, RndNumber2) = True Then
                                        If Reset(RndNumber1, RndNumber2) = False Then
                                            Reset(RndNumber1, RndNumber2) = True
                                            Exit Do
                                        End If
                                    End If
                                Loop
                                For i = 0 To 7 Step 2
                                    For j = 0 To 7
                                        If j Mod 2 = 1 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(255, 128, 0)
                                                End If
                                            End If

                                        ElseIf j Mod 2 = 0 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(192, 64, 0)
                                                End If
                                            End If

                                        End If
                                    Next
                                Next
                                For i = 1 To 7 Step 2
                                    For j = 0 To 7
                                        If j Mod 2 = 0 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(255, 128, 0)
                                                End If
                                            End If


                                        ElseIf j Mod 2 = 1 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(192, 64, 0)
                                                End If
                                            End If


                                        End If
                                    Next
                                Next
                                If v = 0 Then
                                    picQueenW1.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW1.BackColor = Color
                                    picQueenW1.Show()
                                ElseIf v = 1 Then
                                    picQueenW2.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW2.BackColor = Color
                                    picQueenW2.Show()
                                ElseIf v = 2 Then
                                    picQueenW3.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW3.BackColor = Color
                                    picQueenW3.Show()
                                ElseIf v = 3 Then
                                    picQueenW4.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW4.BackColor = Color
                                    picQueenW4.Show()
                                ElseIf v = 4 Then
                                    picQueenW5.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW5.BackColor = Color
                                    picQueenW5.Show()
                                ElseIf v = 5 Then
                                    picQueenW6.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW6.BackColor = Color
                                    picQueenW6.Show()
                                ElseIf v = 6 Then
                                    picQueenW7.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW7.BackColor = Color
                                    picQueenW7.Show()
                                ElseIf v = 7 Then
                                    picQueenW8.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenW8.BackColor = Color
                                    picQueenW8.Show()
                                End If
                            Next
                            Turn = True
                            Cheat = 1
                            ShapesLocation()
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            CheckForCheckB()
                            CheckForMateB()
                            DrawChkB()

                            If KingWChecked = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenW1.Hide()
                                picQueenW2.Hide()
                                picQueenW3.Hide()
                                picQueenW4.Hide()
                                picQueenW5.Hide()
                                picQueenW6.Hide()
                                picQueenW7.Hide()
                                picQueenW8.Hide()

                                picQueenW1.Location = New Point(757, 0)
                                picQueenW2.Location = New Point(757, 0)
                                picQueenW3.Location = New Point(757, 0)
                                picQueenW4.Location = New Point(757, 0)
                                picQueenW5.Location = New Point(757, 0)
                                picQueenW6.Location = New Point(757, 0)
                                picQueenW7.Location = New Point(757, 0)
                                picQueenW8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckB()
                                CheckForMateB()


                                GoTo Again1

                            End If

                            If MateBlack = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenW1.Hide()
                                picQueenW2.Hide()
                                picQueenW3.Hide()
                                picQueenW4.Hide()
                                picQueenW5.Hide()
                                picQueenW6.Hide()
                                picQueenW7.Hide()
                                picQueenW8.Hide()

                                picQueenW1.Location = New Point(757, 0)
                                picQueenW2.Location = New Point(757, 0)
                                picQueenW3.Location = New Point(757, 0)
                                picQueenW4.Location = New Point(757, 0)
                                picQueenW5.Location = New Point(757, 0)
                                picQueenW6.Location = New Point(757, 0)
                                picQueenW7.Location = New Point(757, 0)
                                picQueenW8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckB()
                                CheckForMateB()


                                GoTo Again1

                            End If
                            If StaleMate = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenW1.Hide()
                                picQueenW2.Hide()
                                picQueenW3.Hide()
                                picQueenW4.Hide()
                                picQueenW5.Hide()
                                picQueenW6.Hide()
                                picQueenW7.Hide()
                                picQueenW8.Hide()

                                picQueenW1.Location = New Point(757, 0)
                                picQueenW2.Location = New Point(757, 0)
                                picQueenW3.Location = New Point(757, 0)
                                picQueenW4.Location = New Point(757, 0)
                                picQueenW5.Location = New Point(757, 0)
                                picQueenW6.Location = New Point(757, 0)
                                picQueenW7.Location = New Point(757, 0)
                                picQueenW8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckB()
                                CheckForMateB()
                                DrawChkB()

                                GoTo Again1

                            End If

                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            PointsWonWhite = PointsWonWhite + 72
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                            UnselectAllShapes()

                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                        End If

                    ElseIf Player2 = "Eugene" Then
                        If Turn = True Then
Again2:                     For v = 0 To 7
                                Do
                                    RndNumber1 = Int(Rnd() * 8)
                                    RndNumber2 = Int(Rnd() * 8)

                                    If ShapeLocated(RndNumber1, RndNumber2) = True Then
                                        If Reset(RndNumber1, RndNumber2) = False Then
                                            Reset(RndNumber1, RndNumber2) = True
                                            Exit Do
                                        End If
                                    End If
                                Loop

                                REM *** select the appropriate colour for the cell that has been randomly chosen as a queen spawn point
                                For i = 0 To 7 Step 2
                                    For j = 0 To 7
                                        If j Mod 2 = 1 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(255, 128, 0)
                                                End If
                                            End If

                                        ElseIf j Mod 2 = 0 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(192, 64, 0)
                                                End If
                                            End If

                                        End If
                                    Next
                                Next
                                For i = 1 To 7 Step 2
                                    For j = 0 To 7
                                        If j Mod 2 = 0 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(255, 128, 0)
                                                End If
                                            End If


                                        ElseIf j Mod 2 = 1 Then

                                            If RndNumber1 = i Then
                                                If RndNumber2 = j Then
                                                    Color = Color.FromArgb(192, 64, 0)
                                                End If
                                            End If


                                        End If
                                    Next
                                Next
                                REM ********

                                If v = 0 Then
                                    picQueenB1.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB1.BackColor = Color
                                    picQueenB1.Show()
                                ElseIf v = 1 Then
                                    picQueenB2.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB2.BackColor = Color
                                    picQueenB2.Show()
                                ElseIf v = 2 Then
                                    picQueenB3.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB3.BackColor = Color
                                    picQueenB3.Show()
                                ElseIf v = 3 Then
                                    picQueenB4.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB4.BackColor = Color
                                    picQueenB4.Show()
                                ElseIf v = 4 Then
                                    picQueenB5.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB5.BackColor = Color
                                    picQueenB5.Show()
                                ElseIf v = 5 Then
                                    picQueenB6.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB6.BackColor = Color
                                    picQueenB6.Show()
                                ElseIf v = 6 Then
                                    picQueenB7.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB7.BackColor = Color
                                    picQueenB7.Show()
                                ElseIf v = 7 Then
                                    picQueenB8.Location = New Point(RndNumber2 * 80 + 1.4, RndNumber1 * 80 + 1.4)
                                    picQueenB8.BackColor = Color
                                    picQueenB8.Show()
                                End If
                            Next
                            Turn = False
                            Cheat = 1
                            ShapesLocation()
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            CheckForCheckW()
                            CheckForMateW()
                            DrawChkW()

                            If KingBChecked = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenB1.Hide()
                                picQueenB2.Hide()
                                picQueenB3.Hide()
                                picQueenB4.Hide()
                                picQueenB5.Hide()
                                picQueenB6.Hide()
                                picQueenB7.Hide()
                                picQueenB8.Hide()


                                picQueenB1.Location = New Point(757, 0)
                                picQueenB2.Location = New Point(757, 0)
                                picQueenB3.Location = New Point(757, 0)
                                picQueenB4.Location = New Point(757, 0)
                                picQueenB5.Location = New Point(757, 0)
                                picQueenB6.Location = New Point(757, 0)
                                picQueenB7.Location = New Point(757, 0)
                                picQueenB8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckW()
                                CheckForMateW()
                                DrawChkW()

                                GoTo Again2

                            End If

                            If MateWhite = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenB1.Hide()
                                picQueenB2.Hide()
                                picQueenB3.Hide()
                                picQueenB4.Hide()
                                picQueenB5.Hide()
                                picQueenB6.Hide()
                                picQueenB7.Hide()
                                picQueenB8.Hide()


                                picQueenB1.Location = New Point(757, 0)
                                picQueenB2.Location = New Point(757, 0)
                                picQueenB3.Location = New Point(757, 0)
                                picQueenB4.Location = New Point(757, 0)
                                picQueenB5.Location = New Point(757, 0)
                                picQueenB6.Location = New Point(757, 0)
                                picQueenB7.Location = New Point(757, 0)
                                picQueenB8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckW()
                                CheckForMateW()

                                GoTo Again2

                            End If

                            If StaleMate = True Then

                                For i = 0 To 7
                                    For j = 0 To 7
                                        Reset(i, j) = False
                                    Next
                                Next

                                picQueenB1.Hide()
                                picQueenB2.Hide()
                                picQueenB3.Hide()
                                picQueenB4.Hide()
                                picQueenB5.Hide()
                                picQueenB6.Hide()
                                picQueenB7.Hide()
                                picQueenB8.Hide()


                                picQueenB1.Location = New Point(757, 0)
                                picQueenB2.Location = New Point(757, 0)
                                picQueenB3.Location = New Point(757, 0)
                                picQueenB4.Location = New Point(757, 0)
                                picQueenB5.Location = New Point(757, 0)
                                picQueenB6.Location = New Point(757, 0)
                                picQueenB7.Location = New Point(757, 0)
                                picQueenB8.Location = New Point(757, 0)

                                ShapesLocation()
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                CheckForCheckW()
                                CheckForMateW()
                                DrawChkW()

                                GoTo Again2

                            End If

                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            PointsWonBlack = PointsWonBlack + 72
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                            UnselectAllShapes()

                            If KingWChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                        End If
                    End If
                End If
            End If
        End If


    End Sub

    Private Sub dgvChess_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvChess.CellClick

        REM *********************************************************************
        REM Variable Dictionary:
        REM o (integer) = A number which represents the coefficient of either Row or Column value of a
        REM               certain piece
        REM ShapeLocationCol (Integer) = The coefficient of Column value of a certain piece on the board
        REM ShapeLocationRow (Integer) = The coefficient of Row value of a certain piece on the board
        REM *********************************************************************

        Dim ShapeLocationCol, ShapeLocationRow As Integer
        Dim o As Integer


        dgvChess.ClearSelection()
        RowPick1 = e.RowIndex
        ColPick1 = e.ColumnIndex

        R = dgvChess.Rows(RowPick1).Cells(ColPick1).Style.BackColor.R
        B = dgvChess.Rows(RowPick1).Cells(ColPick1).Style.BackColor.B
        G = dgvChess.Rows(RowPick1).Cells(ColPick1).Style.BackColor.G


        XPos = ColPick1 * 80 + 1.4
        YPos = RowPick1 * 80 + 1.4

        number = number + 1

        REM *****************************************************************
        REM 	Moving a certain piece(either Black or White) on the available cells on the board
        REM *****************************************************************

        If number = 2 Then
            If Shapes = 1 Then 'Black King's movement on the board
                ShapeLocationCol = (picKingB.Location.X + 1.4) / 80
                ShapeLocationRow = (picKingB.Location.Y + 1.4) / 80


                For i = -1 To 1
                    For j = -1 To 1
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKingB.Hide()
                                picKingB.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKingB.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKingB.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKingB.BackColor = Color.FromArgb(R, G, B)
                                picKingB.Show()
                                Turn = False
                                ShapesLocation()
                                picKingB.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                KingBMovesCount = KingBMovesCount + 1
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next

                Next


                If ColPick1 = ShapeLocationCol + 2 Then 'Castling part
                    If KingBMovesCount = 0 Then
                        If RockB2MovesCount = 0 Then
                            If ShapeLocated(ShapeLocationRow, ShapeLocationCol + 1) = True Then
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                If AttackedSquaresByWhite(ShapeLocationRow, ShapeLocationCol + 1) = False Then
                                    If AttackedSquaresByWhite(ShapeLocationRow, ShapeLocationCol + 2) = False Then
                                        picKingB.Location = New Point(6 * 80 + 1.4, 1.4)
                                        picRockB2.Location = New Point(5 * 80 + 1.4, 1.4)
                                        picKingB.BackColor = Color.FromArgb(R, G, B)
                                        Turn = False
                                        picKingB.BorderStyle = BorderStyle.None
                                        For s = 0 To 15
                                            If PawnsTwoSquaresAhead(s) = False Then
                                                PawnsTwoSquaresAhead(s) = True
                                            End If
                                        Next
                                        KingBMovesCount = KingBMovesCount + 1
                                        RockB2MovesCount = RockB2MovesCount + 1
                                        ShapesLocation()
                                        BlackShapesLocation()
                                        WhiteShapesLocation()
                                        dgvChess.ClearSelection()
                                        number = 0
                                        UnselectAllShapes()
                                        CheckForCheckW()
                                        CheckForMateW()
                                        tmrTime2.Enabled = False
                                        tmrTime1.Enabled = True
                                        DrawChkW()
                                        If MateWhite = True Then
                                            lblMate.Show()
                                            Exit Sub
                                        End If
                                        If KingWChecked = True Then
                                            If MateBlack = False Then


                                                lblCheck.Show()
                                                CheckTick = 0
                                                tmrCheck.Enabled = True

                                            End If
                                        End If
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If ColPick1 = ShapeLocationCol - 2 Then 'Castling part
                    If KingBMovesCount = 0 Then
                        If RockB1MovesCount = 0 Then
                            If ShapeLocated(ShapeLocationRow, ShapeLocationCol - 1) = True Then
                                If ShapeLocated(ShapeLocationRow, ShapeLocationCol - 3) = True Then
                                    CheckForCheckB()
                                    If KingBChecked = True Then
                                        number = 0
                                        UnselectAllShapes()
                                        ShapesLocation()
                                        Beep()
                                        Exit Sub
                                    End If
                                    If AttackedSquaresByWhite(ShapeLocationRow, ShapeLocationCol - 1) = False Then
                                        If AttackedSquaresByWhite(ShapeLocationRow, ShapeLocationCol - 2) = False Then
                                            If AttackedSquaresByWhite(ShapeLocationRow, ShapeLocationCol - 3) = False Then
                                                picKingB.Location = New Point(2 * 80 + 1.4, 1.4)
                                                picRockB1.Location = New Point(3 * 80 + 1.4, 1.4)
                                                picKingB.BackColor = Color.FromArgb(R, G, B)
                                                picRockB1.BackColor = Color.FromArgb(255, 128, 0)
                                                Turn = False
                                                picKingB.BorderStyle = BorderStyle.None
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                KingBMovesCount = KingBMovesCount + 1
                                                RockB1MovesCount = RockB1MovesCount + 1
                                                ShapesLocation()
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If


            ElseIf Shapes = 2 Then 'White King's movement on the board
                ShapeLocationCol = (picKingW.Location.X + 1.4) / 80
                ShapeLocationRow = (picKingW.Location.Y + 1.4) / 80
                For i = -1 To 1
                    For j = -1 To 1
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKingW.Hide()
                                picKingW.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKingW.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKingW.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If

                                picKingW.BackColor = Color.FromArgb(R, G, B)
                                picKingW.Show()
                                Turn = True
                                ShapesLocation()
                                picKingW.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                KingWMovesCount = KingWMovesCount + 1
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If

                        End If

                    Next

                Next



                If ColPick1 = ShapeLocationCol + 2 Then 'Castling part
                    If KingWMovesCount = 0 Then
                        If RockW2MovesCount = 0 Then
                            If ShapeLocated(ShapeLocationRow, ShapeLocationCol + 1) = True Then
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                If AttackedSquaresByBlack(ShapeLocationRow, ShapeLocationCol + 1) = False Then
                                    If AttackedSquaresByBlack(ShapeLocationRow, ShapeLocationCol + 2) = False Then
                                        picKingW.Location = New Point(6 * 80 + 1.4, 7 * 80 + 1.4)
                                        picRockW2.Location = New Point(5 * 80 + 1.4, 7 * 80 + 1.4)
                                        picKingW.BackColor = Color.FromArgb(R, G, B)
                                        Turn = True
                                        picKingW.BorderStyle = BorderStyle.None
                                        For s = 0 To 15
                                            If PawnsTwoSquaresAhead(s) = False Then
                                                PawnsTwoSquaresAhead(s) = True
                                            End If
                                        Next
                                        KingWMovesCount = KingWMovesCount + 1
                                        RockW2MovesCount = RockW2MovesCount + 1
                                        ShapesLocation()
                                        BlackShapesLocation()
                                        WhiteShapesLocation()
                                        dgvChess.ClearSelection()
                                        number = 0
                                        UnselectAllShapes()
                                        CheckForCheckB()
                                        CheckForMateB()
                                        tmrTime1.Enabled = False
                                        tmrTime2.Enabled = True
                                        DrawChkB()
                                        If MateBlack = True Then
                                            lblMate.Show()
                                            Exit Sub
                                        End If
                                        If KingBChecked = True Then



                                            lblCheck.Show()
                                            CheckTick = 0
                                            tmrCheck.Enabled = True


                                        End If
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If ColPick1 = ShapeLocationCol - 2 Then 'Castling part
                    If KingWMovesCount = 0 Then
                        If RockW1MovesCount = 0 Then
                            If ShapeLocated(ShapeLocationRow, ShapeLocationCol - 1) = True Then
                                If ShapeLocated(ShapeLocationRow, ShapeLocationCol - 3) = True Then
                                    CheckForCheckW()
                                    If KingWChecked = True Then
                                        number = 0
                                        UnselectAllShapes()
                                        ShapesLocation()
                                        Beep()
                                        Exit Sub
                                    End If
                                    If AttackedSquaresByBlack(ShapeLocationRow, ShapeLocationCol - 1) = False Then
                                        If AttackedSquaresByBlack(ShapeLocationRow, ShapeLocationCol - 2) = False Then
                                            If AttackedSquaresByBlack(ShapeLocationRow, ShapeLocationCol - 3) = False Then
                                                picKingW.Location = New Point(2 * 80 + 1.4, 7 * 80 + 1.4)
                                                picRockW1.Location = New Point(3 * 80 + 1.4, 7 * 80 + 1.4)
                                                picKingW.BackColor = Color.FromArgb(R, G, B)
                                                picRockW1.BackColor = Color.FromArgb(192, 64, 0)
                                                Turn = True
                                                picKingW.BorderStyle = BorderStyle.None
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                KingWMovesCount = KingWMovesCount + 1
                                                RockW1MovesCount = RockW1MovesCount + 1
                                                ShapesLocation()
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If



            ElseIf Shapes = 3 Then 'Black Queen's movement on the board
                ShapeLocationCol = (picQueenB.Location.X + 1.4) / 80
                ShapeLocationRow = (picQueenB.Location.Y + 1.4) / 80

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picQueenB.Hide()
                            picQueenB.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenB.BackColor = Color.FromArgb(R, G, B)
                            picQueenB.Show()
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picQueenB.Hide()
                            picQueenB.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenB.BackColor = Color.FromArgb(R, G, B)
                            picQueenB.Show()
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picQueenB.Hide()
                            picQueenB.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenB.BackColor = Color.FromArgb(R, G, B)
                            picQueenB.Show()
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picQueenB.Hide()
                            picQueenB.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picQueenB.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenB.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenB.BackColor = Color.FromArgb(R, G, B)
                            picQueenB.Show()
                            Turn = False
                            ShapesLocation()
                            picQueenB.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next
            ElseIf Shapes = 4 Then 'White Queen's movement on the board
                ShapeLocationCol = (picQueenW.Location.X + 1.4) / 80
                ShapeLocationRow = (picQueenW.Location.Y + 1.4) / 80

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picQueenW.Hide()
                            picQueenW.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenW.BackColor = Color.FromArgb(R, G, B)
                            picQueenW.Show()
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picQueenW.Hide()
                            picQueenW.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenW.BackColor = Color.FromArgb(R, G, B)
                            picQueenW.Show()
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picQueenW.Hide()
                            picQueenW.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenW.BackColor = Color.FromArgb(R, G, B)
                            picQueenW.Show()
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picQueenW.Hide()
                            picQueenW.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picQueenW.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picQueenW.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picQueenW.BackColor = Color.FromArgb(R, G, B)
                            picQueenW.Show()
                            Turn = True
                            ShapesLocation()
                            picQueenW.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next
            ElseIf Shapes = 5 Then 'Black Bishop's #1 movement on the board
                ShapeLocationCol = (picBishopB1.Location.X + 1.4) / 80
                ShapeLocationRow = (picBishopB1.Location.Y + 1.4) / 80

                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picBishopB1.Hide()
                            picBishopB1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopB1.BackColor = Color.FromArgb(R, G, B)
                            picBishopB1.Show()
                            Turn = False
                            ShapesLocation()
                            picBishopB1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picBishopB1.Hide()
                            picBishopB1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopB1.BackColor = Color.FromArgb(R, G, B)
                            picBishopB1.Show()
                            Turn = False
                            ShapesLocation()
                            picBishopB1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

            ElseIf Shapes = 6 Then 'Black Bishop's #2 movement on the board
                ShapeLocationCol = (picBishopB2.Location.X + 1.4) / 80
                ShapeLocationRow = (picBishopB2.Location.Y + 1.4) / 80
                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picBishopB2.Hide()
                            picBishopB2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopB2.BackColor = Color.FromArgb(R, G, B)
                            picBishopB2.Show()
                            Turn = False
                            ShapesLocation()
                            picBishopB2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picBishopB2.Hide()
                            picBishopB2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picBishopB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopB2.BackColor = Color.FromArgb(R, G, B)
                            picBishopB2.Show()
                            Turn = False
                            ShapesLocation()
                            picBishopB2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next
            ElseIf Shapes = 7 Then 'White Bishop's #1 movement on the board
                ShapeLocationCol = (picBishopW1.Location.X + 1.4) / 80
                ShapeLocationRow = (picBishopW1.Location.Y + 1.4) / 80
                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picBishopW1.Hide()
                            picBishopW1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopW1.BackColor = Color.FromArgb(R, G, B)
                            picBishopW1.Show()
                            Turn = True
                            ShapesLocation()
                            picBishopW1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picBishopW1.Hide()
                            picBishopW1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopW1.BackColor = Color.FromArgb(R, G, B)
                            picBishopW1.Show()
                            Turn = True
                            ShapesLocation()
                            picBishopW1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next
            ElseIf Shapes = 8 Then 'White Bishop's #2 movement on the board
                ShapeLocationCol = (picBishopW2.Location.X + 1.4) / 80
                ShapeLocationRow = (picBishopW2.Location.Y + 1.4) / 80
                For i = -7 To 7

                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow + 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o + 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o + 1

                            Next
                            picBishopW2.Hide()
                            picBishopW2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopW2.BackColor = Color.FromArgb(R, G, B)
                            picBishopW2.Show()
                            Turn = True
                            ShapesLocation()
                            picBishopW2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                    If ColPick1 = ShapeLocationCol - i Then
                        If RowPick1 = ShapeLocationRow + i Then
                            o = ShapeLocationRow - 1
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub

                                End If
                                o = o - 1

                            Next
                            o = RowPick1
                            For j = ColPick1 To ShapeLocationCol - 1

                                If ShapeLocated(o, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                o = o - 1

                            Next
                            picBishopW2.Hide()
                            picBishopW2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picBishopW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picBishopW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picBishopW2.BackColor = Color.FromArgb(R, G, B)
                            picBishopW2.Show()
                            Turn = True
                            ShapesLocation()
                            picBishopW2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next
            ElseIf Shapes = 9 Then 'Black Knight's #1 movement on the board

                ShapeLocationCol = (picKnightB1.Location.X + 1.4) / 80
                ShapeLocationRow = (picKnightB1.Location.Y + 1.4) / 80
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightB1.Hide()
                                picKnightB1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightB1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightB1.BackColor = Color.FromArgb(R, G, B)
                                picKnightB1.Show()
                                Turn = False
                                ShapesLocation()
                                picKnightB1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightB1.Hide()
                                picKnightB1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightB1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightB1.BackColor = Color.FromArgb(R, G, B)
                                picKnightB1.Show()
                                Turn = False
                                ShapesLocation()
                                picKnightB1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 10 Then 'Black Knight's #2 movement on the board

                ShapeLocationCol = (picKnightB2.Location.X + 1.4) / 80
                ShapeLocationRow = (picKnightB2.Location.Y + 1.4) / 80
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightB2.Hide()
                                picKnightB2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightB2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightB2.BackColor = Color.FromArgb(R, G, B)
                                picKnightB2.Show()
                                Turn = False
                                ShapesLocation()
                                picKnightB2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightB2.Hide()
                                picKnightB2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picKnightB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightB2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightB2.BackColor = Color.FromArgb(R, G, B)
                                picKnightB2.Show()
                                Turn = False
                                ShapesLocation()
                                picKnightB2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 11 Then 'White Knight's #1 movement on the board

                ShapeLocationCol = (picKnightW1.Location.X + 1.4) / 80
                ShapeLocationRow = (picKnightW1.Location.Y + 1.4) / 80
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightW1.Hide()
                                picKnightW1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightW1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightW1.BackColor = Color.FromArgb(R, G, B)
                                picKnightW1.Show()
                                Turn = True
                                ShapesLocation()
                                picKnightW1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightW1.Hide()
                                picKnightW1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightW1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightW1.BackColor = Color.FromArgb(R, G, B)
                                picKnightW1.Show()
                                Turn = True
                                ShapesLocation()
                                picKnightW1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 12 Then 'White Knight's #2 movement on the board

                ShapeLocationCol = (picKnightW2.Location.X + 1.4) / 80
                ShapeLocationRow = (picKnightW2.Location.Y + 1.4) / 80
                For j = -2 To 2 Step 4
                    For i = -1 To 2 Step 2
                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightW2.Hide()
                                picKnightW2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightW2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightW2.BackColor = Color.FromArgb(R, G, B)
                                picKnightW2.Show()
                                Turn = True
                                ShapesLocation()
                                picKnightW2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

                For j = -1 To 1 Step 2
                    For i = -2 To 2 Step 4

                        If ColPick1 = ShapeLocationCol + i Then
                            If RowPick1 = ShapeLocationRow + j Then
                                picKnightW2.Hide()
                                picKnightW2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picKnightW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picKnightW2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picKnightW2.BackColor = Color.FromArgb(R, G, B)
                                picKnightW2.Show()
                                Turn = True
                                ShapesLocation()
                                picKnightW2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                Next

            ElseIf Shapes = 13 Then 'Black Rock's #1 movement on the board
                ShapeLocationCol = (picRockB1.Location.X + 1.4) / 80
                ShapeLocationRow = (picRockB1.Location.Y + 1.4) / 80


                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockB1.Hide()
                            picRockB1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockB1.BackColor = Color.FromArgb(R, G, B)
                            picRockB1.Show()
                            Turn = False
                            ShapesLocation()
                            picRockB1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB1MovesCount = RockB1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockB1.Hide()
                            picRockB1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockB1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockB1.BackColor = Color.FromArgb(R, G, B)
                            picRockB1.Show()
                            Turn = False
                            ShapesLocation()
                            picRockB1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB1MovesCount = RockB1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 14 Then 'Black Rock's #2 movement on the board
                ShapeLocationCol = (picRockB2.Location.X + 1.4) / 80
                ShapeLocationRow = (picRockB2.Location.Y + 1.4) / 80
                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockB2.Hide()
                            picRockB2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockB2.BackColor = Color.FromArgb(R, G, B)
                            picRockB2.Show()
                            Turn = False
                            ShapesLocation()
                            picRockB2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB2MovesCount = RockB2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockB2.Hide()
                            picRockB2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckB()
                            If KingBChecked = True Then
                                picRockB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockB2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockB2.BackColor = Color.FromArgb(R, G, B)
                            picRockB2.Show()
                            Turn = False
                            ShapesLocation()
                            picRockB2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockB2MovesCount = RockB2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckW()
                            CheckForMateW()
                            tmrTime2.Enabled = False
                            tmrTime1.Enabled = True
                            DrawChkW()
                            If MateWhite = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingWChecked = True Then
                                If MateBlack = False Then


                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True

                                End If
                            End If
                            Exit Sub
                        End If
                    End If
                Next

            ElseIf Shapes = 15 Then 'White Rock's #1 movement on the board
                ShapeLocationCol = (picRockW1.Location.X + 1.4) / 80
                ShapeLocationRow = (picRockW1.Location.Y + 1.4) / 80

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockW1.Hide()
                            picRockW1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockW1.BackColor = Color.FromArgb(R, G, B)
                            picRockW1.Show()
                            Turn = True
                            ShapesLocation()
                            picRockW1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW1MovesCount = RockW1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockW1.Hide()
                            picRockW1.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockW1.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockW1.BackColor = Color.FromArgb(R, G, B)
                            picRockW1.Show()
                            Turn = True
                            ShapesLocation()
                            picRockW1.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW1MovesCount = RockW1MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next


            ElseIf Shapes = 16 Then 'White Rock's #2 movement on the board
                ShapeLocationCol = (picRockW2.Location.X + 1.4) / 80
                ShapeLocationRow = (picRockW2.Location.Y + 1.4) / 80

                For j = -7 To 7
                    If ColPick1 = ShapeLocationCol Then
                        If RowPick1 = ShapeLocationRow + j Then
                            For i = ShapeLocationRow + 1 To RowPick1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For i = RowPick1 To ShapeLocationRow - 1
                                If ShapeLocated(i, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockW2.Hide()
                            picRockW2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockW2.BackColor = Color.FromArgb(R, G, B)
                            picRockW2.Show()
                            Turn = True
                            ShapesLocation()
                            picRockW2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW2MovesCount = RockW2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If

                    End If

                Next

                For i = -7 To 7
                    If ColPick1 = ShapeLocationCol + i Then
                        If RowPick1 = ShapeLocationRow Then
                            For j = ShapeLocationCol + 1 To ColPick1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If

                            Next
                            For j = ColPick1 To ShapeLocationCol - 1
                                If ShapeLocated(ShapeLocationRow, j) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                            Next
                            picRockW2.Hide()
                            picRockW2.Location = New Point(XPos, YPos)
                            ShapesLocation()
                            CheckForCheckW()
                            If KingWChecked = True Then
                                picRockW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                picRockW2.Show()
                                number = 0
                                UnselectAllShapes()
                                ShapesLocation()
                                Beep()
                                Exit Sub
                            End If
                            picRockW2.BackColor = Color.FromArgb(R, G, B)
                            picRockW2.Show()
                            Turn = True
                            ShapesLocation()
                            picRockW2.BorderStyle = BorderStyle.None
                            For s = 0 To 15
                                If PawnsTwoSquaresAhead(s) = False Then
                                    PawnsTwoSquaresAhead(s) = True
                                End If
                            Next
                            RockW2MovesCount = RockW2MovesCount + 1
                            BlackShapesLocation()
                            WhiteShapesLocation()
                            dgvChess.ClearSelection()
                            number = 0
                            UnselectAllShapes()
                            CheckForCheckB()
                            CheckForMateB()
                            tmrTime1.Enabled = False
                            tmrTime2.Enabled = True
                            DrawChkB()
                            If MateBlack = True Then
                                lblMate.Show()
                                Exit Sub
                            End If
                            If KingBChecked = True Then



                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True


                            End If
                            Exit Sub
                        End If
                    End If
                Next
            ElseIf Shapes = 17 Then 'Black Pawn's #1 movement on the board
                ShapeLocationCol = (picPawnB1.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB1.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #1
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB1.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB1.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB1.BorderStyle = BorderStyle.None
                                                picPawnB1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(0) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB1.Hide()
                                picPawnB1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB1.BackColor = Color.FromArgb(R, G, B)
                                picPawnB1.Show()
                                PawnsFirstMove(0) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(0) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB1.Hide()
                        picPawnB1.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB1.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If

                        picPawnB1.BackColor = Color.FromArgb(R, G, B)
                        picPawnB1.Show()
                        PawnsTwoSquaresAhead(0) = True
                        Turn = False
                        ShapesLocation()
                        picPawnB1.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB1.Location = New Point(757, 0)
                            picPawnB1.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 1
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 1
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 1
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 1
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 1
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 1
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 1
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 1
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()

                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If

                End If


            ElseIf Shapes = 18 Then 'Black Pawn's #2 movement on the board
                ShapeLocationCol = (picPawnB2.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB2.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then  ' Part of capturing the White pawn who made a two-squared move by Black Pawn #2
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB2.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB2.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB2.BorderStyle = BorderStyle.None
                                                picPawnB2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(1) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB2.Hide()
                                picPawnB2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB2.BackColor = Color.FromArgb(R, G, B)
                                picPawnB2.Show()
                                PawnsFirstMove(1) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(1) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB2.Hide()
                        picPawnB2.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB2.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(1) = True
                        picPawnB2.BackColor = Color.FromArgb(R, G, B)
                        picPawnB2.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB2.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB2.Location = New Point(757, 0)
                            picPawnB2.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 2
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 2
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 2
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 2
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 2
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 2
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 2
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 2
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If
                End If


            ElseIf Shapes = 19 Then 'Black Pawn's #3 movement on the board
                ShapeLocationCol = (picPawnB3.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB3.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #3
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB3.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB3.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB3.BorderStyle = BorderStyle.None
                                                picPawnB3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(2) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB3.Hide()
                                picPawnB3.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB3.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB3.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB3.BackColor = Color.FromArgb(R, G, B)
                                picPawnB3.Show()
                                PawnsFirstMove(2) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB3.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(2) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB3.Hide()
                        picPawnB3.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB3.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB3.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(2) = True
                        picPawnB3.BackColor = Color.FromArgb(R, G, B)
                        picPawnB3.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB3.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB3.Location = New Point(757, 0)
                            picPawnB3.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 3
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 3
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 3
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 3
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 3
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 3
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 3
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 3
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If
                End If


            ElseIf Shapes = 20 Then 'Black Pawn's #4 movement on the board
                ShapeLocationCol = (picPawnB4.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB4.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #4
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB4.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB4.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB4.BorderStyle = BorderStyle.None
                                                picPawnB4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(3) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB4.Hide()
                                picPawnB4.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB4.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB4.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB4.BackColor = Color.FromArgb(R, G, B)
                                picPawnB4.Show()
                                PawnsFirstMove(3) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB4.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(3) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub

                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB4.Hide()
                        picPawnB4.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB4.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB4.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(3) = True
                        picPawnB4.BackColor = Color.FromArgb(R, G, B)
                        picPawnB4.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB4.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB4.Location = New Point(757, 0)
                            picPawnB4.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 4
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 4
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 4
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 4
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 4
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 4
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 4
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 4
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub

                    End If
                End If


            ElseIf Shapes = 21 Then 'Black Pawn's #5 movement on the board
                ShapeLocationCol = (picPawnB5.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB5.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #5
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB5.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB5.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB5.BorderStyle = BorderStyle.None
                                                picPawnB5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(4) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB5.Hide()
                                picPawnB5.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB5.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB5.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB5.BackColor = Color.FromArgb(R, G, B)
                                picPawnB5.Show()
                                PawnsFirstMove(4) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB5.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(4) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub

                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB5.Hide()
                        picPawnB5.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB5.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB5.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(4) = True
                        picPawnB5.BackColor = Color.FromArgb(R, G, B)
                        picPawnB5.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB5.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB5.Location = New Point(757, 0)
                            picPawnB5.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 5
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 5
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 5
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 5
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 5
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 5
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 5
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 5
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub

                    End If
                End If


            ElseIf Shapes = 22 Then 'Black Pawn's #6 movement on the board
                ShapeLocationCol = (picPawnB6.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB6.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #6
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB6.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB6.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB6.BorderStyle = BorderStyle.None
                                                picPawnB6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(5) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB6.Hide()
                                picPawnB6.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB6.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB6.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB6.BackColor = Color.FromArgb(R, G, B)
                                picPawnB6.Show()
                                PawnsFirstMove(5) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB6.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(5) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub

                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB6.Hide()
                        picPawnB6.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB6.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB6.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(5) = True
                        picPawnB6.BackColor = Color.FromArgb(R, G, B)
                        picPawnB6.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB6.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB6.Location = New Point(757, 0)
                            picPawnB6.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 6
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 6
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 6
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 6
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 6
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 6
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 6
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 6
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If
                End If


            ElseIf Shapes = 23 Then 'Black Pawn's #7 movement on the board
                ShapeLocationCol = (picPawnB7.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB7.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #7
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB7.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB7.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB7.BorderStyle = BorderStyle.None
                                                picPawnB7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(6) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB7.Hide()
                                picPawnB7.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB7.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB7.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB7.BackColor = Color.FromArgb(R, G, B)
                                picPawnB7.Show()
                                PawnsFirstMove(6) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB7.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(6) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB7.Hide()
                        picPawnB7.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB7.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB7.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(6) = True
                        picPawnB7.BackColor = Color.FromArgb(R, G, B)
                        picPawnB7.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB7.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB7.Location = New Point(757, 0)
                            picPawnB7.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 7
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 7
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 7
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 7
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 7
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 7
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 7
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 7
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If
                End If


            ElseIf Shapes = 24 Then 'Black Pawn's #8 movement on the board
                ShapeLocationCol = (picPawnB8.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnB8.Location.Y + 1.4) / 80
                If ShapeLocationRow = 4 Then ' Part of capturing the White pawn who made a two-squared move by Black Pawn #8
                    For i = 8 To 15
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 8 Then
                                OriginalShapesPos(picPawnW1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW1.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW1.Width = 23
                                                picPawnW1.Height = 23
                                                picPawnW1.Location = New Point(648, 127)
                                                picPawnW1.Enabled = False
                                                picPawnW1.BackColor = Color.Transparent
                                                picPawnW1.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 9 Then
                                OriginalShapesPos(picPawnW2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW2.Show()
                                                    picPawnB8.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW2.Width = 23
                                                picPawnW2.Height = 23
                                                picPawnW2.Location = New Point(671, 127)
                                                picPawnW2.Enabled = False
                                                picPawnW2.BackColor = Color.Transparent
                                                picPawnW2.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 10 Then
                                OriginalShapesPos(picPawnW3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW3.Show()
                                                    picPawnB8.Show()

                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW3.Width = 23
                                                picPawnW3.Height = 23
                                                picPawnW3.Location = New Point(694, 127)
                                                picPawnW3.Enabled = False
                                                picPawnW3.BackColor = Color.Transparent
                                                picPawnW3.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()

                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 11 Then
                                OriginalShapesPos(picPawnW4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW4.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW4.Width = 23
                                                picPawnW4.Height = 23
                                                picPawnW4.Location = New Point(717, 127)
                                                picPawnW4.Enabled = False
                                                picPawnW4.BackColor = Color.Transparent
                                                picPawnW4.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 12 Then
                                OriginalShapesPos(picPawnW5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW5.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW5.Width = 23
                                                picPawnW5.Height = 23
                                                picPawnW5.Location = New Point(740, 127)
                                                picPawnW5.Enabled = False
                                                picPawnW5.BackColor = Color.Transparent
                                                picPawnW5.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 13 Then
                                OriginalShapesPos(picPawnW6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW6.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW6.Width = 23
                                                picPawnW6.Height = 23
                                                picPawnW6.Location = New Point(763, 127)
                                                picPawnW6.Enabled = False
                                                picPawnW6.BackColor = Color.Transparent
                                                picPawnW6.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 14 Then
                                OriginalShapesPos(picPawnW7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW7.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW7.Width = 23
                                                picPawnW7.Height = 23
                                                picPawnW7.Location = New Point(786, 127)
                                                picPawnW7.Enabled = False
                                                picPawnW7.BackColor = Color.Transparent
                                                picPawnW7.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 15 Then
                                OriginalShapesPos(picPawnW8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow + 1 Then
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point(757, 0)
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckB()
                                                If KingBChecked = True Then
                                                    picPawnB8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnW8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnW8.Show()
                                                    picPawnB8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken = True
                                                PointsWonBlack = PointsWonBlack + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnW8.Width = 23
                                                picPawnW8.Height = 23
                                                picPawnW8.Location = New Point(809, 127)
                                                picPawnW8.Enabled = False
                                                picPawnW8.BackColor = Color.Transparent
                                                picPawnW8.Show()
                                                Turn = False
                                                ShapesLocation()
                                                picPawnB8.BorderStyle = BorderStyle.None
                                                picPawnB8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckW()
                                                CheckForMateW()
                                                tmrTime2.Enabled = False
                                                tmrTime1.Enabled = True
                                                DrawChkW()
                                                If MateWhite = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingWChecked = True Then
                                                    If MateBlack = False Then


                                                        lblCheck.Show()
                                                        CheckTick = 0
                                                        tmrCheck.Enabled = True

                                                    End If
                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
                If PawnsFirstMove(7) = True Then
                    For i = 1 To 2
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow + 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnB8.Hide()
                                picPawnB8.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckB()
                                If KingBChecked = True Then
                                    picPawnB8.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnB8.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnB8.BackColor = Color.FromArgb(R, G, B)
                                picPawnB8.Show()
                                PawnsFirstMove(7) = False
                                Turn = False
                                ShapesLocation()
                                picPawnB8.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = 2 Then
                                    PawnsTwoSquaresAhead(7) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckW()
                                CheckForMateW()
                                tmrTime2.Enabled = False
                                tmrTime1.Enabled = True
                                DrawChkW()
                                If MateWhite = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingWChecked = True Then
                                    If MateBlack = False Then


                                        lblCheck.Show()
                                        CheckTick = 0
                                        tmrCheck.Enabled = True

                                    End If
                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow + 1 Then
                        picPawnB8.Hide()
                        picPawnB8.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckB()
                        If KingBChecked = True Then
                            picPawnB8.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnB8.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(7) = True
                        picPawnB8.BackColor = Color.FromArgb(R, G, B)
                        picPawnB8.Show()
                        Turn = False
                        ShapesLocation()
                        picPawnB8.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 7 Then
                            PointsWonBlack = PointsWonBlack + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 7 Then 'Process of promoting a Black Queen
                            picPawnB8.Location = New Point(757, 0)
                            picPawnB8.Hide()
                            If picQueenB1.Location.X = 757 Then
                                picQueenB1.BackColor = Color.FromArgb(R, G, B)
                                picQueenB1.Location = New Point(XPos, YPos)
                                picQueenB1.Show()
                                PawnReminder(0) = 8
                            ElseIf picQueenB2.Location.X = 757 Then
                                picQueenB2.BackColor = Color.FromArgb(R, G, B)
                                picQueenB2.Location = New Point(XPos, YPos)
                                picQueenB2.Show()
                                PawnReminder(1) = 8
                            ElseIf picQueenB3.Location.X = 757 Then
                                picQueenB3.BackColor = Color.FromArgb(R, G, B)
                                picQueenB3.Location = New Point(XPos, YPos)
                                picQueenB3.Show()
                                PawnReminder(2) = 8
                            ElseIf picQueenB4.Location.X = 757 Then
                                picQueenB4.BackColor = Color.FromArgb(R, G, B)
                                picQueenB4.Location = New Point(XPos, YPos)
                                picQueenB4.Show()
                                PawnReminder(3) = 8
                            ElseIf picQueenB5.Location.X = 757 Then
                                picQueenB5.BackColor = Color.FromArgb(R, G, B)
                                picQueenB5.Location = New Point(XPos, YPos)
                                picQueenB5.Show()
                                PawnReminder(4) = 8
                            ElseIf picQueenB6.Location.X = 757 Then
                                picQueenB6.BackColor = Color.FromArgb(R, G, B)
                                picQueenB6.Location = New Point(XPos, YPos)
                                picQueenB6.Show()
                                PawnReminder(5) = 8
                            ElseIf picQueenB7.Location.X = 757 Then
                                picQueenB7.BackColor = Color.FromArgb(R, G, B)
                                picQueenB7.Location = New Point(XPos, YPos)
                                picQueenB7.Show()
                                PawnReminder(6) = 8
                            ElseIf picQueenB8.Location.X = 757 Then
                                picQueenB8.BackColor = Color.FromArgb(R, G, B)
                                picQueenB8.Location = New Point(XPos, YPos)
                                picQueenB8.Show()
                                PawnReminder(7) = 8
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckW()
                        CheckForMateW()
                        tmrTime2.Enabled = False
                        tmrTime1.Enabled = True
                        DrawChkW()
                        If MateWhite = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingWChecked = True Then
                            If MateBlack = False Then


                                lblCheck.Show()
                                CheckTick = 0
                                tmrCheck.Enabled = True

                            End If
                        End If
                        Exit Sub
                    End If
                End If


            ElseIf Shapes = 25 Then 'White Pawn's #1 movement on the board
                ShapeLocationCol = (picPawnW1.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW1.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #1
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW1.Hide()
                                                picPawnW1.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW1.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW1.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW1.BorderStyle = BorderStyle.None
                                                picPawnW1.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(8) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW1.Hide()
                                picPawnW1.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW1.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW1.BackColor = Color.FromArgb(R, G, B)
                                picPawnW1.Show()
                                PawnsFirstMove(8) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW1.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(8) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW1.Hide()
                        picPawnW1.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW1.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW1.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(8) = True
                        picPawnW1.BackColor = Color.FromArgb(R, G, B)
                        picPawnW1.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW1.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW1.Location = New Point(757, 0)
                            picPawnW1.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 1
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 1
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 1
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 1
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 1
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 1
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 1
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 1
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 26 Then 'White Pawn's #2 movement on the board
                ShapeLocationCol = (picPawnW2.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW2.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #2
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW2.Hide()
                                                picPawnW2.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW2.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW2.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW2.BorderStyle = BorderStyle.None
                                                picPawnW2.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(9) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW2.Hide()
                                picPawnW2.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW2.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW2.BackColor = Color.FromArgb(R, G, B)
                                picPawnW2.Show()
                                PawnsFirstMove(9) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW2.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(9) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW2.Hide()
                        picPawnW2.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW2.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW2.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(9) = True
                        picPawnW2.BackColor = Color.FromArgb(R, G, B)
                        picPawnW2.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW2.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW2.Location = New Point(757, 0)
                            picPawnW2.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 2
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 2
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 2
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 2
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 2
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 2
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 2
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 2
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 27 Then 'White Pawn's #3 movement on the board
                ShapeLocationCol = (picPawnW3.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW3.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #3
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW3.Hide()
                                                picPawnW3.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW3.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW3.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW3.BorderStyle = BorderStyle.None
                                                picPawnW3.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(10) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW3.Hide()
                                picPawnW3.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW3.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW3.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW3.BackColor = Color.FromArgb(R, G, B)
                                picPawnW3.Show()
                                PawnsFirstMove(10) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW3.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(10) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW3.Hide()
                        picPawnW3.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW3.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW3.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(10) = True
                        picPawnW3.BackColor = Color.FromArgb(R, G, B)
                        picPawnW3.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW3.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW3.Location = New Point(757, 0)
                            picPawnW3.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 3
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 3
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 3
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 3
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 3
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 3
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 3
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 3
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 28 Then 'White Pawn's #4 movement on the board
                ShapeLocationCol = (picPawnW4.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW4.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #4
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW4.Hide()
                                                picPawnW4.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW4.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW4.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW4.BorderStyle = BorderStyle.None
                                                picPawnW4.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(11) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW4.Hide()
                                picPawnW4.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW4.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW4.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW4.BackColor = Color.FromArgb(R, G, B)
                                picPawnW4.Show()
                                PawnsFirstMove(11) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW4.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(11) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW4.Hide()
                        picPawnW4.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW4.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW4.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(11) = True
                        picPawnW4.BackColor = Color.FromArgb(R, G, B)
                        picPawnW4.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW4.BorderStyle = BorderStyle.None

                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW4.Location = New Point(757, 0)
                            picPawnW4.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 4
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 4
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 4
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 4
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 4
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 4
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 4
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 4
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 29 Then 'White Pawn's #5 movement on the board
                ShapeLocationCol = (picPawnW5.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW5.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #5
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW5.Hide()
                                                picPawnW5.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW5.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW5.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW5.BorderStyle = BorderStyle.None
                                                picPawnW5.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(12) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW5.Hide()
                                picPawnW5.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW5.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW5.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW5.BackColor = Color.FromArgb(R, G, B)
                                picPawnW5.Show()
                                PawnsFirstMove(12) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW5.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(12) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW5.Hide()
                        picPawnW5.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW5.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW5.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(12) = True
                        picPawnW5.BackColor = Color.FromArgb(R, G, B)
                        picPawnW5.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW5.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW5.Location = New Point(757, 0)
                            picPawnW5.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 5
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 5
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 5
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 5
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 5
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 5
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 5
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 5
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 30 Then 'White Pawn's #6 movement on the board
                ShapeLocationCol = (picPawnW6.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW6.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #6
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW6.Hide()
                                                picPawnW6.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW6.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW6.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW6.BorderStyle = BorderStyle.None
                                                picPawnW6.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(13) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW6.Hide()
                                picPawnW6.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW6.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW6.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW6.BackColor = Color.FromArgb(R, G, B)
                                picPawnW6.Show()
                                PawnsFirstMove(13) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW6.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(13) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW6.Hide()
                        picPawnW6.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW6.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW6.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(13) = True
                        picPawnW6.BackColor = Color.FromArgb(R, G, B)
                        picPawnW6.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW6.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW6.Location = New Point(757, 0)
                            picPawnW6.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 6
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 6
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 6
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 6
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 6
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 6
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 6
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 6
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 31 Then 'White Pawn's #7 movement on the board
                ShapeLocationCol = (picPawnW7.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW7.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #7
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW7.Hide()
                                                picPawnW7.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW7.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW7.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW7.BorderStyle = BorderStyle.None
                                                picPawnW7.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(14) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW7.Hide()
                                picPawnW7.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW7.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW7.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW7.BackColor = Color.FromArgb(R, G, B)
                                picPawnW7.Show()
                                PawnsFirstMove(14) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW7.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(14) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW7.Hide()
                        picPawnW7.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW7.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW7.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(14) = True
                        picPawnW7.BackColor = Color.FromArgb(R, G, B)
                        picPawnW7.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW7.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW7.Location = New Point(757, 0)
                            picPawnW7.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 7
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 7
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 7
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 7
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 7
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 7
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 7
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 7
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If
            ElseIf Shapes = 32 Then 'White Pawn's #8 movement on the board
                ShapeLocationCol = (picPawnW8.Location.X + 1.4) / 80
                ShapeLocationRow = (picPawnW8.Location.Y + 1.4) / 80
                If ShapeLocationRow = 3 Then ' Part of capturing the Black pawn who made a two-squared move by White Pawn #8
                    For i = 0 To 7
                        If PawnsTwoSquaresAhead(i) = False Then
                            If i = 0 Then
                                OriginalShapesPos(picPawnB1)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB1.Hide()
                                                picPawnB1.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB1.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB1.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB1.Width = 23
                                                picPawnB1.Height = 23
                                                picPawnB1.Location = New Point(648, 481)
                                                picPawnB1.Enabled = False
                                                picPawnB1.BackColor = Color.Transparent
                                                picPawnB1.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 1 Then
                                OriginalShapesPos(picPawnB2)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB2.Hide()
                                                picPawnB2.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB2.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB2.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB2.Width = 23
                                                picPawnB2.Height = 23
                                                picPawnB2.Location = New Point(671, 481)
                                                picPawnB2.Enabled = False
                                                picPawnB2.BackColor = Color.Transparent
                                                picPawnB2.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 2 Then
                                OriginalShapesPos(picPawnB3)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB3.Hide()
                                                picPawnB3.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB3.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB3.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB3.Width = 23
                                                picPawnB3.Height = 23
                                                picPawnB3.Location = New Point(694, 481)
                                                picPawnB3.Enabled = False
                                                picPawnB3.BackColor = Color.Transparent
                                                picPawnB3.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 3 Then
                                OriginalShapesPos(picPawnB4)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB4.Hide()
                                                picPawnB4.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB4.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB4.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB4.Width = 23
                                                picPawnB4.Height = 23
                                                picPawnB4.Location = New Point(717, 481)
                                                picPawnB4.Enabled = False
                                                picPawnB4.BackColor = Color.Transparent
                                                picPawnB4.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 4 Then
                                OriginalShapesPos(picPawnB5)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB5.Hide()
                                                picPawnB5.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB5.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB5.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB5.Width = 23
                                                picPawnB5.Height = 23
                                                picPawnB5.Location = New Point(740, 481)
                                                picPawnB5.Enabled = False
                                                picPawnB5.BackColor = Color.Transparent
                                                picPawnB5.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 5 Then
                                OriginalShapesPos(picPawnB6)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB6.Hide()
                                                picPawnB6.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB6.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB6.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB6.Width = 23
                                                picPawnB6.Height = 23
                                                picPawnB6.Location = New Point(763, 481)
                                                picPawnB6.Enabled = False
                                                picPawnB6.BackColor = Color.Transparent
                                                picPawnB6.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 6 Then
                                OriginalShapesPos(picPawnB7)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB7.Hide()
                                                picPawnB7.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB7.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB7.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB7.Width = 23
                                                picPawnB7.Height = 23
                                                picPawnB7.Location = New Point(786, 481)
                                                picPawnB7.Enabled = False
                                                picPawnB7.BackColor = Color.Transparent
                                                picPawnB7.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            ElseIf i = 7 Then
                                OriginalShapesPos(picPawnB8)
                                For j = -1 To 1 Step 2
                                    If ShapeLocationCol + j = Int((OriginalPosX + 1.4) / 80) Then
                                        If ColPick1 = ShapeLocationCol + j Then
                                            If RowPick1 = ShapeLocationRow - 1 Then
                                                picPawnB8.Hide()
                                                picPawnB8.Location = New Point(757, 0)
                                                picPawnW8.Hide()
                                                picPawnW8.Location = New Point((ColPick1 * 80) + 1.4, (RowPick1 * 80) + 1.4)
                                                ShapesLocation()
                                                WhiteShapesLocation()
                                                BlackShapesLocation()
                                                CheckForCheckW()
                                                If KingWChecked = True Then
                                                    picPawnW8.Location = New Point((ShapeLocationCol * 80) + 1.4, (ShapeLocationRow * 80) + 1.4)
                                                    picPawnB8.Location = New Point(OriginalPosX, OriginalPosY)
                                                    picPawnB8.Show()
                                                    picPawnW8.Show()
                                                    number = 0
                                                    UnselectAllShapes()
                                                    ShapesLocation()
                                                    WhiteShapesLocation()
                                                    BlackShapesLocation()
                                                    Beep()
                                                    Exit Sub
                                                End If
                                                Taken2 = True
                                                PointsWonWhite = PointsWonWhite + 1
                                                If PointsWonWhite > PointsWonBlack Then
                                                    PointsWonWhite = PointsWonWhite - PointsWonBlack
                                                    PointsWonBlack = 0
                                                ElseIf PointsWonWhite <= PointsWonBlack Then
                                                    PointsWonBlack = PointsWonBlack - PointsWonWhite
                                                    PointsWonWhite = 0

                                                End If
                                                picPawnB8.Width = 23
                                                picPawnB8.Height = 23
                                                picPawnB8.Location = New Point(809, 481)
                                                picPawnB8.Enabled = False
                                                picPawnB8.BackColor = Color.Transparent
                                                picPawnB8.Show()
                                                Turn = True
                                                ShapesLocation()
                                                picPawnW8.BorderStyle = BorderStyle.None
                                                picPawnW8.Show()
                                                For s = 0 To 15
                                                    If PawnsTwoSquaresAhead(s) = False Then
                                                        PawnsTwoSquaresAhead(s) = True
                                                    End If
                                                Next
                                                BlackShapesLocation()
                                                WhiteShapesLocation()
                                                dgvChess.ClearSelection()
                                                number = 0
                                                UnselectAllShapes()
                                                CheckForCheckB()
                                                CheckForMateB()
                                                tmrTime1.Enabled = False
                                                tmrTime2.Enabled = True
                                                DrawChkB()
                                                If MateBlack = True Then
                                                    lblMate.Show()
                                                    Exit Sub
                                                End If
                                                If KingBChecked = True Then



                                                    lblCheck.Show()
                                                    CheckTick = 0
                                                    tmrCheck.Enabled = True


                                                End If
                                                Exit Sub
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                If PawnsFirstMove(15) = True Then
                    For i = -2 To -1
                        If ColPick1 = ShapeLocationCol Then
                            If RowPick1 = ShapeLocationRow + i Then

                                o = ShapeLocationRow - 1
                                If ShapeLocated(o, ShapeLocationCol) = False Then
                                    dgvChess.ClearSelection()
                                    number = 0
                                    UnselectAllShapes()
                                    Exit Sub
                                End If
                                picPawnW8.Hide()
                                picPawnW8.Location = New Point(XPos, YPos)
                                ShapesLocation()
                                CheckForCheckW()
                                If KingWChecked = True Then
                                    picPawnW8.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                                    picPawnW8.Show()
                                    number = 0
                                    UnselectAllShapes()
                                    ShapesLocation()
                                    Beep()
                                    Exit Sub
                                End If
                                picPawnW8.BackColor = Color.FromArgb(R, G, B)
                                picPawnW8.Show()
                                PawnsFirstMove(15) = False
                                Turn = True
                                ShapesLocation()
                                picPawnW8.BorderStyle = BorderStyle.None
                                For s = 0 To 15
                                    If PawnsTwoSquaresAhead(s) = False Then
                                        PawnsTwoSquaresAhead(s) = True
                                    End If
                                Next
                                If i = -2 Then
                                    PawnsTwoSquaresAhead(15) = False
                                End If
                                BlackShapesLocation()
                                WhiteShapesLocation()
                                dgvChess.ClearSelection()
                                number = 0
                                UnselectAllShapes()
                                CheckForCheckB()
                                CheckForMateB()
                                tmrTime1.Enabled = False
                                tmrTime2.Enabled = True
                                DrawChkB()
                                If MateBlack = True Then
                                    lblMate.Show()
                                    Exit Sub
                                End If
                                If KingBChecked = True Then



                                    lblCheck.Show()
                                    CheckTick = 0
                                    tmrCheck.Enabled = True


                                End If
                                Exit Sub
                            End If
                        End If
                    Next
                End If
                If ColPick1 = ShapeLocationCol Then
                    If RowPick1 = ShapeLocationRow - 1 Then
                        picPawnW8.Hide()
                        picPawnW8.Location = New Point(XPos, YPos)
                        ShapesLocation()
                        CheckForCheckW()
                        If KingWChecked = True Then
                            picPawnW8.Location = New Point(ShapeLocationCol * 80 + 1.4, ShapeLocationRow * 80 + 1.4)
                            picPawnW8.Show()
                            number = 0
                            UnselectAllShapes()
                            ShapesLocation()
                            Beep()
                            Exit Sub
                        End If
                        PawnsTwoSquaresAhead(15) = True
                        picPawnW8.BackColor = Color.FromArgb(R, G, B)
                        picPawnW8.Show()
                        Turn = True
                        ShapesLocation()
                        picPawnW8.BorderStyle = BorderStyle.None
                        For s = 0 To 15
                            If PawnsTwoSquaresAhead(s) = False Then
                                PawnsTwoSquaresAhead(s) = True
                            End If
                        Next
                        If RowPick1 = 0 Then
                            PointsWonWhite = PointsWonWhite + 8
                            If PointsWonWhite > PointsWonBlack Then
                                PointsWonWhite = PointsWonWhite - PointsWonBlack
                                PointsWonBlack = 0
                            ElseIf PointsWonWhite <= PointsWonBlack Then
                                PointsWonBlack = PointsWonBlack - PointsWonWhite
                                PointsWonWhite = 0

                            End If
                        End If
                        If RowPick1 = 0 Then 'Process of promoting a White Queen
                            picPawnW8.Location = New Point(757, 0)
                            picPawnW8.Hide()
                            If picQueenW1.Location.X = 757 Then
                                picQueenW1.BackColor = Color.FromArgb(R, G, B)
                                picQueenW1.Location = New Point(XPos, YPos)
                                picQueenW1.Show()
                                PawnReminder(8) = 8
                            ElseIf picQueenW2.Location.X = 757 Then
                                picQueenW2.BackColor = Color.FromArgb(R, G, B)
                                picQueenW2.Location = New Point(XPos, YPos)
                                picQueenW2.Show()
                                PawnReminder(9) = 8
                            ElseIf picQueenW3.Location.X = 757 Then
                                picQueenW3.BackColor = Color.FromArgb(R, G, B)
                                picQueenW3.Location = New Point(XPos, YPos)
                                picQueenW3.Show()
                                PawnReminder(10) = 8
                            ElseIf picQueenW4.Location.X = 757 Then
                                picQueenW4.BackColor = Color.FromArgb(R, G, B)
                                picQueenW4.Location = New Point(XPos, YPos)
                                picQueenW4.Show()
                                PawnReminder(11) = 8
                            ElseIf picQueenW5.Location.X = 757 Then
                                picQueenW5.BackColor = Color.FromArgb(R, G, B)
                                picQueenW5.Location = New Point(XPos, YPos)
                                picQueenW5.Show()
                                PawnReminder(12) = 8
                            ElseIf picQueenW6.Location.X = 757 Then
                                picQueenW6.BackColor = Color.FromArgb(R, G, B)
                                picQueenW6.Location = New Point(XPos, YPos)
                                picQueenW6.Show()
                                PawnReminder(13) = 8
                            ElseIf picQueenW7.Location.X = 757 Then
                                picQueenW7.BackColor = Color.FromArgb(R, G, B)
                                picQueenW7.Location = New Point(XPos, YPos)
                                picQueenW7.Show()
                                PawnReminder(14) = 8
                            ElseIf picQueenW8.Location.X = 757 Then
                                picQueenW8.BackColor = Color.FromArgb(R, G, B)
                                picQueenW8.Location = New Point(XPos, YPos)
                                picQueenW8.Show()
                                PawnReminder(15) = 8
                            End If
                        End If
                        ShapesLocation()
                        BlackShapesLocation()
                        WhiteShapesLocation()
                        dgvChess.ClearSelection()
                        number = 0
                        UnselectAllShapes()
                        CheckForCheckB()
                        CheckForMateB()
                        tmrTime1.Enabled = False
                        tmrTime2.Enabled = True
                        DrawChkB()
                        If MateBlack = True Then
                            lblMate.Show()
                            Exit Sub
                        End If
                        If KingBChecked = True Then



                            lblCheck.Show()
                            CheckTick = 0
                            tmrCheck.Enabled = True


                        End If
                        Exit Sub
                    End If
                End If

            ElseIf Shapes = 33 Then 'Black Pawn's #1 movement on the board
                QueensBMoves(picQueenB1, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 34 Then 'Black Pawn's #2 movement on the board
                QueensBMoves(picQueenB2, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 35 Then 'Black Pawn's #3 movement on the board
                QueensBMoves(picQueenB3, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 36 Then 'Black Pawn's #4 movement on the board
                QueensBMoves(picQueenB4, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 37 Then 'Black Pawn's #5 movement on the board
                QueensBMoves(picQueenB5, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 38 Then 'Black Pawn's #6 movement on the board
                QueensBMoves(picQueenB6, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 39 Then 'Black Pawn's #7 movement on the board
                QueensBMoves(picQueenB7, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 40 Then 'Black Pawn's #8 movement on the board
                QueensBMoves(picQueenB8, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 41 Then 'White Pawn's #1 movement on the board
                QueensWMoves(picQueenW1, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 42 Then 'White Pawn's #2 movement on the board
                QueensWMoves(picQueenW2, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 43 Then 'White Pawn's #3 movement on the board
                QueensWMoves(picQueenW3, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 44 Then 'White Pawn's #4 movement on the board
                QueensWMoves(picQueenW4, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 45 Then 'White Pawn's #5 movement on the board
                QueensWMoves(picQueenW5, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 46 Then 'White Pawn's #6 movement on the board
                QueensWMoves(picQueenW6, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 47 Then 'White Pawn's #7 movement on the board
                QueensWMoves(picQueenW7, RowPick1, ColPick1, R, G, B, XPos, YPos)
            ElseIf Shapes = 48 Then 'White Pawn's #8 movement on the board
                QueensWMoves(picQueenW8, RowPick1, ColPick1, R, G, B, XPos, YPos)
            End If
        End If
        number = 0
        UnselectAllShapes()

    End Sub

    Private Sub picKingB_Click1(ByVal sender As Object, ByVal e As System.EventArgs) Handles picKingB.Click

        BlackTakenShape(picKingB)
        If Taken2 = True Then
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 1
        number = number + 1
        SelectedShape(picKingB)
    End Sub

    Private Sub picKingW_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles picKingW.Click

        WhiteTakenShape(picKingW)
        If Taken = True Then
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 2
        number = number + 1
        SelectedShape(picKingW)
    End Sub

    Private Sub picQueenB_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB.Click

        BlackTakenShape(picQueenB)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picQueenB.Width = 23
            picQueenB.Height = 23
            picQueenB.Location = New Point(648, 505)
            picQueenB.Enabled = False
            picQueenB.BackColor = Color.Transparent
            picQueenB.Show()
            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub

        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 3
        number = number + 1
        SelectedShape(picQueenB)
    End Sub

    Private Sub picQueenW_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW.Click

        WhiteTakenShape(picQueenW)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picQueenW.Width = 23
            picQueenW.Height = 23
            picQueenW.Location = New Point(648, 151)
            picQueenW.Enabled = False
            picQueenW.BackColor = Color.Transparent
            picQueenW.Show()
            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 4
        number = number + 1
        SelectedShape(picQueenW)
    End Sub

    Private Sub picBishopB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picBishopB1.Click

        BlackTakenShape(picBishopB1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picBishopB1.Width = 23
            picBishopB1.Height = 23
            picBishopB1.Location = New Point(671, 505)
            picBishopB1.Enabled = False
            picBishopB1.BackColor = Color.Transparent
            picBishopB1.Show()
            PointsWonWhite = PointsWonWhite + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 5
        number = number + 1
        SelectedShape(picBishopB1)
    End Sub

    Private Sub picBishopB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picBishopB2.Click

        BlackTakenShape(picBishopB2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picBishopB2.Width = 23
            picBishopB2.Height = 23
            picBishopB2.Location = New Point(694, 505)
            picBishopB2.Enabled = False
            picBishopB2.BackColor = Color.Transparent
            picBishopB2.Show()
            PointsWonWhite = PointsWonWhite + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 6
        number = number + 1
        SelectedShape(picBishopB2)
    End Sub

    Private Sub picBishopW1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picBishopW1.Click

        WhiteTakenShape(picBishopW1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picBishopW1.Width = 23
            picBishopW1.Height = 23
            picBishopW1.Location = New Point(671, 151)
            picBishopW1.Enabled = False
            picBishopW1.BackColor = Color.Transparent
            picBishopW1.Show()
            PointsWonBlack = PointsWonBlack + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 7
        number = number + 1
        SelectedShape(picBishopW1)
    End Sub

    Private Sub picBishopW2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picBishopW2.Click

        WhiteTakenShape(picBishopW2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picBishopW2.Width = 23
            picBishopW2.Height = 23
            picBishopW2.Location = New Point(694, 151)
            picBishopW2.Enabled = False
            picBishopW2.BackColor = Color.Transparent
            picBishopW2.Show()
            PointsWonBlack = PointsWonBlack + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 8
        number = number + 1
        SelectedShape(picBishopW2)
    End Sub

    Private Sub picKnightB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picKnightB1.Click

        BlackTakenShape(picKnightB1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picKnightB1.Width = 23
            picKnightB1.Height = 23
            picKnightB1.Location = New Point(717, 505)
            picKnightB1.Enabled = False
            picKnightB1.BackColor = Color.Transparent
            picKnightB1.Show()
            PointsWonWhite = PointsWonWhite + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 9
        number = number + 1
        SelectedShape(picKnightB1)
    End Sub

    Private Sub picKnightB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picKnightB2.Click

        BlackTakenShape(picKnightB2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picKnightB2.Width = 23
            picKnightB2.Height = 23
            picKnightB2.Location = New Point(740, 505)
            picKnightB2.Enabled = False
            picKnightB2.BackColor = Color.Transparent
            picKnightB2.Show()
            PointsWonWhite = PointsWonWhite + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 10
        number = number + 1
        SelectedShape(picKnightB2)
    End Sub

    Private Sub picKnightW1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picKnightW1.Click

        WhiteTakenShape(picKnightW1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picKnightW1.Width = 23
            picKnightW1.Height = 23
            picKnightW1.Location = New Point(717, 151)
            picKnightW1.Enabled = False
            picKnightW1.BackColor = Color.Transparent
            picKnightW1.Show()
            PointsWonBlack = PointsWonBlack + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 11
        number = number + 1
        SelectedShape(picKnightW1)
    End Sub

    Private Sub picKnightW2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picKnightW2.Click

        WhiteTakenShape(picKnightW2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picKnightW2.Width = 23
            picKnightW2.Height = 23
            picKnightW2.Location = New Point(740, 151)
            picKnightW2.Enabled = False
            picKnightW2.BackColor = Color.Transparent
            picKnightW2.Show()
            PointsWonBlack = PointsWonBlack + 3
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 12
        number = number + 1
        SelectedShape(picKnightW2)
    End Sub

    Private Sub picRockB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picRockB1.Click

        BlackTakenShape(picRockB1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            RockB1MovesCount = RockB1MovesCount + 1
            picRockB1.Width = 23
            picRockB1.Height = 23
            picRockB1.Location = New Point(763, 505)
            picRockB1.Enabled = False
            picRockB1.BackColor = Color.Transparent
            picRockB1.Show()
            PointsWonWhite = PointsWonWhite + 5
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 13
        number = number + 1
        SelectedShape(picRockB1)
    End Sub

    Private Sub picRockB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picRockB2.Click

        BlackTakenShape(picRockB2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            RockB2MovesCount = RockB2MovesCount + 1
            picRockB2.Width = 23
            picRockB2.Height = 23
            picRockB2.Location = New Point(786, 505)
            picRockB2.Enabled = False
            picRockB2.BackColor = Color.Transparent
            picRockB2.Show()
            PointsWonWhite = PointsWonWhite + 5
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 14
        number = number + 1
        SelectedShape(picRockB2)
    End Sub

    Private Sub picRockW1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picRockW1.Click

        WhiteTakenShape(picRockW1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            RockW1MovesCount = RockW1MovesCount + 1
            picRockW1.Width = 23
            picRockW1.Height = 23
            picRockW1.Location = New Point(763, 151)
            picRockW1.Enabled = False
            picRockW1.BackColor = Color.Transparent
            picRockW1.Show()
            PointsWonBlack = PointsWonBlack + 5
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 15
        number = number + 1
        SelectedShape(picRockW1)
    End Sub

    Private Sub picRockW2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picRockW2.Click

        WhiteTakenShape(picRockW2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            RockW2MovesCount = RockW2MovesCount + 1
            picRockW2.Width = 23
            picRockW2.Height = 23
            picRockW2.Location = New Point(786, 151)
            picRockW2.Enabled = False
            picRockW2.BackColor = Color.Transparent
            picRockW2.Show()
            PointsWonBlack = PointsWonBlack + 5
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 16
        number = number + 1
        SelectedShape(picRockW2)
    End Sub

    Private Sub picPawnB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB1.Click

        BlackTakenShape(picPawnB1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB1.Width = 23
            picPawnB1.Height = 23
            picPawnB1.Location = New Point(648, 481)
            picPawnB1.Enabled = False
            picPawnB1.BackColor = Color.Transparent
            picPawnB1.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 17
        number = number + 1
        SelectedShape(picPawnB1)
    End Sub

    Private Sub picPawnB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB2.Click

        BlackTakenShape(picPawnB2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB2.Width = 23
            picPawnB2.Height = 23
            picPawnB2.Location = New Point(671, 481)
            picPawnB2.Enabled = False
            picPawnB2.BackColor = Color.Transparent
            picPawnB2.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 18
        number = number + 1
        SelectedShape(picPawnB2)
    End Sub

    Private Sub picPawnB3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB3.Click

        BlackTakenShape(picPawnB3)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB3.Width = 23
            picPawnB3.Height = 23
            picPawnB3.Location = New Point(694, 481)
            picPawnB3.Enabled = False
            picPawnB3.BackColor = Color.Transparent
            picPawnB3.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 19
        number = number + 1
        SelectedShape(picPawnB3)
    End Sub

    Private Sub picPawnB4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB4.Click

        BlackTakenShape(picPawnB4)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB4.Width = 23
            picPawnB4.Height = 23
            picPawnB4.Location = New Point(717, 481)
            picPawnB4.Enabled = False
            picPawnB4.BackColor = Color.Transparent
            picPawnB4.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 20
        number = number + 1
        SelectedShape(picPawnB4)
    End Sub

    Private Sub picPawnB5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB5.Click

        BlackTakenShape(picPawnB5)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB5.Width = 23
            picPawnB5.Height = 23
            picPawnB5.Location = New Point(740, 481)
            picPawnB5.Enabled = False
            picPawnB5.BackColor = Color.Transparent
            picPawnB5.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 21
        number = number + 1
        SelectedShape(picPawnB5)
    End Sub

    Private Sub picPawnB6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB6.Click

        BlackTakenShape(picPawnB6)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB6.Width = 23
            picPawnB6.Height = 23
            picPawnB6.Location = New Point(763, 481)
            picPawnB6.Enabled = False
            picPawnB6.BackColor = Color.Transparent
            picPawnB6.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 22
        number = number + 1
        SelectedShape(picPawnB6)
    End Sub

    Private Sub picPawnB7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB7.Click

        BlackTakenShape(picPawnB7)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB7.Width = 23
            picPawnB7.Height = 23
            picPawnB7.Location = New Point(786, 481)
            picPawnB7.Enabled = False
            picPawnB7.BackColor = Color.Transparent
            picPawnB7.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 23

        number = number + 1
        SelectedShape(picPawnB7)
    End Sub

    Private Sub picPawnB8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnB8.Click

        BlackTakenShape(picPawnB8)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            picPawnB8.Width = 23
            picPawnB8.Height = 23
            picPawnB8.Location = New Point(809, 481)
            picPawnB8.Enabled = False
            picPawnB8.BackColor = Color.Transparent
            picPawnB8.Show()
            PointsWonWhite = PointsWonWhite + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 24
        number = number + 1
        SelectedShape(picPawnB8)
    End Sub

    Private Sub picPawnW1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW1.Click

        WhiteTakenShape(picPawnW1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW1.Width = 23
            picPawnW1.Height = 23
            picPawnW1.Location = New Point(648, 127)
            picPawnW1.Enabled = False
            picPawnW1.BackColor = Color.Transparent
            picPawnW1.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 25
        number = number + 1
        SelectedShape(picPawnW1)
    End Sub

    Private Sub picPawnW2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW2.Click

        WhiteTakenShape(picPawnW2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW2.Width = 23
            picPawnW2.Height = 23
            picPawnW2.Location = New Point(671, 127)
            picPawnW2.Enabled = False
            picPawnW2.BackColor = Color.Transparent
            picPawnW2.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 26
        number = number + 1
        SelectedShape(picPawnW2)
    End Sub

    Private Sub picPawnW3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW3.Click

        WhiteTakenShape(picPawnW3)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW3.Width = 23
            picPawnW3.Height = 23
            picPawnW3.Location = New Point(694, 127)
            picPawnW3.Enabled = False
            picPawnW3.BackColor = Color.Transparent
            picPawnW3.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 27
        number = number + 1
        SelectedShape(picPawnW3)
    End Sub

    Private Sub picPawnW4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW4.Click

        WhiteTakenShape(picPawnW4)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW4.Width = 23
            picPawnW4.Height = 23
            picPawnW4.Location = New Point(717, 127)
            picPawnW4.Enabled = False
            picPawnW4.BackColor = Color.Transparent
            picPawnW4.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 28
        number = number + 1
        SelectedShape(picPawnW4)
    End Sub

    Private Sub picPawnW5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW5.Click

        WhiteTakenShape(picPawnW5)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW5.Width = 23
            picPawnW5.Height = 23
            picPawnW5.Location = New Point(740, 127)
            picPawnW5.Enabled = False
            picPawnW5.BackColor = Color.Transparent
            picPawnW5.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 29
        number = number + 1
        SelectedShape(picPawnW5)

    End Sub

    Private Sub picPawnW6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW6.Click

        WhiteTakenShape(picPawnW6)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW6.Width = 23
            picPawnW6.Height = 23
            picPawnW6.Location = New Point(763, 127)
            picPawnW6.Enabled = False
            picPawnW6.BackColor = Color.Transparent
            picPawnW6.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 30
        number = number + 1
        SelectedShape(picPawnW6)
    End Sub

    Private Sub picPawnW7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW7.Click

        WhiteTakenShape(picPawnW7)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW7.Width = 23
            picPawnW7.Height = 23
            picPawnW7.Location = New Point(786, 127)
            picPawnW7.Enabled = False
            picPawnW7.BackColor = Color.Transparent
            picPawnW7.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 31

        number = number + 1
        SelectedShape(picPawnW7)
    End Sub

    Private Sub picPawnW8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picPawnW8.Click

        WhiteTakenShape(picPawnW8)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            picPawnW8.Width = 23
            picPawnW8.Height = 23
            picPawnW8.Location = New Point(809, 127)
            picPawnW8.Enabled = False
            picPawnW8.BackColor = Color.Transparent
            picPawnW8.Show()
            PointsWonBlack = PointsWonBlack + 1
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 32
        number = number + 1
        SelectedShape(picPawnW8)
    End Sub

    Private Sub picQueenB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB1.Click
        BlackTakenShape(picQueenB1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            If PawnReminder(0) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(0) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(0) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(0) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(0) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(0) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(0) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(0) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 33
        number = number + 1
        SelectedShape(picQueenB1)
    End Sub

    Private Sub picQueenB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB2.Click
        BlackTakenShape(picQueenB2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            If PawnReminder(1) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(1) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(1) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(1) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(1) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(1) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(1) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(1) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If


            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 34
        number = number + 1
        SelectedShape(picQueenB2)
    End Sub

    Private Sub picQueenB3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB3.Click
        BlackTakenShape(picQueenB3)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then

            If PawnReminder(2) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(2) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(2) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(2) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(2) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(2) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(2) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(2) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 35
        number = number + 1
        SelectedShape(picQueenB3)
    End Sub

    Private Sub picQueenB4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB4.Click
        BlackTakenShape(picQueenB4)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then

            If PawnReminder(3) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(3) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(3) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(3) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(3) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(3) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(3) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(3) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 36
        number = number + 1
        SelectedShape(picQueenB4)
    End Sub

    Private Sub picQueenB5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB5.Click
        BlackTakenShape(picQueenB5)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            If PawnReminder(4) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(4) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(4) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(4) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(4) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(4) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(4) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(4) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 37
        number = number + 1
        SelectedShape(picQueenB5)
    End Sub

    Private Sub picQueenB6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB6.Click
        BlackTakenShape(picQueenB6)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            If PawnReminder(5) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(5) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(5) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(5) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(5) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(5) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(5) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(5) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 38
        number = number + 1
        SelectedShape(picQueenB6)
    End Sub

    Private Sub picQueenB7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB7.Click
        BlackTakenShape(picQueenB7)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then
            If PawnReminder(6) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(6) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(6) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(6) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(6) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(6) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(6) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(6) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If


            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 39
        number = number + 1
        SelectedShape(picQueenB7)
    End Sub

    Private Sub picQueenB8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenB8.Click
        BlackTakenShape(picQueenB8)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken2 = True Then

            If PawnReminder(7) = 1 Then
                picPawnB1.Width = 23
                picPawnB1.Height = 23
                picPawnB1.Location = New Point(648, 481)
                picPawnB1.Enabled = False
                picPawnB1.BackColor = Color.Transparent
                picPawnB1.Show()
            ElseIf PawnReminder(7) = 2 Then
                picPawnB2.Width = 23
                picPawnB2.Height = 23
                picPawnB2.Location = New Point(671, 481)
                picPawnB2.Enabled = False
                picPawnB2.BackColor = Color.Transparent
                picPawnB2.Show()
            ElseIf PawnReminder(7) = 3 Then
                picPawnB3.Width = 23
                picPawnB3.Height = 23
                picPawnB3.Location = New Point(694, 481)
                picPawnB3.Enabled = False
                picPawnB3.BackColor = Color.Transparent
                picPawnB3.Show()
            ElseIf PawnReminder(7) = 4 Then
                picPawnB4.Width = 23
                picPawnB4.Height = 23
                picPawnB4.Location = New Point(717, 481)
                picPawnB4.Enabled = False
                picPawnB4.BackColor = Color.Transparent
                picPawnB4.Show()
            ElseIf PawnReminder(7) = 5 Then
                picPawnB5.Width = 23
                picPawnB5.Height = 23
                picPawnB5.Location = New Point(740, 481)
                picPawnB5.Enabled = False
                picPawnB5.BackColor = Color.Transparent
                picPawnB5.Show()
            ElseIf PawnReminder(7) = 6 Then
                picPawnB6.Width = 23
                picPawnB6.Height = 23
                picPawnB6.Location = New Point(763, 481)
                picPawnB6.Enabled = False
                picPawnB6.BackColor = Color.Transparent
                picPawnB6.Show()
            ElseIf PawnReminder(7) = 7 Then
                picPawnB7.Width = 23
                picPawnB7.Height = 23
                picPawnB7.Location = New Point(786, 481)
                picPawnB7.Enabled = False
                picPawnB7.BackColor = Color.Transparent
                picPawnB7.Show()
            ElseIf PawnReminder(7) = 8 Then
                picPawnB8.Width = 23
                picPawnB8.Height = 23
                picPawnB8.Location = New Point(809, 481)
                picPawnB8.Enabled = False
                picPawnB8.BackColor = Color.Transparent
                picPawnB8.Show()
            End If

            PointsWonWhite = PointsWonWhite + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = False Then
            Exit Sub
        End If
        number = 0

        Shapes = 40
        number = number + 1
        SelectedShape(picQueenB8)
    End Sub

    Private Sub picQueenW1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW1.Click

        WhiteTakenShape(picQueenW1)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then

            If PawnReminder(8) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(8) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(8) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(8) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(8) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(8) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(8) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(8) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 41
        number = number + 1
        SelectedShape(picQueenW1)
    End Sub

    Private Sub picQueenW2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW2.Click

        WhiteTakenShape(picQueenW2)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then

            If PawnReminder(9) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(9) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(9) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(9) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(9) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(9) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(9) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(9) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 42
        number = number + 1
        SelectedShape(picQueenW2)
    End Sub

    Private Sub picQueenW3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW3.Click

        WhiteTakenShape(picQueenW3)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(10) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(10) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(10) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(10) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(10) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(10) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(10) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(10) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 43
        number = number + 1
        SelectedShape(picQueenW3)
    End Sub

    Private Sub picQueenW4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW4.Click

        WhiteTakenShape(picQueenW4)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(11) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(11) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(11) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(11) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(11) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(11) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(11) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(11) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 44
        number = number + 1
        SelectedShape(picQueenW4)
    End Sub

    Private Sub picQueenW5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW5.Click

        WhiteTakenShape(picQueenW5)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(12) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(12) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(12) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(12) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(12) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(12) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(12) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(12) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 45
        number = number + 1
        SelectedShape(picQueenW5)
    End Sub

    Private Sub picQueenW6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW6.Click

        WhiteTakenShape(picQueenW6)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(13) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(13) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(13) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(13) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(13) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(13) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(13) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(13) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 46
        number = number + 1
        SelectedShape(picQueenW6)
    End Sub

    Private Sub picQueenW7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW7.Click

        WhiteTakenShape(picQueenW7)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(14) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(14) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(14) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(14) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(14) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(14) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(14) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(14) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If

            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 47
        number = number + 1
        SelectedShape(picQueenW7)
    End Sub

    Private Sub picQueenW8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQueenW8.Click

        WhiteTakenShape(picQueenW8)

        REM *****************************************************************
        REM 	Moving the captured piece onto the place where captured pieces are displayed (if it is captured)
        REM     + Getting score points from the captured piece (if it is captured)
        REM     (If statement)
        REM *****************************************************************

        If Taken = True Then
            If PawnReminder(15) = 1 Then
                picPawnW1.Width = 23
                picPawnW1.Height = 23
                picPawnW1.Location = New Point(648, 127)
                picPawnW1.Enabled = False
                picPawnW1.BackColor = Color.Transparent
                picPawnW1.Show()
            ElseIf PawnReminder(15) = 2 Then
                picPawnW2.Width = 23
                picPawnW2.Height = 23
                picPawnW2.Location = New Point(671, 127)
                picPawnW2.Enabled = False
                picPawnW2.BackColor = Color.Transparent
                picPawnW2.Show()
            ElseIf PawnReminder(15) = 3 Then
                picPawnW3.Width = 23
                picPawnW3.Height = 23
                picPawnW3.Location = New Point(694, 127)
                picPawnW3.Enabled = False
                picPawnW3.BackColor = Color.Transparent
                picPawnW3.Show()
            ElseIf PawnReminder(15) = 4 Then
                picPawnW4.Width = 23
                picPawnW4.Height = 23
                picPawnW4.Location = New Point(717, 127)
                picPawnW4.Enabled = False
                picPawnW4.BackColor = Color.Transparent
                picPawnW4.Show()
            ElseIf PawnReminder(15) = 5 Then
                picPawnW5.Width = 23
                picPawnW5.Height = 23
                picPawnW5.Location = New Point(740, 127)
                picPawnW5.Enabled = False
                picPawnW5.BackColor = Color.Transparent
                picPawnW5.Show()
            ElseIf PawnReminder(15) = 6 Then
                picPawnW6.Width = 23
                picPawnW6.Height = 23
                picPawnW6.Location = New Point(763, 127)
                picPawnW6.Enabled = False
                picPawnW6.BackColor = Color.Transparent
                picPawnW6.Show()
            ElseIf PawnReminder(15) = 7 Then
                picPawnW7.Width = 23
                picPawnW7.Height = 23
                picPawnW7.Location = New Point(786, 127)
                picPawnW7.Enabled = False
                picPawnW7.BackColor = Color.Transparent
                picPawnW7.Show()
            ElseIf PawnReminder(15) = 8 Then
                picPawnW8.Width = 23
                picPawnW8.Height = 23
                picPawnW8.Location = New Point(809, 127)
                picPawnW8.Enabled = False
                picPawnW8.BackColor = Color.Transparent
                picPawnW8.Show()
            End If


            PointsWonBlack = PointsWonBlack + 9
            If PointsWonWhite > PointsWonBlack Then
                PointsWonWhite = PointsWonWhite - PointsWonBlack
                PointsWonBlack = 0
            ElseIf PointsWonWhite <= PointsWonBlack Then
                PointsWonBlack = PointsWonBlack - PointsWonWhite
                PointsWonWhite = 0

            End If
            Exit Sub
        End If
        If Turn = True Then
            Exit Sub
        End If
        number = 0

        Shapes = 48
        number = number + 1
        SelectedShape(picQueenW8)
    End Sub

    Private Sub tmrCheck_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrCheck.Tick

        REM *****************************************************************
        REM 	Showing the label "Check" when one of the Kings is in check
        REM *****************************************************************

        CheckTick = CheckTick + 1
        If CheckTick = 13 Then
            lblCheck.Hide()
            tmrCheck.Enabled = False
        End If
    End Sub

    Private Sub tmrTime1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrTime1.Tick

        REM *****************************************************************
        REM 	A counter which counts the White's time until the game is over
        REM *****************************************************************

        If Sec1 = 0 Then
            Min1 = Min1 - 1
            Sec1 = 60
        End If
        Sec1 = Sec1 - 1
        lblTimeMin1.Text = Min1
        lblTimeSec1.Text = Sec1

        REM *****************************************************************
        REM 	Pointing out that Whites' time is over , and Blacks have won
        REM     + Making report of the game
        REM     + prohibiting clicking on the pieces
        REM *****************************************************************

        If Min1 = 0 Then
            If Sec1 = 0 Then
                tmrResult.Enabled = False
                tmrTime1.Enabled = False
                tmrTime2.Enabled = False
                lblScoreBlack.Hide()
                lblScoreWhite.Hide()
                butBack.Show()
                shpBorder5.Show()

                number = 0
                Shapes = 0
                UnselectAllShapes()

                picKingW.Enabled = False
                picQueenW.Enabled = False
                picBishopW1.Enabled = False
                picBishopW2.Enabled = False
                picKnightW1.Enabled = False
                picKnightW2.Enabled = False
                picRockW1.Enabled = False
                picRockW2.Enabled = False
                picPawnW1.Enabled = False
                picPawnW2.Enabled = False
                picPawnW3.Enabled = False
                picPawnW4.Enabled = False
                picPawnW5.Enabled = False
                picPawnW6.Enabled = False
                picPawnW7.Enabled = False
                picPawnW8.Enabled = False
                picQueenW1.Enabled = False
                picQueenW2.Enabled = False
                picQueenW3.Enabled = False
                picQueenW4.Enabled = False
                picQueenW5.Enabled = False
                picQueenW6.Enabled = False
                picQueenW7.Enabled = False
                picQueenW8.Enabled = False

                picKingB.Enabled = False
                picQueenB.Enabled = False
                picBishopB1.Enabled = False
                picBishopB2.Enabled = False
                picKnightB1.Enabled = False
                picKnightB2.Enabled = False
                picRockB1.Enabled = False
                picRockB2.Enabled = False
                picPawnB1.Enabled = False
                picPawnB2.Enabled = False
                picPawnB3.Enabled = False
                picPawnB4.Enabled = False
                picPawnB5.Enabled = False
                picPawnB6.Enabled = False
                picPawnB7.Enabled = False
                picPawnB8.Enabled = False
                picQueenB1.Enabled = False
                picQueenB2.Enabled = False
                picQueenB3.Enabled = False
                picQueenB4.Enabled = False
                picQueenB5.Enabled = False
                picQueenB6.Enabled = False
                picQueenB7.Enabled = False
                picQueenB8.Enabled = False
                If chkReport.Checked = True Then
                    FileOpen(1, fullPath2, OpenMode.Append)
                    PrintLine(1, Player1, "0-1", Player2 & "(won)", DateString)
                    FileClose(1)
                    FileOpen(2, fullPath1, OpenMode.Append)
                    WriteLine(2, Player1, "0-1", Player2 & "(won)", DateString)
                    FileClose(2)
                End If
                MsgBox(Player2 & " Won by the Time!", MsgBoxStyle.Information, "Result of the Game")
            End If
        End If
    End Sub

    Private Sub butStart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles butStart.Click

        REM *****************************************************************
        REM 	Getting the game started; Making all pieces being able to click on
        REM *****************************************************************

        Player1 = lblPlayer1.Text
        Player2 = lblPlayer2.Text
        picKingW.Enabled = True
        picQueenW.Enabled = True
        picBishopW1.Enabled = True
        picBishopW2.Enabled = True
        picKnightW1.Enabled = True
        picKnightW2.Enabled = True
        picRockW1.Enabled = True
        picRockW2.Enabled = True
        picPawnW1.Enabled = True
        picPawnW2.Enabled = True
        picPawnW3.Enabled = True
        picPawnW4.Enabled = True
        picPawnW5.Enabled = True
        picPawnW6.Enabled = True
        picPawnW7.Enabled = True
        picPawnW8.Enabled = True
        picQueenW1.Enabled = True
        picQueenW2.Enabled = True
        picQueenW3.Enabled = True
        picQueenW4.Enabled = True
        picQueenW5.Enabled = True
        picQueenW6.Enabled = True
        picQueenW7.Enabled = True
        picQueenW8.Enabled = True

        picKingB.Enabled = True
        picQueenB.Enabled = True
        picBishopB1.Enabled = True
        picBishopB2.Enabled = True
        picKnightB1.Enabled = True
        picKnightB2.Enabled = True
        picRockB1.Enabled = True
        picRockB2.Enabled = True
        picPawnB1.Enabled = True
        picPawnB2.Enabled = True
        picPawnB3.Enabled = True
        picPawnB4.Enabled = True
        picPawnB5.Enabled = True
        picPawnB6.Enabled = True
        picPawnB7.Enabled = True
        picPawnB8.Enabled = True
        picQueenB1.Enabled = True
        picQueenB2.Enabled = True
        picQueenB3.Enabled = True
        picQueenB4.Enabled = True
        picQueenB5.Enabled = True
        picQueenB6.Enabled = True
        picQueenB7.Enabled = True
        picQueenB8.Enabled = True

        lblTimeMin1.Text = Min1
        lblTimeSec1.Text = Sec1
        lblTimeMin2.Text = Min2
        lblTimeSec2.Text = Sec2
        mnuChess.Enabled = False
        chkReport.Hide()
        lblScoreBlack.Show()
        lblScoreWhite.Show()

        butStart.Hide()
        shpBorder4.Hide()
        tmrTime1.Enabled = True
        tmrResult.Enabled = True

    End Sub

    Private Sub tmrTime2_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrTime2.Tick

        REM *****************************************************************
        REM 	A counter which counts Black's time until the game is over
        REM *****************************************************************

        If Sec2 = 0 Then
            Min2 = Min2 - 1
            Sec2 = 60
        End If
        Sec2 = Sec2 - 1
        lblTimeMin2.Text = Min2
        lblTimeSec2.Text = Sec2

        REM *****************************************************************
        REM 	Pointing out that Black's time is over , and Whites have won
        REM     + Making report of the game
        REM     + prohibiting click on the pieces
        REM *****************************************************************

        If Min2 = 0 Then
            If Sec2 = 0 Then
                tmrResult.Enabled = False
                tmrTime1.Enabled = False
                tmrTime2.Enabled = False
                lblScoreBlack.Hide()
                lblScoreWhite.Hide()
                butBack.Show()
                shpBorder5.Show()

                number = 0
                Shapes = 0
                UnselectAllShapes()

                picKingW.Enabled = False
                picQueenW.Enabled = False
                picBishopW1.Enabled = False
                picBishopW2.Enabled = False
                picKnightW1.Enabled = False
                picKnightW2.Enabled = False
                picRockW1.Enabled = False
                picRockW2.Enabled = False
                picPawnW1.Enabled = False
                picPawnW2.Enabled = False
                picPawnW3.Enabled = False
                picPawnW4.Enabled = False
                picPawnW5.Enabled = False
                picPawnW6.Enabled = False
                picPawnW7.Enabled = False
                picPawnW8.Enabled = False
                picQueenW1.Enabled = False
                picQueenW2.Enabled = False
                picQueenW3.Enabled = False
                picQueenW4.Enabled = False
                picQueenW5.Enabled = False
                picQueenW6.Enabled = False
                picQueenW7.Enabled = False
                picQueenW8.Enabled = False

                picKingB.Enabled = False
                picQueenB.Enabled = False
                picBishopB1.Enabled = False
                picBishopB2.Enabled = False
                picKnightB1.Enabled = False
                picKnightB2.Enabled = False
                picRockB1.Enabled = False
                picRockB2.Enabled = False
                picPawnB1.Enabled = False
                picPawnB2.Enabled = False
                picPawnB3.Enabled = False
                picPawnB4.Enabled = False
                picPawnB5.Enabled = False
                picPawnB6.Enabled = False
                picPawnB7.Enabled = False
                picPawnB8.Enabled = False
                picQueenB1.Enabled = False
                picQueenB2.Enabled = False
                picQueenB3.Enabled = False
                picQueenB4.Enabled = False
                picQueenB5.Enabled = False
                picQueenB6.Enabled = False
                picQueenB7.Enabled = False
                picQueenB8.Enabled = False


                If chkReport.Checked = True Then
                    FileOpen(1, fullPath2, OpenMode.Append)
                    PrintLine(1, Player1 & "(won)", "1-0", Player2, DateString)
                    FileClose(1)
                    FileOpen(2, fullPath1, OpenMode.Append)
                    WriteLine(2, Player1 & "(won)", "1-0", Player2, DateString)
                    FileClose(2)
                End If

                MsgBox(Player1 & " Won by the Time!", MsgBoxStyle.Information, "Result of the Game")
            End If
        End If
    End Sub

    Private Sub mnuMin1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuMin1.Click
        mnuMin5.Checked = False
        mnuMin10.Checked = False
        mnuMin1.Checked = True

        REM *****************************************************************
        REM 	Setting a game-time to 1 min
        REM *****************************************************************

        Min1 = 1
        Sec1 = 0
        Min2 = 1
        Sec2 = 0
        lblTimeMin1.Text = Min1
        lblTimeMin2.Text = Min2
        lblTimeSec1.Text = Sec1
        lblTimeSec2.Text = Sec2
    End Sub

    Private Sub mnuMin5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuMin5.Click
        mnuMin5.Checked = True
        mnuMin10.Checked = False
        mnuMin1.Checked = False

        REM *****************************************************************
        REM 	Setting a game-time to 5 min
        REM *****************************************************************

        Min1 = 5
        Sec1 = 0
        Min2 = 5
        Sec2 = 0
        lblTimeMin1.Text = Min1
        lblTimeMin2.Text = Min2
        lblTimeSec1.Text = Sec1
        lblTimeSec2.Text = Sec2

    End Sub

    Private Sub mnuMin10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuMin10.Click
        mnuMin5.Checked = False
        mnuMin10.Checked = True
        mnuMin1.Checked = False

        REM *****************************************************************
        REM 	Setting a game-time to 10 min
        REM *****************************************************************

        Min1 = 10
        Sec1 = 0
        Min2 = 10
        Sec2 = 0
        lblTimeMin1.Text = Min1
        lblTimeMin2.Text = Min2
        lblTimeSec1.Text = Sec1
        lblTimeSec2.Text = Sec2
    End Sub

    Private Sub tmrResult_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrResult.Tick




        REM *****************************************************************
        REM 	Showing a score difference when it has been changed
        REM *****************************************************************

        lblScoreBlack.Text = "+" & PointsWonBlack
        lblScoreWhite.Text = "+" & PointsWonWhite
        If PointsWonBlack = 0 Then
            lblScoreBlack.Text = ""
        End If
        If PointsWonWhite = 0 Then
            lblScoreWhite.Text = ""
        End If

        REM *****************************************************************
        REM 	Pointing out that the game has finished as a draw
        REM     + Making report of the game
        REM *****************************************************************

        If Draw = True Then
            tmrResult.Enabled = False
            tmrTime1.Enabled = False
            tmrTime2.Enabled = False
            lblScoreBlack.Hide()
            lblScoreWhite.Hide()
            butBack.Show()
            shpBorder5.Show()
            MsgBox("It's a Draw!", MsgBoxStyle.Information, "Result of the Game")
            If chkReport.Checked = True Then
                FileOpen(1, fullPath2, OpenMode.Append)
                PrintLine(1, Player1, "1-1", Player2, DateString)
                FileClose(1)
                FileOpen(2, fullPath1, OpenMode.Append)
                WriteLine(2, Player1, "1-1", Player2, DateString)
                FileClose(2)
            End If
        End If

        REM *****************************************************************
        REM 	Pointing out that the game has finished as a draw
        REM     + Making report of the game
        REM *****************************************************************

        If StaleMate = True Then
            tmrResult.Enabled = False
            tmrTime1.Enabled = False
            tmrTime2.Enabled = False
            lblScoreBlack.Hide()
            lblScoreWhite.Hide()
            butBack.Show()
            shpBorder5.Show()
            MsgBox("It's a StaleMate!", MsgBoxStyle.Information, "Result of the Game")
            If chkReport.Checked = True Then
                FileOpen(1, fullPath2, OpenMode.Append)
                PrintLine(1, Player1, "1-1", Player2, DateString)
                FileClose(1)
                FileOpen(2, fullPath1, OpenMode.Append)
                WriteLine(2, Player1, "1-1", Player2, DateString)
                FileClose(2)
            End If
        End If

        REM *****************************************************************
        REM 	Pointing out that Black's King is checkmated and that Blacks have won
        REM     + Making report of the game
        REM *****************************************************************

        If MateBlack = True Then
            tmrResult.Enabled = False
            tmrTime1.Enabled = False
            tmrTime2.Enabled = False
            ttpMate.SetToolTip(lblMate, "Oh! " & Player2 & ", how come you lost  ?._.")
            lblScoreBlack.Hide()
            lblScoreWhite.Hide()
            butBack.Show()
            shpBorder5.Show()
            MsgBox(Player1 & " Won the Game!", MsgBoxStyle.Information, "Result of the Game")
            If chkReport.Checked = True Then
                FileOpen(1, fullPath2, OpenMode.Append)
                PrintLine(1, Player1 & "(won)", "1-0", Player2, DateString)
                FileClose(1)
                FileOpen(2, fullPath1, OpenMode.Append)
                WriteLine(2, Player1 & "(won)", "1-0", Player2, DateString)
                FileClose(2)
            End If
        End If

        REM *****************************************************************
        REM 	Pointing out that White's King is checkmated and that Whites have won
        REM     + Making report of the game
        REM *****************************************************************

        If MateWhite = True Then
            tmrResult.Enabled = False
            tmrTime1.Enabled = False
            tmrTime2.Enabled = False
            ttpMate.SetToolTip(lblMate, "Oh! " & Player1 & ", how come you lost ?._.")
            lblScoreBlack.Hide()
            lblScoreWhite.Hide()
            butBack.Show()
            shpBorder5.Show()
            MsgBox(Player2 & " Won the Game!", MsgBoxStyle.Information, "Result of the Game")
            If chkReport.Checked = True Then
                FileOpen(1, fullPath2, OpenMode.Append)
                PrintLine(1, Player1, "0-1", Player2 & "(won)", DateString)
                FileClose(1)
                FileOpen(2, fullPath1, OpenMode.Append)
                WriteLine(2, Player1, "0-1", Player2 & "(won)", DateString)
                FileClose(2)
            End If
        End If

    End Sub

    Private Sub butStart_MouseLeave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles butStart.MouseLeave
        Cursor = Cursors.Default
        shpBorder4.BorderColor = Color.Transparent
    End Sub

    Private Sub butStart_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles butStart.MouseMove
        Cursor = Cursors.Hand
        shpBorder4.BorderColor = Color.FromArgb(64, 0, 0)
    End Sub

    Private Sub butBack_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles butBack.MouseLeave
        Cursor = Cursors.Default
        shpBorder5.BorderColor = Color.Transparent
    End Sub

    Private Sub butBack_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles butBack.MouseMove

        Cursor = Cursors.Hand
        shpBorder5.BorderColor = Color.FromArgb(64, 0, 0)
    End Sub

    Private Sub butBack_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles butBack.Click

        REM *****************************************************************
        REM 	Going back to the Lobby; Getting the board and pieces ready for the next game;
        REM     + resetting all of the values
        REM *****************************************************************

        picKingW.Enabled = False
        picQueenW.Enabled = False
        picBishopW1.Enabled = False
        picBishopW2.Enabled = False
        picKnightW1.Enabled = False
        picKnightW2.Enabled = False
        picRockW1.Enabled = False
        picRockW2.Enabled = False
        picPawnW1.Enabled = False
        picPawnW2.Enabled = False
        picPawnW3.Enabled = False
        picPawnW4.Enabled = False
        picPawnW5.Enabled = False
        picPawnW6.Enabled = False
        picPawnW7.Enabled = False
        picPawnW8.Enabled = False

        For i = 0 To 7
            For j = 0 To 7
                Reset(i, j) = False
            Next
        Next

        Cheat = 0
        PointsWonBlack = 0
        PointsWonWhite = 0
        lblMate.Hide()
        lblCheck.Hide()
        butBack.Hide()
        shpBorder5.Hide()
        lblScoreBlack.Show()
        lblScoreWhite.Show()
        lblScoreBlack.Text = ""
        lblScoreWhite.Text = ""

        Min1 = 5
        Sec1 = 0
        Min2 = 5
        Sec2 = 0

        For i = 0 To 15
            PawnsFirstMove(i) = True
            PawnsTwoSquaresAhead(i) = True
        Next


        For i = 0 To 7
            For j = 0 To 7
                ShapeLocated(i, j) = True
                ShapeLocatedW(i, j) = True
                ShapeLocatedB(i, j) = True
                WhitesMovement(i, j) = False
                BlacksMovement(i, j) = False
            Next
        Next

        picPawnW1.Location = New Point(1.4, 6 * 80 + 1.4)
        picPawnW2.Location = New Point(1 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW3.Location = New Point(2 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW4.Location = New Point(3 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW5.Location = New Point(4 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW6.Location = New Point(5 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW7.Location = New Point(6 * 80 + 1.4, 6 * 80 + 1.4)
        picPawnW8.Location = New Point(7 * 80 + 1.4, 6 * 80 + 1.4)

        picPawnB1.Location = New Point(1.4, 1 * 80 + 1.4)
        picPawnB2.Location = New Point(1 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB3.Location = New Point(2 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB4.Location = New Point(3 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB5.Location = New Point(4 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB6.Location = New Point(5 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB7.Location = New Point(6 * 80 + 1.4, 1 * 80 + 1.4)
        picPawnB8.Location = New Point(7 * 80 + 1.4, 1 * 80 + 1.4)

        picRockW1.Location = New Point(1.4, 7 * 80 + 1.4)
        picRockW2.Location = New Point(7 * 80 + 1.4, 7 * 80 + 1.4)

        picRockB1.Location = New Point(1.4, 1.4)
        picRockB2.Location = New Point(7 * 80 + 1.4, 1.4)

        picKnightW1.Location = New Point(1 * 80 + 1.4, 7 * 80 + 1.4)
        picKnightW2.Location = New Point(6 * 80 + 1.4, 7 * 80 + 1.4)

        picKnightB1.Location = New Point(1 * 80 + 1.4, 1.4)
        picKnightB2.Location = New Point(6 * 80 + 1.4, 1.4)

        picBishopW1.Location = New Point(2 * 80 + 1.4, 7 * 80 + 1.4)
        picBishopW2.Location = New Point(5 * 80 + 1.4, 7 * 80 + 1.4)

        picBishopB1.Location = New Point(2 * 80 + 1.4, 1.4)
        picBishopB2.Location = New Point(5 * 80 + 1.4, 1.4)

        picQueenW.Location = New Point(3 * 80 + 1.4, 7 * 80 + 1.4)
        picQueenB.Location = New Point(3 * 80 + 1.4, 1.4)

        picKingW.Location = New Point(4 * 80 + 1.4, 7 * 80 + 1.4)
        picKingB.Location = New Point(4 * 80 + 1.4, 1.4)

        picQueenB1.Location = New Point(757, 0)
        picQueenB2.Location = New Point(757, 0)
        picQueenB3.Location = New Point(757, 0)
        picQueenB4.Location = New Point(757, 0)
        picQueenB5.Location = New Point(757, 0)
        picQueenB6.Location = New Point(757, 0)
        picQueenB7.Location = New Point(757, 0)
        picQueenB8.Location = New Point(757, 0)

        picQueenW1.Location = New Point(757, 0)
        picQueenW2.Location = New Point(757, 0)
        picQueenW3.Location = New Point(757, 0)
        picQueenW4.Location = New Point(757, 0)
        picQueenW5.Location = New Point(757, 0)
        picQueenW6.Location = New Point(757, 0)
        picQueenW7.Location = New Point(757, 0)
        picQueenW8.Location = New Point(757, 0)

        picKingW.Show()
        picKingB.Show()
        picQueenB.Show()
        picQueenW.Show()
        picBishopB1.Show()
        picBishopB2.Show()
        picBishopW1.Show()
        picBishopW2.Show()
        picKnightB1.Show()
        picKnightB2.Show()
        picKnightW1.Show()
        picKnightW2.Show()
        picRockB1.Show()
        picRockB2.Show()
        picRockW1.Show()
        picRockW2.Show()
        picPawnW1.Show()
        picPawnW2.Show()
        picPawnW3.Show()
        picPawnW4.Show()
        picPawnW5.Show()
        picPawnW6.Show()
        picPawnW7.Show()
        picPawnW8.Show()
        picPawnB1.Show()
        picPawnB2.Show()
        picPawnB3.Show()
        picPawnB4.Show()
        picPawnB5.Show()
        picPawnB6.Show()
        picPawnB7.Show()
        picPawnB8.Show()


        picQueenB1.Hide()
        picQueenB2.Hide()
        picQueenB3.Hide()
        picQueenB4.Hide()
        picQueenB5.Hide()
        picQueenB6.Hide()
        picQueenB7.Hide()
        picQueenB8.Hide()

        picQueenW1.Hide()
        picQueenW2.Hide()
        picQueenW3.Hide()
        picQueenW4.Hide()
        picQueenW5.Hide()
        picQueenW6.Hide()
        picQueenW7.Hide()
        picQueenW8.Hide()


        picPawnW1.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW2.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW3.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW4.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW5.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW6.BackColor = Color.FromArgb(255, 128, 0)
        picPawnW7.BackColor = Color.FromArgb(192, 64, 0)
        picPawnW8.BackColor = Color.FromArgb(255, 128, 0)

        picPawnB8.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB7.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB6.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB5.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB4.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB3.BackColor = Color.FromArgb(255, 128, 0)
        picPawnB2.BackColor = Color.FromArgb(192, 64, 0)
        picPawnB1.BackColor = Color.FromArgb(255, 128, 0)

        picRockW1.BackColor = Color.FromArgb(255, 128, 0)
        picRockW2.BackColor = Color.FromArgb(192, 64, 0)

        picRockB1.BackColor = Color.FromArgb(192, 64, 0)
        picRockB2.BackColor = Color.FromArgb(255, 128, 0)

        picKnightW1.BackColor = Color.FromArgb(192, 64, 0)
        picKnightW2.BackColor = Color.FromArgb(255, 128, 0)

        picKnightB1.BackColor = Color.FromArgb(255, 128, 0)
        picKnightB2.BackColor = Color.FromArgb(192, 64, 0)

        picBishopW1.BackColor = Color.FromArgb(255, 128, 0)
        picBishopW2.BackColor = Color.FromArgb(192, 64, 0)

        picBishopB1.BackColor = Color.FromArgb(192, 64, 0)
        picBishopB2.BackColor = Color.FromArgb(255, 128, 0)

        picQueenW.BackColor = Color.FromArgb(192, 64, 0)
        picQueenB.BackColor = Color.FromArgb(255, 128, 0)

        picKingW.BackColor = Color.FromArgb(255, 128, 0)
        picKingB.BackColor = Color.FromArgb(192, 64, 0)

        picQueenB.Size = New Size(80, 80)
        picQueenW.Size = New Size(80, 80)
        picBishopB1.Size = New Size(80, 80)
        picBishopB2.Size = New Size(80, 80)
        picBishopW1.Size = New Size(80, 80)
        picBishopW2.Size = New Size(80, 80)
        picKnightB1.Size = New Size(80, 80)
        picKnightB2.Size = New Size(80, 80)
        picKnightW1.Size = New Size(80, 80)
        picKnightW2.Size = New Size(80, 80)
        picRockB1.Size = New Size(80, 80)
        picRockB2.Size = New Size(80, 80)
        picRockW1.Size = New Size(80, 80)
        picRockW2.Size = New Size(80, 80)
        picPawnB1.Size = New Size(80, 80)
        picPawnB2.Size = New Size(80, 80)
        picPawnB3.Size = New Size(80, 80)
        picPawnB4.Size = New Size(80, 80)
        picPawnB5.Size = New Size(80, 80)
        picPawnB6.Size = New Size(80, 80)
        picPawnB7.Size = New Size(80, 80)
        picPawnB8.Size = New Size(80, 80)
        picPawnW1.Size = New Size(80, 80)
        picPawnW2.Size = New Size(80, 80)
        picPawnW3.Size = New Size(80, 80)
        picPawnW4.Size = New Size(80, 80)
        picPawnW5.Size = New Size(80, 80)
        picPawnW6.Size = New Size(80, 80)
        picPawnW7.Size = New Size(80, 80)
        picPawnW8.Size = New Size(80, 80)



        KingBMovesCount = 0
        KingWMovesCount = 0
        RockB1MovesCount = 0
        RockB2MovesCount = 0
        RockW1MovesCount = 0
        RockW2MovesCount = 0

        ShapesLocation()
        BlackShapesLocation()
        WhiteShapesLocation()

        Turn = False

        KingWMovesCount = 0
        KingBMovesCount = 0
        RockB1MovesCount = 0
        RockB2MovesCount = 0
        RockW1MovesCount = 0
        RockW2MovesCount = 0

        Draw = False
        StaleMate = False
        MateBlack = False
        MateWhite = False
        KingBChecked = False
        KingWChecked = False

        chkReport.Checked = True
        chkReport.Show()
        lblScoreBlack.Hide()
        lblScoreWhite.Hide()


        mnuMin1.Checked = False
        mnuMin5.Checked = True
        mnuMin10.Checked = False
        butStart.Show()
        shpBorder4.Show()
        lblTimeMin1.Text = "5"
        lblTimeMin2.Text = "5"
        lblTimeSec1.Text = "0"
        lblTimeSec2.Text = "0"
        mnuChess.Enabled = True

        For i = 0 To 15
            PawnReminder(i) = 0
        Next
        PointsWonWhite = 0
        PointsWonBlack = 0

        mnuColorOrig.Checked = True
        mnuColorGrey.Checked = False
        mnuColorYel.Checked = False
        mnuColorBlue.Checked = False
        mnuColorCust.Checked = False

        mnuFontOri.Checked = True
        mnuFontCust.Checked = False

        butStart.Font = New Font("Jokerman", 29, FontStyle.Bold)
        butBack.Font = New Font("Jokerman", 17, FontStyle.Bold)
        lblPlayer1.Font = New Font("Jokerman", 12, FontStyle.Bold)
        lblPlayer2.Font = New Font("Jokerman", 12, FontStyle.Bold)
        lblTimeMin1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeMin2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeSec1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeSec2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblColon1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblColon2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)

        Me.BackColor = Color.FromArgb(255, 224, 192)

        dgvChess.Enabled = True
        UnselectAllShapes()
        Turn = False
        number = 0
        Shapes = 0

        Me.Hide()
        frmLobby.Show()


    End Sub

    Private Sub mnuExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuExit.Click

        REM *****************************************************************
        REM 	Closing the game
        REM *****************************************************************

        Me.Close()
        frmLobby.Close()

    End Sub

    Private Sub mnuColorOrig_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuColorOrig.Click

        REM *****************************************************************
        REM 	Changing the colour of background to the Original Color
        REM *****************************************************************

        mnuColorOrig.Checked = True
        mnuColorGrey.Checked = False
        mnuColorYel.Checked = False
        mnuColorBlue.Checked = False
        mnuColorCust.Checked = False
        Me.BackColor = Color.FromArgb(255, 224, 192)

    End Sub

    Private Sub mnuColorGrey_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuColorGrey.Click

        REM *****************************************************************
        REM 	Changing the colour of background to Grey
        REM *****************************************************************

        mnuColorOrig.Checked = False
        mnuColorGrey.Checked = True
        mnuColorYel.Checked = False
        mnuColorBlue.Checked = False
        mnuColorCust.Checked = False
        Me.BackColor = Color.FromArgb(224, 224, 224)

    End Sub

    Private Sub mnuColorYel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuColorYel.Click

        REM *****************************************************************
        REM 	Changing the colour of background to Yellow
        REM *****************************************************************

        mnuColorOrig.Checked = False
        mnuColorGrey.Checked = False
        mnuColorYel.Checked = True
        mnuColorBlue.Checked = False
        mnuColorCust.Checked = False
        Me.BackColor = Color.FromArgb(255, 255, 192)

    End Sub

    Private Sub mnuColorBlue_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuColorBlue.Click

        REM *****************************************************************
        REM 	Changing the colour of background to Blue
        REM *****************************************************************

        mnuColorOrig.Checked = False
        mnuColorGrey.Checked = False
        mnuColorYel.Checked = False
        mnuColorBlue.Checked = True
        mnuColorCust.Checked = False

        Me.BackColor = Color.FromArgb(192, 255, 255)
    End Sub

    Private Sub mnuColorCust_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuColorCust.Click

        REM *********************************************************************
        REM Variable Dictionary:
        REM Color (Color) = A type of color that is chosen by the players
        REM *********************************************************************

        Dim Color As Color

        REM *****************************************************************
        REM 	Changing the current colour of the background to the one chosen by the players
        REM *****************************************************************


        mnuColorOrig.Checked = False
        mnuColorGrey.Checked = False
        mnuColorYel.Checked = False
        mnuColorBlue.Checked = False
        dlgColor.ShowDialog()
        Color = dlgColor.Color
        Me.BackColor = Color



    End Sub

    Private Sub mnuFontOri_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuFontOri.Click
        mnuFontOri.Checked = True
        mnuFontCust.Checked = False

        REM *****************************************************************
        REM 	Changing the font to the original font
        REM *****************************************************************

        butStart.Font = New Font("Jokerman", 29, FontStyle.Bold)
        butBack.Font = New Font("Jokerman", 17, FontStyle.Bold)
        lblPlayer1.Font = New Font("Jokerman", 12, FontStyle.Bold)
        lblPlayer2.Font = New Font("Jokerman", 12, FontStyle.Bold)
        lblTimeMin1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeMin2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeSec1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblTimeSec2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblColon1.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        lblColon2.Font = New Font("Lucida Calligraphy", 15, FontStyle.Bold)
        chkReport.Font = New Font("Jokerman", 10, FontStyle.Bold)
    End Sub

    Private Sub mnuFontCust_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuFontCust.Click

        REM *********************************************************************
        REM Variable Dictionary:
        REM Font (Font) = A type of font that is chosen by the players
        REM *********************************************************************

        Dim Font As Font

        REM *****************************************************************
        REM 	Changing the current font to the one chosen by the players
        REM *****************************************************************

        mnuFontOri.Checked = False
        mnuFontCust.Checked = False
        dlgFont.ShowDialog()
        Font = dlgFont.Font
        butStart.Font = Font
        butBack.Font = Font
        lblPlayer1.Font = Font
        lblPlayer2.Font = Font
        lblTimeMin1.Font = Font
        lblTimeMin2.Font = Font
        lblTimeSec1.Font = Font
        lblTimeSec2.Font = Font
        lblColon1.Font = Font
        lblColon2.Font = Font
        chkReport.Font = Font

    End Sub

    Private Sub lblScoreBlack_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblScoreBlack.TextChanged

        REM *****************************************************************
        REM 	Setting up the ToolTips pop-ups on the label for the score points(Black)
        REM *****************************************************************

        If PointsWonBlack > 0 And PointsWonBlack <= 4 Then
            ttpScoreB.Active = True
            ttpScoreB.SetToolTip(lblScoreBlack, "Come on " & Player2 & "!" & vbCrLf & "You are already dominating.")
        ElseIf PointsWonBlack > 4 And PointsWonBlack <= 8 Then
            ttpScoreB.Active = True
            ttpScoreB.SetToolTip(lblScoreBlack, Player2 & ", The game is in your pocket!")
        ElseIf PointsWonBlack > 8 And PointsWonBlack <= 50 Then
            ttpScoreB.Active = True
            ttpScoreB.SetToolTip(lblScoreBlack, Player1 & " might as well consider resigning and stop wasting their time." & vbCrLf & Player2 & " is too good at chess!")
        ElseIf PointsWonBlack > 50 Then
            ttpScoreB.Active = True
            ttpScoreB.SetToolTip(lblScoreBlack, Player2 & " is a cheater!")
        ElseIf PointsWonBlack = 0 Then
            ttpScoreB.Active = False
        End If

    End Sub

    Private Sub lblScoreWhite_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblScoreWhite.TextChanged

        REM *****************************************************************
        REM 	Setting up the ToolTips pop-ups on the label for the score points(Black)
        REM *****************************************************************

        If PointsWonWhite > 0 And PointsWonWhite <= 4 Then
            ttpScoreW.Active = True
            ttpScoreW.SetToolTip(lblScoreWhite, "Come on " & Player1 & "!" & vbCrLf & "You are already dominating.")
        ElseIf PointsWonWhite > 4 And PointsWonWhite <= 8 Then
            ttpScoreW.Active = True
            ttpScoreW.SetToolTip(lblScoreWhite, Player1 & ", The game is in your pocket!")
        ElseIf PointsWonWhite > 8 And PointsWonWhite <= 50 Then
            ttpScoreW.Active = True
            ttpScoreW.SetToolTip(lblScoreWhite, Player2 & " might as well consider resigning and stop wasting their time." & vbCrLf & Player1 & " is too good at chess!")
        ElseIf PointsWonWhite > 50 Then
            ttpScoreW.Active = True
            ttpScoreW.SetToolTip(lblScoreWhite, Player1 & " is a cheater!")
        ElseIf PointsWonWhite = 0 Then
            ttpScoreW.Active = False
        End If

    End Sub
    Private Sub frmChess_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing

        frmLobby.Close()

    End Sub
End Class
